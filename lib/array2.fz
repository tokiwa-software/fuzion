# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature array(l1,l2)
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# array(length0, length1) -- two-dimensional immutable array
#
# array provides two-dimensional immutable arrays. These are actually
# one-dimensional immutable arrays with an additional access function with
# two index parameters.
#
array2(redef T type,
       length0, length1 i32,
       init2 (i32, i32) -> T)
 : array T (fuzion.sys.array<T> length0*length1) unit unit unit
  pre
    safety: length0 >= 0,
    safety: length1 >= 0,
    safety: length0 *? length1 >=? 0
is

  # indices range in first dimension
  #
  indices0 => 0..length0-1


  # indices range in second dimension
  #
  indices1 => 0..length1-1

  # all pairs of indices: (0,0), (0,1), (0,2), .. (length0-1, length1-1)
  #
  indexPairs =>
    indices0.flatMapSequence (tuple i32 i32) (i ->
      indices1.map j->(i,j))


  for i1 in indices0 do
    for i2 in indices1 do
      internalArray[i1 * length1 + i2] := init2 i1 i2

  index [ ] (i1, i2 i32) T
    pre
      safety: 0 <= i1 < length0,
      safety: 0 <= i2 < length1
  is
    array2.this[i1 * length1 + i2]


  # create a string representation of this array including all the string
  # representations of its contents, separated by ',' and enclosed in '['
  # and ']'.  Arrays in inner dimensions are grouped using '[' and ']'.
  #
  redef asString =>
    "[{for
         s := "", s + c + (slice i*length1 (i+1)*length1)
         i in indices0
         c := "", ","
       else
         s
      }]"


  # get a list of tuples indices and elements in this array
  #
  enumerate2 list<tuple<i32, i32, T>> is
    if length == 0
      nil
    else
      enumerate2Cons 0 0


  # create a cons cell for a list of tuples of this array's indices and elements
  # starting at the given indices.
  #
  enumerate2Cons (i, j i32) : Cons<tuple<i32, i32, T>, list<tuple<i32, i32, T>>>
    pre
      debug: 0 <= i < length0,
      debug: 0 <= j < length1
  is
    head => (i, j, index[] i j)
    tail list<tuple<i32, i32, T>> is
      if      j < length1-1 then enumerate2Cons i j+1
      else if i < length0-1 then enumerate2Cons i+1 0
      else                       nil
