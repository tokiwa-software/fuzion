# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature i8
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# i8 -- 8-bit signed integer values
#
i8(val i8) : wrappingInteger i8, hasInterval i8, i8s is

  redef thiz => i8.this.val
  redef orderedThis => i8.this.val

  # overflow checking

  # would negation -thiz cause an overflow?
  redef wrappedOnNeg => isMin

  # would addition thiz + other cause an overflow or underflow?
  redef overflowOnAdd (other i8) => thiz > zero && max -° thiz < other
  redef underflowOnAdd(other i8) => thiz < zero && min -° thiz > other

  # would subtraction thiz - other cause an overflow or underflow?
  redef overflowOnSub (other i8) => thiz > zero && thiz -° max > other
  redef underflowOnSub(other i8) => thiz < zero && thiz -° min < other

  # would multiplication thiz * other cause an overflow or underflow?
  redef overflowOnMul (other i8) => as_i32 *° other.as_i32 > max.as_i32
  redef underflowOnMul(other i8) => as_i32 *° other.as_i32 < min.as_i32

  # neg, add, sub, mul with wrap-around semantics
  redef prefix -° i8 is intrinsic
  redef infix +° (other i8) i8 is intrinsic
  redef infix -° (other i8) i8 is intrinsic
  redef infix *° (other i8) i8 is intrinsic

  # division and remainder with check for div-by-zero
  redef infix / (other i8)
    pre
      safety: other != zero
   => div(other)
  redef infix % (other i8)
    pre
      safety: other != zero
   => mod(other)

  # private division and remainder with crash in case of div-by-zero
  private div (other i8) i8 is intrinsic
  private mod (other i8) i8 is intrinsic

  # bitwise and, or and xor operations
  redef infix &  (other i8) i8 is intrinsic
  redef infix |  (other i8) i8 is intrinsic
  redef infix ^  (other i8) i8 is intrinsic

  # shift operations (signed)
  redef infix >> (other i8) i8 is intrinsic
  redef infix << (other i8) i8 is intrinsic

  # comparison
  redef infix == (other i8) bool is intrinsic
  redef infix != (other i8) bool is intrinsic
  redef infix <  (other i8) bool is intrinsic
  redef infix <= (other i8) bool is intrinsic
  redef infix >  (other i8) bool is intrinsic
  redef infix >= (other i8) bool is intrinsic

  i8.type.equality(a, b i8) bool is intrinsic

  # conversion to u32, i64 and u64, with range check
  as_i16  => as_i32.as_i16
  as_i32 i32 is intrinsic
  as_i64  => as_i32.as_i64
# as_i128 => as_i32.as_i128

  as_u8 u8
    pre
      debug: thiz >= zero
    is
      castTo_u8
  as_u16 u16
    pre
      debug: thiz >= zero
    is
      castTo_u16
  as_u32 u32
    pre
      debug: thiz >= zero
    is
      castTo_u32
  as_u64 u64
    pre
      debug: thiz >= zero
    is
      castTo_u64
  as_u128 u128
    pre
      debug: thiz >= zero
    is
      castTo_u128
  as_int int is
    int as_i64

  # casting to unsigned, adding 1<<8 if negative
  castTo_u8   u8   is intrinsic           # 3 -> 3, -3 -> 0xfd
  castTo_u16  u16  is castTo_u8.as_u16    # 3 -> 3, -3 -> 0x00fd
  castTo_u32  u32  is castTo_u8.as_u32    # 3 -> 3, -3 -> 0x0000_00fd
  castTo_u64  u64  is castTo_u8.as_u64    # 3 -> 3, -3 -> 0x0000_0000_0000_00fd
  castTo_u128 u128 is castTo_u8.as_u128   # 3 -> 3, -3 -> 0x0000_0000_0000_0000_0000_0000_0000_00fd

  # NYI: max is redefined here only to solve repeated inheritance conflict. Since max inherited
  # from hasInterval i8 is abstract, fz should not complain about this conflict.
  redef max => i8 0x7f


  # create hash code from this number
  hash u64 is
    castTo_u64.hash


  # find the highest 1 bit in this integer and return integer with
  # this single bit set or 0 if this is zero.
  #
  highestOneBit i8 is
    val.castTo_u8.highestOneBit.castTo_i8


  # count the number of trailing zeros in this integer.
  #
  trailingZeros i32 is
    val.castTo_u8.trailingZeros


  # count the number of 1 bits in the binary representation of this
  # integer.
  #
  onesCount i32 is
    val.castTo_u8.onesCount


# i8s -- unit type defining features related to i8 but not requiring an
# instance
#
i8s : wrappingIntegers i8 is

  redef name => "i8"

  redef zero => i8 0
  redef one  => i8 1

  redef min => i8 -0x80
  redef max => i8  0x7f

  # returns the number in whose bit representation all bits are ones
  redef all_bits_set => i8 -1


# i8 -- returns value of unit type i8s
#
# This is a convenience feature that allows using, e.g., 'i8.sum' to
# get the the monoid of (i8, infix +) instead of 'i8s.sum'.
#
# since this i8 with no arguments is a routine and not a constructor, it
# does not define a type (which would cause a name clash with i8 with one
# argument).
#
i8 => i8s
