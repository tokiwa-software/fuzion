# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature u64
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# u64 -- 64-bit unsigned integer values
#
public u64(public val u64) : num.wrap_around, has_interval is

  public thiz => u64.this.val

  # overflow checking

  # would negation -thiz cause an overflow?
  redef wrapped_on_neg => !is_zero

  # would addition thiz + other cause an overflow or underflow?
  public fixed overflow_on_add (other u64) => u64.type.max -° thiz < other
  public fixed underflow_on_add(other u64) => false

  # would subtraction thiz - other cause an overflow or underflow?
  public fixed overflow_on_sub (other u64) => false
  public fixed underflow_on_sub(other u64) => thiz < other

  # would multiplication thiz * other cause an overflow or underflow?
  public fixed overflow_on_mul (other u64) => if other = (u64 0) false else (thiz *° other / other) != thiz
  public fixed underflow_on_mul(other u64) => false

  # neg, add, sub, mul with wrap-around semantics
  public fixed prefix -° u64 is intrinsic
  public fixed infix +° (other u64) u64 is intrinsic
  public fixed infix -° (other u64) u64 is intrinsic
  public fixed infix *° (other u64) u64 is intrinsic

  # division and remainder with check for div-by-zero
  public fixed infix / (other u64)
  pre
    safety: other != u64 0
  => div(other)
  public fixed infix %  (other u64)
  pre
    safety: other != u64 0
  => mod(other)

  # private division and remainder with crash in case of div-by-zero
  private div (other u64) u64 is intrinsic
  private mod (other u64) u64 is intrinsic

  # bitwise and, or and xor operations
  public fixed infix &  (other u64) u64 is intrinsic
  public fixed infix |  (other u64) u64 is intrinsic
  public fixed infix ^  (other u64) u64 is intrinsic

  # shift operations (unsigned)
  public fixed infix >> (other u64) u64 is intrinsic
  public fixed infix << (other u64) u64 is intrinsic

  # this u64 as an i8
  public as_i8 i8
    pre
      thiz ≤ i8.type.max.as_u64
    is
      low8bits.as_i8


  # this u64 as an i16
  public as_i16 i16
    pre
      thiz ≤ i16.type.max.as_u64
    is
      low16bits.as_i16


  # this u64 as an i32
  public as_i32 i32
    pre
      thiz ≤ i32.type.max.as_u64
    is
      low32bits.as_i32


  # this u64 as an i64
  public as_i64 i64
    pre
      thiz ≤ i64.type.max.as_u64
#    post
#      analysis:  result.as_u64 == thiz
    is
      cast_to_i64
# as_i128 i128 is as_u128.as_i128


  # this u64 as an u8
  public as_u8 u8
#    pre
#      thiz ≤ u8.type.max.as_i64
#    post
#      analysis: result.as_u64 == thiz
    is
      low8bits


  # this u64 as an u16
  public as_u16 u16
#    pre
#      thiz ≤ u16.type.max.as_i64
#    post
#      analysis: result.as_u64 == thiz
    is
      low16bits


  # this u64 as an u32
  public as_u32 u32
#    pre
#      thiz ≤ u32.type.max.as_i64
#    post
#      analysis: result.as_u64 == thiz
    is
      low32bits


  # this u64 as an u128
  public as_u128 u128
#    post
#      analysis: result.as_u64 == thiz
    is
      u128 0 thiz


  # this u64 as an int
  public as_int  => int.type.from_u64 val


  # this u64 as an uint
  public as_uint uint
  is
    uint val


  public low8bits   u8  is intrinsic
  public low16bits  u16 is intrinsic
  public low32bits  u32 is intrinsic
  public cast_to_i64 i64 is intrinsic
  public cast_to_f64 f64 is intrinsic

  # conversion to float
  public as_f64 f64 is intrinsic
  public as_f32 => as_f64.as_f32

  # NYI: max is redefined here only to solve repeated inheritance conflict. Since max inherited
  # from has_interval is abstract, fz should not complain about this conflict.
  public fixed redef max u64 is 0x_ffff_ffff_ffff_ffff


  # create hash code from this number
  public type.hash_code(a u64.this) u64 is
    a.thiz


  # find the highest 1 bit in this integer and return integer with
  # this single bit set or 0 if this is 0.
  #
  public highest_one_bit u64 is
    // NYI: should be possible to reuse v, s names
    (v0, s0) := (val, u64 0)
    (v1, s1) := if (v0 < u64 0x1_0000_0000) (v0, s0) else (v0 >> 32, s0 + 32)
    (v2, s2) := if (v1 <      u64 0x1_0000) (v1, s1) else (v1 >> 16, s1 + 16)
    (v3, s3) := if (v2 <         u64 0x100) (v2, s2) else (v2 >>  8, s2 +  8)
    (v4, s4) := if (v3 <          u64 0x10) (v3, s3) else (v3 >>  4, s3 +  4)
    (v5, s5) := if (v4 <             u64 4) (v4, s4) else (v4 >>  2, s4 +  2)
    (v6, s6) := if (v5 <             u64 2) (v5, s5) else (v5 >>  1, s5 +  1)
    v6 << s6


  # count the number of trailing zeros in this integer.
  #
  public trailing_zeros i32 is
    // NYI: should be possible to reuse v, s names
    (v0, s0) := (val, 0)
    (v1, s1) := if ((v0 & 0x_ffff_ffff) != u64 0) (v0, s0) else (v0 >> 32, s0 + 32)
    (v2, s2) := if ((v1 &      0x_ffff) != u64 0) (v1, s1) else (v1 >> 16, s1 + 16)
    (v3, s3) := if ((v2 &         0xff) != u64 0) (v2, s2) else (v2 >>  8, s2 +  8)
    (v4, s4) := if ((v3 &          0xf) != u64 0) (v3, s3) else (v3 >>  4, s3 +  4)
    (v5, s5) := if ((v4 &            3) != u64 0) (v4, s4) else (v4 >>  2, s4 +  2)
    (v6, s6) := if ((v5 &            1) != u64 0) (v5, s5) else (v5 >>  1, s5 +  1)
    s7       := if ((v6 &            1) != u64 0)      s6  else                 64
    s7


  # count the number of 1 bits in the binary representation of this
  # integer.
  #
  public ones_count i32 is
    v := val;
    m := v & 0x_aaaaaaaa_aaaaaaaa; v := v - m + (m >> 1)
    m := v & 0x_cccccccc_cccccccc; v := v - m + (m >> 2)
    m := v & 0x_f0f0f0f0_f0f0f0f0; v := v - m + (m >> 4)
    (v *° 0x_01010101_01010101 >> 56).as_i32


  # -----------------------------------------------------------------------
  #
  # type features:


  # identity element for 'infix +'
  #
  fixed type.zero u64 is 0


  # identity element for 'infix *'
  #
  fixed type.one  u64 is 1


  # equality
  #
  fixed type.equality(a, b u64) bool is intrinsic


  # total order
  #
  fixed type.lteq(a, b u64) bool is intrinsic


  # returns the number in whose bit representation all bits are ones
  fixed redef type.all_bits_set => u64 0x_ffff_ffff_ffff_ffff


  # minimum
  #
  public fixed type.min => u64 0


  # maximum
  #
  public fixed type.max => u64 0x_ffff_ffff_ffff_ffff
