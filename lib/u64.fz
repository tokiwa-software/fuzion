# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature u64
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# u64 -- 64-bit unsigned integer values
#
u64(val u64) : wrappingInteger<u64>, hasInterval<u64>, u64s is

  redef thiz => u64.this.val
  redef orderedThis => u64.this.val

  # overflow checking

  # would negation -thiz cause an overflow?
  redef wrappedOnNeg => !isZero

  # would addtion thiz + other cause an overflow or underflow?
  redef overflowOnAdd (other u64) => max -° thiz < other
  redef underflowOnAdd(other u64) => false

  # would subtraction thiz - other cause an overflow or underflow?
  redef overflowOnSub (other u64) => false
  redef underflowOnSub(other u64) => thiz < other

  # would multiplication thiz * other cause an overflow or underflow?
  redef overflowOnMul (other u64) => if other == 0 false else (thiz *° other / other) != thiz
  redef underflowOnMul(other u64) => false

  # neg, add, sub, mul with wrap-around semantics
  redef prefix -° u64 is intrinsic
  redef infix +° (other u64) u64 is intrinsic
  redef infix -° (other u64) u64 is intrinsic
  redef infix *° (other u64) u64 is intrinsic

  # division and remainder with check for div-by-zero
  redef infix / (other u64)
    pre
      safety: other != 0
   => div(other)
  redef infix %  (other u64)
    pre
      safety: other != 0
   => mod(other)

  # private division and remainder with crash in case of div-by-zero
  private div (other u64) u64 is intrinsic
  private mod (other u64) u64 is intrinsic

  # bitwise and, or and xor operations
  redef infix &  (other u64) u64 is intrinsic
  redef infix |  (other u64) u64 is intrinsic
  redef infix ^  (other u64) u64 is intrinsic

  # shift operations (unsigned)
  redef infix >> (other u64) u64 is intrinsic
  redef infix << (other u64) u64 is intrinsic

  # comparison
  redef infix == (other u64) bool is intrinsic
  redef infix != (other u64) bool is intrinsic
  redef infix <  (other u64) bool is intrinsic
  redef infix <= (other u64) bool is intrinsic
  redef infix >  (other u64) bool is intrinsic
  redef infix >= (other u64) bool is intrinsic

  as_i8 i8
    pre
      thiz <= i8.max.as_u64
    is
      low8bits.as_i8
  as_i16 i16
    pre
      thiz <= i16.max.as_u64
    is
      low16bits.as_i16
  as_i32 i32
    pre
      thiz <= i32.max.as_u64
    is
      low32bits.as_i32
  as_i64 i64
    pre
      thiz <= i64.max.as_u64
#    post
#      analysis:  result.as_u64 == thiz
    is
      castTo_i64
# as_i128 i128 is as_u128.as_i128
  as_u8 u8
#    pre
#      thiz <= u8.max.as_i64
#    post
#      analysis: result.as_u64 == thiz
    is
      low8bits
  as_u16 u16
#    pre
#      thiz <= u16.max.as_i64
#    post
#      analysis: result.as_u64 == thiz
    is
      low16bits
  as_u32 u32
#    pre
#      thiz <= u32.max.as_i64
#    post
#      analysis: result.as_u64 == thiz
    is
      low32bits
  as_u128 u128
#    post
#      analysis: result.as_u64 == thiz
    is
      u128 0 thiz

  low8bits   u8  is intrinsic
  low16bits  u16 is intrinsic
  low32bits  u32 is intrinsic
  castTo_i64 i64 is intrinsic
  castTo_f64 f64 is intrinsic

  # conversion to float
  as_f64 f64 is intrinsic
  as_f32 => as_f64.as_f32

  # NYI: max is redefined here only to solve repeated inheritance conflict. Since max inherited
  # from hasInterval is abstract, fz should not complain about this conflict.
  redef max u64 is 0x_ffff_ffff_ffff_ffff


  # create hash code from this number
  hash u64 is
    thiz


  # find the highest 1 bit in this integer and return integer with
  # this single bit set or 0 if this is 0.
  #
  highestOneBit u64 is
    // NYI: should be possible to reuse v, s names
    (v0, s0) := (val, u64 0)
    (v1, s1) := if (v0 < 0x1_0000_0000) (v0, s0) else (v0 >> 32, s0 + 32)
    (v2, s2) := if (v1 <      0x1_0000) (v1, s1) else (v1 >> 16, s1 + 16)
    (v3, s3) := if (v2 <         0x100) (v2, s2) else (v2 >>  8, s2 +  8)
    (v4, s4) := if (v3 <          0x10) (v3, s3) else (v3 >>  4, s3 +  4)
    (v5, s5) := if (v4 <             4) (v4, s4) else (v4 >>  2, s4 +  2)
    (v6, s6) := if (v5 <             2) (v5, s5) else (v5 >>  1, s5 +  1)
    v6 << s6


  # count the number of trailing zeros in this integer.
  #
  trailingZeros i32 is
    // NYI: should be possible to reuse v, s names
    (v0, s0) := (val, 0)
    (v1, s1) := if (v0 & 0x_ffff_ffff)/=0 (v0, s0) else (v0 >> 32, s0 + 32)
    (v2, s2) := if (v1 &      0x_ffff)/=0 (v1, s1) else (v1 >> 16, s1 + 16)
    (v3, s3) := if (v2 &         0xff)/=0 (v2, s2) else (v2 >>  8, s2 +  8)
    (v4, s4) := if (v3 &          0xf)/=0 (v3, s3) else (v3 >>  4, s3 +  4)
    (v5, s5) := if (v4 &            3)/=0 (v4, s4) else (v4 >>  2, s4 +  2)
    (v6, s6) := if (v5 &            1)/=0 (v5, s5) else (v5 >>  1, s5 +  1)
    s7       := if (v6 &            1)/=0      s6  else                 64
    s7


  # count the number of 1 bits in the binary representation of this
  # integer.
  #
  onesCount i32 is
    v := val;
    m := v & 0x_aaaaaaaa_aaaaaaaa; v := v - m + (m >> 1)
    m := v & 0x_cccccccc_cccccccc; v := v - m + (m >> 2)
    m := v & 0x_f0f0f0f0_f0f0f0f0; v := v - m + (m >> 4)
    (v *° 0x_01010101_01010101 >> 56).as_i32


# u64s -- unit type defining features related to u64 but not requiring an
# instance
#
u64s : wrappingIntegers<u64> is

  redef name => "u64"

  redef zero => u64 0
  redef one  => u64 1

  redef min => u64 0
  redef max => u64 0x_ffff_ffff_ffff_ffff


# u64 -- returns value of unit type u64s
#
# This is a convenience feature that allows using, e.g., 'u64.sum' to
# get the the monoid of (u64, infix +) instead of 'u64s.sum'.
#
# since this u64 with no arguments is a routine and not a constructor, it
# does not define a type (which would cause a name clash with u64 with one
# argument).
#
u64 => u64s
