# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature u8
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# u8 -- 8-bit unsigned integer values
#
u8(val u8) : wrappingInteger u8, hasInterval u8, u8s is

  redef thiz => u8.this.val
  redef orderedThis => u8.this.val

  # overflow checking

  # would negation -thiz cause an overflow?
  redef wrappedOnNeg => !isZero

  # would addition thiz + other cause an overflow or underflow?
  redef overflowOnAdd (other u8) => max -° thiz < other
  redef underflowOnAdd(other u8) => false

  # would subtraction thiz - other cause an overflow or underflow?
  redef overflowOnSub (other u8) => false
  redef underflowOnSub(other u8) => thiz < other

  # would multiplication thiz * other cause an overflow or underflow?
  redef overflowOnMul (other u8) => as_i32 *° other.as_i32 > max.as_i32
  redef underflowOnMul(other u8) => false

  # neg, add, sub, mul with wrap-around semantics
  redef prefix -° u8 is intrinsic
  redef infix +° (other u8) u8 is intrinsic
  redef infix -° (other u8) u8 is intrinsic
  redef infix *° (other u8) u8 is intrinsic

  # division and remainder with check for div-by-zero
  redef infix / (other u8)
    pre
      safety: other != zero
   => div(other)
  redef infix % (other u8)
    pre
      safety: other != zero
   => mod(other)

  # private division and remainder with crash in case of div-by-zero
  private div (other u8) u8 is intrinsic
  private mod (other u8) u8 is intrinsic

  # bitwise and, or and xor operations
  redef infix &  (other u8) u8 is intrinsic
  redef infix |  (other u8) u8 is intrinsic
  redef infix ^  (other u8) u8 is intrinsic

  # shift operations (unsigned)
  redef infix >> (other u8) u8 is intrinsic
  redef infix << (other u8) u8 is intrinsic

  # comparison
  redef infix == (other u8) bool is intrinsic
  redef infix != (other u8) bool is intrinsic
  redef infix <  (other u8) bool is intrinsic
  redef infix <= (other u8) bool is intrinsic
  redef infix >  (other u8) bool is intrinsic
  redef infix >= (other u8) bool is intrinsic

  u8.type.equality(a, b u8) bool is intrinsic

  as_i8 i8
    pre
      debug: thiz <= i8.max.as_u8
    is
      castTo_i8
  as_i16 => as_i32.as_i16
  as_i32 i32 is intrinsic
  as_i64  => as_i32.as_i64
# as_i128 => as_i32.as_i128
  as_u16  => as_i32.as_u16
  as_u32  => as_i32.as_u32
  as_u64  => as_i32.as_u64
  as_u128 => as_i32.as_u128
  as_int  => int as_i64

  castTo_i8 i8 is intrinsic

  # NYI: max is redefined here only to solve repeated inheritance conflict. Since max inherited
  # from hasInterval is abstract, fz should not complain about this conflict.
  redef max => u8 0xff


  # create hash code from this number
  hash u64 is
    as_u64.hash


  # find the highest 1 bit in this integer and return integer with
  # this single bit set or 0 if this is 0.
  #
  highestOneBit u8 is
    // NYI: should be possible to reuse v, s names
    (v0, s0) := (val, u8 0)
    (v1, s1) := if (v0 < 0x10) (v0, s0) else (v0 >> 4, s0 + 4)
    (v2, s2) := if (v1 <    4) (v1, s1) else (v1 >> 2, s1 + 2)
    (v3, s3) := if (v2 <    2) (v2, s2) else (v2 >> 1, s2 + 1)
    v3 << s3


  # count the number of trailing zeros in this integer.
  #
  trailingZeros i32 is
    // NYI: should be possible to reuse v, s names
    (v0, s0) := (val, 0)
    (v1, s1) := if (v0 & 0xf) /= 0 then (v0, s0) else (v0 >> 4, s0 + 4)
    (v2, s2) := if (v1 &   3) /= 0 then (v1, s1) else (v1 >> 2, s1 + 2)
    (v3, s3) := if (v2 &   1) /= 0 then (v2, s2) else (v2 >> 1, s2 + 1)
    s4       := if (v3 &   1) /= 0 then      s3  else                8
    s4


  # count the number of 1 bits in the binary representation of this
  # integer.
  #
  onesCount i32 is
    v := val.as_i32
    m := v & 0xaa; v := v - m + (m >> 1)
    m := v & 0xcc; v := v - m + (m >> 2)
    m := v & 0xf0; v := v - m + (m >> 4)
    v


# u8s -- unit type defining features related to u8 but not requiring an
# instance
#
u8s : wrappingIntegers u8 is

  redef name => "u8"

  redef zero => u8 0
  redef one  => u8 1

  redef min => zero
  redef max => u8 0xff

  # returns the number in whose bit representation all bits are ones
  redef all_bits_set => u8 0xff


# u8 -- returns value of unit type u8s
#
# This is a convenience feature that allows using, e.g., 'u8.sum' to
# get the the monoid of (u8, infix +) instead of 'u8s.sum'.
#
# since this u8 with no arguments is a routine and not a constructor, it
# does not define a type (which would cause a name clash with u8 with one
# argument).
#
u8 => u8s
