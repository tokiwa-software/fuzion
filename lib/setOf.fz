# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature setOf
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# setOf -- routine to initialize a set from a Sequence of ordered elements
#
# This feature creates an instance of a Set.
#
setOf(K (ordered K).type, vs Sequence K) Set K is psSet vs


# set_of -- routine to initialize a set from a Sequence of hashable elements
#
# This feature creates an instance of a Set.
#
# NYI name clash with feature above
set_of(K (hasHash K).type, vs Sequence K) Set K is

  private map := CTrie K unit
  vs.forAll (k -> map.add k unit)

  ref : Set K

    # does this set contain the given value?
    #
    contains (k K) bool is
      map[k].exists


    # list representation of values in this set
    #
    asList list K is
      map.keys.asList


    # add new element k to this set.
    #
    add (k K) Set K is
      set_of (vs++[k])

