# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature fuzion.sys.envVars
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# fuzion.sys.env_vars -- low-level feature to access environment variables
#
private env_vars is


  # intrinsic to check if env var with given name exists
  #
  # NOTE: parameter s must be 0-terminated char *
  #
  private has0(s Any, sl i32) bool is intrinsic


  # intrinsic to get env var with given name
  #
  # NOTE: parameter s must be 0-terminated char *
  #
  private get0(s Any, sl i32) String
  is intrinsic

  # intrinsic to set env var
  private set0(s Any, sl i32, t Any, tl i32) bool is intrinsic

  # intrinsic to unset env var
  private unset0(s Any, sl i32) bool is intrinsic


  # check if env var with given name exists
  #
  has(s String) bool is
    a := s.utf8.as_array
    has0 a.internalArray.data a.length


  # intrinsic to get env var with given name
  #
  get(s String) option String is
    a := s.utf8.as_array
    if has0 a.internalArray.data a.length then
      get0 a.internalArray.data a.length
    else
      nil

  # set the value of the env var with given name to the given new value
  # will overwrite the current value, if it is set
  # NYI: #627: rename to set once set keyword is removed
  #
  set1(name String, val String) outcome unit is
    k := name.utf8.as_array
    v := val.utf8.as_array

    if set0 k.internalArray.data k.length v.internalArray.data v.length
      unit
    else
      error "failed to set env var"

  # unset the env var with the given name
  # note this returns success (unit) if the given env var did not exist
  #
  unset(name String) outcome unit is
    k := name.utf8.as_array

    if unset0 k.internalArray.data k.length
      unit
    else
      error "failed to unset env var"
