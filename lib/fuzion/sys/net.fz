# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature fuzion.sys.net
#
# -----------------------------------------------------------------------

net is

  // get a socket descriptor, zero on success
  socket i64 is intrinsic

  // connect, zero on success
  bind   (sd i64, family i32, arr_data Any, length i32) i64 is intrinsic

  // listen, zero on success
  listen (sd i64, backlog i32) i64 is intrinsic

  // returns file descriptor or -1 on error
  accept (sd i64) i64 is intrinsic

  // connect, zero on success
  connect(sd i64, family i32, arr_data Any, length i32) i64 is intrinsic



  server(port u16, read_write ((u64) -> outcome (array u8), (Sequence u8) -> outcome unit) -> bool) outcome unit is

    backlog := 10

    # open socket
    sd := socket

    if sd = -1
      error "a new socket could not be created"
    else
      af_inet := 2
      port_addr array u8:= (port.as_bytes ++ [u8 0, u8 0, u8 0, u8 0]).as_array
      # bind to port
      if (bind sd af_inet port_addr.internalArray.data port_addr.length) != 0
        fuzion.sys.fileio.close sd
        error "binding socket to port $port failed."
      else
        # listen
        if (listen sd backlog) = -1
          fuzion.sys.fileio.close sd
          error "listening on socket failed."
        else
          for cd := accept sd, accept sd
          while cd != -1 && (read_write
              # reading
              ((max) ->
                fuzion.sys.fileio.read cd max)
              # writing
              ((data) ->
                fuzion.sys.fileio.write cd data.as_array)
            )
          else
            # NYI better type inference needed
            res outcome unit := (if cd = -1
              fuzion.sys.fileio.close sd
              error "there was an error accepting a new connection."
            else
              match fuzion.sys.fileio.close cd
                err error =>
                  fuzion.sys.fileio.close sd
                  err
                unit      =>
                  fuzion.sys.fileio.close sd
                )
            res



  client(addr u32, port u16, read_write ((u64) -> outcome (array u8), (Sequence u8) -> outcome unit) -> unit) outcome unit is

    # open socket
    sd := socket

    if sd = -1
      error "a new socket could not be created"
    else
      af_inet := 2
      port_addr array u8:= (port.as_bytes ++ addr.as_bytes).as_array

      # connect to addr, port
      if (connect sd af_inet port_addr.internalArray.data port_addr.length) != 0
        fuzion.sys.fileio.close sd
        error "binding socket to port $port failed."
      else
        (read_write
          # reading
          ((max) ->
            fuzion.sys.fileio.read sd max)
          # writing
          ((data) ->
            fuzion.sys.fileio.write sd data.as_array)
        )

        fuzion.sys.fileio.close sd

