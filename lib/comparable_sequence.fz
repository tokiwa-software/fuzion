# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature comparable_sequence
#
#  Author: Michael Lill (michael.lill@tokiwa.software)
#
# -----------------------------------------------------------------------

# comparable_sequence -- a Sequence that inherits from hasEquals
#
comparable_sequence(A (hasEquals A).type, from Sequence A) : Sequence A, hasEquals (comparable_sequence A)
is

  # create a list from this Sequence.
  #
  redef asList => from.asList


  # equality check implementation for inherited hasEquals
  infix = (o comparable_sequence A) bool is
    fa := from.asArray
    oa := o.asArray
    if fa.count != oa.count
      false
    else
      (0..(from.count - 1)) ∀ (i -> fa[i] = oa[i])

  # NYI: #637:
  # comparable_sequence(A (hasEquals A).type, a, b comparable_sequence A) bool is
  #   aa := a.asArray
  #   ba := b.asArray
  #   if aa.count ≟ ba.count
  #     (0..(a.count - 1)) ∀ (i -> equals A aa[i] ba[i])
  #   else
  #     false
