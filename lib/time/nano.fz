# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature time.nano
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# time.nano -- effect providing nano time
#
# time.nano is a timer that provides high precision but possibly low
# accuracy.  Such a timer is typically useful for timing the duration
# of events, such as measuring the time it takes to perform some
# calculation.
#
# time.nano may have a signficant drift compared to actual time, it might
# not be the right source of time to, e.g., feed an alarm clock that should
# wake you up at 6h30 every morning.
#
private nano (
  p Nano_Time_Provider,

  # action to be taken: install or default?
  redef r effectMode.val,

  _ unit
  ) : effect r
is

  # no guarantee can be given for precision nor resolution
  read =>
    res := p.read
    replace
    res

  # no guarantee can be given for precision nor resolution
  sleep(d duration) =>
    res := p.sleep d
    replace
    res


# short-hand for creating and installing time.nano effect
#
nano(rr ()->unit) => nano defaultNanoTime rr


# short-hand for creating and installing time.nano effect
#
nano(p Nano_Time_Provider, rr ()->unit) =>
  nano p (effectMode.inst rr) unit
  unit


# short-hand for accessing time.nano effect in current environment
#
nano =>
  nanos.installDefault
  nano.env


# abstract provider that can deliver a nano time
#
Nano_Time_Provider ref is

  # no guarantee can be given for precision nor resolution
  read u64 is abstract

  # no guarantee can be given for precision nor resolution
  sleep(d duration) unit is abstract


defaultNanoTime : Nano_Time_Provider is

  # no guarantee can be given for precision nor resolution
  read => fuzion.std.nano_time

  # no guarantee can be given for precision nor resolution
  sleep(d duration) => fuzion.std.nano_sleep d.nanos


# unit type feature defining features related to time.nano but not requiring an
# instance.
#
nanos is

  # install default effect time using defaultTime
  installDefault unit is
    if !effects.exists nano
      _ := nano defaultNanoTime effectMode.default unit
