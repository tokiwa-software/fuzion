# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature equatable
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# equatable -- feature for immutable values that define an equality relation
#
public equatable is


  # equality implements the default equality relation for values of this type.
  #
  # This relation must be
  #
  #  - reflexive (equality a b),
  #  - symmetric (equality a b = equality b a), and
  #  - transitive ((equality a b && equality b c) : equality a c).
  #
  # result is true iff 'a' is considered to represent the same abstract value
  # as 'b'.
  #
  public type.equality(a, b equatable.this) bool => abstract


  # is this part of given set
  #
  public element_of(s container.Set equatable.this) => s.contains equatable.this


  # is this not part of given set
  #
  public not_element_of(s container.Set equatable.this) => !(equatable.this.element_of s)


  # is `this` contained in `Set` `s`?
  #
  # This should usually be called using type inference as in
  #
  #   my_set := set_of ["A","B","C"]
  #   say ("B" ∈ my_set)
  #   say ("D" ∈ my_set)
  #
  public infix ∈ (s container.Set equatable.this) => element_of s


  # is `this` not contained in `Set` `s`?
  #
  # This should usually be called using type inference as in
  #
  #   my_set := set_of ["A","B","C"]
  #   say ("B" ∉ my_set)
  #   say ("D" ∉ my_set)
  #
  public infix ∉ (s container.Set  equatable.this) => not_element_of s
