# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature set_of
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# set_of_ordered -- routine to initialize a set from a Sequence of ordered elements
#
# This feature creates an instance of a Set.
#
public set_of_ordered(K type : property.orderable, vs Sequence K) container.Set K is (container.ps_set K).type.from_sequence vs


# set_of_hashable -- routine to initialize a set from a Sequence of hashable elements
#
# This feature creates an instance of a Set.
#
public set_of_hashable(K type : property.hashable, vs (container.ctrie K unit) | (Sequence K)) Set K is

  private map container.ctrie K unit :=
    match vs
      vss (Sequence K) => (container.ctrie K unit).type.from_entries (vss.map_sequence (k -> tuple k unit))
      vsc (container.ctrie K unit) => vsc

  ref : Set K

    # does this set contain the given value?
    #
    public contains (k K) bool is
      map[k].exists


    # list representation of values in this set
    #
    public redef as_list list K is
      map.keys.as_list


    # add new element k to this set.
    #
    public add (k K) Set K is
      ss := map.snapshot false
      ss.add k unit
      set_of_hashable ss


    # remove an element k from the set if it exists.
    # return the same set if it does not exist.
    #
    public remove (k K) Set K is
      ss := map.snapshot false
      ss.remove k
      set_of_hashable ss
