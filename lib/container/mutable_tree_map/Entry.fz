# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature Entry
#
# -----------------------------------------------------------------------


# Entry -- an entry of a mutable tree map
#
module Entry(LM type : mutate, K type : property.orderable, V type, module key K, module val V) ref is


  # reference to the left subtree at this entry, or, if it is empty, nil
  #
  module left := LM.env.new (option (Entry LM K V)) nil


  # reference to the right subtree at this entry, or if it is empty, nil
  #
  module right := LM.env.new (option (Entry LM K V)) nil


  # height of the subtree whose root is this entry
  #
  module height := LM.env.new i32 0


  # get the value stored in this submap at key k, nil if k is not a key
  # in this submap
  #
  module get(k K) option V is
    if k < key
      left.get.bind V (e -> e.get k)
    else if key < k
      right.get.bind V (e -> e.get k)
    else
      val


  # get a sequence of all key/value pairs in this Entry
  #
  module items Sequence (tuple K V) is

    head := (key, val)

    tail Lazy (list (tuple K V)) := ()->
      (left.get.map x->x.items).get (list (tuple K V)).type.empty ++
        (right.get.map x->x.items).get (list (tuple K V)).type.empty

    list head tail
