# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature i16
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# i16 -- 16-bit signed integer values
#
i16(val i16) : wrapping_integer i16, hasInterval i16, i16s is

  redef thiz => i16.this.val

  # overflow checking

  # would negation -thiz cause an overflow?
  redef wrappedOnNeg => isMin

  # would addition thiz + other cause an overflow or underflow?
  redef overflowOnAdd (other i16) => thiz ⩼ zero && max -° thiz ⩻ other
  redef underflowOnAdd(other i16) => thiz ⩻ zero && min -° thiz ⩼ other

  # would subtraction thiz - other cause an overflow or underflow?
  redef overflowOnSub (other i16) => thiz ⩼ zero && thiz -° max ⩼ other
  redef underflowOnSub(other i16) => thiz ⩻ zero && thiz -° min ⩻ other

  # would multiplication thiz * other cause an overflow or underflow?
  redef overflowOnMul (other i16) => as_i32 *° other.as_i32 ⩼ max.as_i32
  redef underflowOnMul(other i16) => as_i32 *° other.as_i32 ⩻ min.as_i32

  # neg, add, sub, mul with wrap-around semantics
  redef prefix -° i16 is intrinsic
  redef infix +° (other i16) i16 is intrinsic
  redef infix -° (other i16) i16 is intrinsic
  redef infix *° (other i16) i16 is intrinsic

  # division and remainder with check for div-by-zero
  redef infix / (other i16)
    pre
      safety: other != zero
   => div(other)
  redef infix % (other i16)
    pre
      safety: other != zero
   => mod(other)

  # private division and remainder with crash in case of div-by-zero
  private div (other i16) i16 is intrinsic
  private mod (other i16) i16 is intrinsic

  # bitwise and, or and xor operations
  redef infix &  (other i16) i16 is intrinsic
  redef infix |  (other i16) i16 is intrinsic
  redef infix ^  (other i16) i16 is intrinsic

  # shift operations (signed)
  redef infix >> (other i16) i16 is intrinsic
  redef infix << (other i16) i16 is intrinsic

  # conversion to u32, i64 and u64, with range check
  as_i8 i8
    pre
      thiz ≥ i8.min.as_i16,
      thiz ≤ i8.max.as_i16
    is
      low8bits.castTo_i8
  as_i32 i32 is intrinsic
  as_i64  => thiz.as_i32.as_i64
# as_i128 => thiz.as_i32.as_i128

  as_u8 u8
    pre
      debug: (thiz ≥ zero) && (thiz ≤ u8.max.as_i16)
    is
      low8bits
  as_u16 u16
    pre
      debug: (thiz ≥ zero) && (thiz ≤ u8.max.as_i16)
    is
      castTo_u16
  as_u32 u32
    pre
      debug: thiz ≥ zero
    is
      castTo_u32
  as_u64 u64
    pre
      debug: thiz ≥ zero
    is
      castTo_u64
  as_u128 u128
    pre
      debug: thiz ≥ zero
    is
      castTo_u128
  as_int int is
    int as_i64

  # casting to unsigned, adding 1<<16 if negative
  low8bits    u8   is castTo_u16.as_u8     # 0x1234 ->   0x34, -0x1234 -> 0xcc
  castTo_u16  u16  is intrinsic            # 0x1234 -> 0x1234, -0x1234 -> 0xedcc
  castTo_u32  u32  is castTo_u16.as_u32    # 0x1234 -> 0x1234, -0x1234 -> 0x0000_edcc
  castTo_u64  u64  is castTo_u16.as_u64    # 0x1234 -> 0x1234, -0x1234 -> 0x0000_0000_0000_edcc
  castTo_u128 u128 is castTo_u16.as_u128   # 0x1234 -> 0x1234, -0x1234 -> 0x0000_0000_0000_0000_0000_0000_0000_edcc

  # NYI: max is redefined here only to solve repeated inheritance conflict. Since max inherited
  # from hasInterval<i8> is abstract, fz should not complain about this conflict.
  redef max => i16 0x7fff


  # create hash code from this number
  hash u64 is
    castTo_u64.hash


  # find the highest 1 bit in this integer and return integer with
  # this single bit set or 0 if this is zero.
  #
  highestOneBit i16 is
    val.castTo_u16.highestOneBit.castTo_i16


  # count the number of trailing zeros in this integer.
  #
  trailingZeros i32 is
    val.castTo_u16.trailingZeros


  # count the number of 1 bits in the binary representation of this
  # integer.
  #
  ones_count i32 is
    val.castTo_u16.ones_count


  # -----------------------------------------------------------------------
  #
  # type features:


  # identity element for 'infix +'
  #
  fixed type.zero i16 is 0


  # identity element for 'infix *'
  #
  fixed type.one  i16 is 1


  # equality
  #
  fixed type.equality(a, b i16) bool is intrinsic


  # total order
  #
  fixed type.lteq(a, b i16) bool is intrinsic


  # returns the number in whose bit representation all bits are ones
  redef type.all_bits_set => i16 -1



# i16s -- unit type defining features related to i16 but not requiring an
# instance
#
i16s : wrapping_integers i16 is

  redef name => "i16"

  redef zero => i16 0
  redef one  => i16 1

  redef min => i16 -0x8000
  redef max => i16  0x7fff


# i16 -- returns value of unit type i16s
#
# This is a convenience feature that allows using, e.g., 'i16.sum' to
# get the the monoid of (i16, infix +) instead of 'i16s.sum'.
#
# since this i16 with no arguments is a routine and not a constructor, it
# does not define a type (which would cause a name clash with i16 with one
# argument).
#
i16 => i16s
