# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature integer
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# integer -- abstract ancestor of integer numbers
#
# integer is the abstract ancestor of integer numbers that provides operations
# from numeric plus a devision remainder operation %, bitwise logical operations,
# shift operations and gcd. Also, integers can be used to build fractions.
#
integer(I type : integer I) : numeric I is

  # division remainder
  redef infix % (other I) I
    pre
      safety: other != zero
  is abstract

  # test divisibility by other
  infix %% (other I) bool
    pre
      safety: other != zero
  is
    thiz % other ≟ zero

  # bitwise operations
  infix &  (other I) I is abstract
  infix |  (other I) I is abstract
  infix ^  (other I) I is abstract

  # bitwise NOT
  prefix ~ I
    pre
      is_bounded
  is abstract

  # bitwise NOT (Unicode alias)
  prefix ¬ I is
    ~thiz

  # shift operations
  infix >> (other I) I
    pre
      safety: other.sign ≥ 0
  is abstract

  infix << (other I) I
    pre
      safety: other.sign ≥ 0
  is abstract

  # check if this type of integer is bounded
  #
  # returns false unless redefined by a specific implementation of integer
  is_bounded => false

  # greatest common divisor of this and b
  #
  # note that this assumes zero to be divisible by any positive integer.
  gcd(b I) I
    pre
      safety: sign ≥ 0,
      safety: b.sign ≥ 0
  is
    if b ≟ zero
      thiz
    else
      b.gcd(thiz % b)  # tail recursion

  # create a fraction
  infix /-/ (other I) => (fraction thiz other).reduce

  # create a fraction via unicode fraction slash \u2044 '⁄ '
  infix ⁄ (other I) => integer.this /-/ other


  # convert this to a decimal number in a string.  If negative, add "-" as
  # the first character.
  #
  redef as_string String is integer.this.as_string 10


  # convert this to a number using the given base.  If negative, add "-" as
  # the first character.
  #
  as_string(base u32) String : character_encodings
    pre
      debug: u32 1 ⩻ base ≤ (u32 36)
  is
    b := from_u32 base

    if thiz.sign < 0
      # there could be an overflow on negation
      match -? thiz
        v I => "-" + v.as_string base
        nil => ("-" + (-(thiz / b)).as_string base) + (-(thiz % b)).as_string base
    else
      # this digit as an UTF-8 byte
      digit_as_utf8_byte(d u8) u8
      pre d ≤ (u8 35) # 35 would be a Z
      is
        if d ⩻ u8 10 then String.type.zero_char + d else String.type.a_char + d - 10

      as_list0 (power I) =>
        if power.sign <= 0
          nil
        else
          digit := (thiz / power % b).as_u8
          list (digit_as_utf8_byte digit) (()-> as_list0 power/b)

      String.type.from_bytes (as_list0 (thiz.highest b))


  # convert this to a number using the given base.  If negative, add "-" as
  # the first character.  Extend with leading "0" until the length is at
  # least len
  #
  as_string(len i32, base u32) String
    pre
      debug: u32 1 ⩻ base ≤ (u32 36)
    post
      debug: result.byte_length ≥ len
  is
    # create number
    n := integer.this.as_string base

    # split n into sign and digits
    (sgn, digits) := if (integer.this.sign ⩻ 0) ("-", String.type.from_bytes (n.utf8.drop 1)) else ("", n)

    # create required additional zeros
    zeros := "0" * 0.max (len - n.byte_length)

    # put it all together
    sgn + zeros + digits


  # create binary representation
  #
  bin => integer.this.as_string 2


  # create binary representation with given number of digits.
  #
  bin(len i32) => integer.this.as_string len 2


  # create octal representation
  #
  oct => integer.this.as_string 8


  # create octal representation with given number of digits.
  #
  oct(len i32) => integer.this.as_string len 8


  # create decimal representation
  #
  dec => integer.this.as_string 10


  # create decimal representation with given number of digits.
  #
  dec(len i32) => integer.this.as_string len 10


  # create hexadecimal representation
  #
  hex => integer.this.as_string 16


  # create hexadecimal representation with given number of digits.
  #
  hex(len i32) => integer.this.as_string len 16


  # the least significant byte of this integer
  low8bits u8 is abstract

