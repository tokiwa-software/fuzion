# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature has_interval
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# has_interval -- feature for integers that can define an interval
#
public has_interval : integer is
  module max  has_interval.this is abstract
/*
  zero T is abstract
  one  T is abstract
  public infix +  (other T) T is abstract
  public infix -  (other T) T is abstract
  public infix <= (other T) bool is abstract
  public infix >= (other T) bool is abstract
  public infix <  (other T) bool is abstract
  public infix >  (other T) bool is abstract
*/

  # defining an integer interval from this to other, both inclusive
  #
  # special cases of interval a..b:
  #
  #   a <  b: the interval from a to b, both inclusive
  #   a == b: the interval containing only one element, a
  #   a >  b: an empty interval
  public infix .. (upper has_interval.this) : container.Set has_interval.this is

    public lower has_interval.this is has_interval.this
    # lower => has_interval.this  # NYI: This does not work yet since the result type when doing clazz layout is has_interval and not the actual clazz (i32, etc)

    public size has_interval.this is if lower ≤ upper then upper - lower + has_interval.this.type.one else has_interval.this.type.zero

    # apply function f to all elements in this interval
    public redef for_each(f Unary unit has_interval.this) unit is
      for
        x := lower, x + has_interval.this.type.one
      while x ≤ upper
        f x

    # create a stream of all the elements of this interval, in order.
    public redef as_stream =>
      ref : stream has_interval.this
        x := num_option lower
        public redef has_next bool is x.exists && (x.val ≤ upper)
        public redef next has_interval.this is res := x.val; set x := x +? has_interval.this.type.one; res


    # does this range contain the given value?
    #
    public contains (e has_interval.this) => lower ≤ e ≤ upper


    # Create a Sequence that is stepping through this interval skipping values. For a
    # non-negative step parameter, the stream will return lower, lower+step,
    # lower+2*step, etc. as long as these values are <= upper.
    #
    # For a negative step parameter, the stream will return upper, upper+step,
    # upper+2*step, etc. as long as these values are >= lower.  Note that this means
    # that a negative step will produce a non-empty stream for an empty interval with
    # lower > upper!
    #
    public infix : (step has_interval.this) : container.Set has_interval.this is

      # list representation of values in this interval
      #
      redef as_list list has_interval.this is
        has_next_step => ((step > has_interval.this.type.zero) && (lower ≤ upper) ||
                          (step < has_interval.this.type.zero) && (lower ≥ upper))

        if has_next_step
          tail =>
            lower+?step ? nil => nil
                        | next has_interval.this => (next..upper:step).as_list
          list lower tail
        else
          nil


      # does this range contain the given value?
      #
      public contains (e has_interval.this) => (lower ≤ e ≤ upper) && ((e - lower) %% step)


      # use map implementation from Sequence:
      #
      public map(B type, f Unary B has_interval.this)  => infix : .this.map_sequence f


    # create a list from this interval
    #
    public redef as_list list has_interval.this is
      cons (head has_interval.this) : Cons has_interval.this (list has_interval.this) is
        tail list has_interval.this is
          if (head ≥ upper) nil else cons head+has_interval.this.type.one // NYI should be '+ one', but does not work yet since outer.outer.outer.clazz is has_interval i32, it should be i32.
      if (lower > upper) nil else cons lower


    # use map implementation from Sequence:
    #
    public map(B type, f Unary B has_interval.this)  => map_sequence f


    # string representation of this interval, e.g., "1..10"
    #
    public redef as_string => "$lower..$upper"


  # the open interval from this to the maximum H value
  public postfix .. () infix .. is
    has_interval.this..max

  # postfix .. : infix .. (max) is  # NYI: check: this should have the same effect using a sub-class
