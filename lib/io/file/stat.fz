# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature stat
#
#  Author: Wael Youssfi (wael.youssfi@tokiwa.software)
#
# -----------------------------------------------------------------------

# meta_data will be a feature storing the metadata of file/dir
#
meta_data(
          # the size of the file/dir
          size i64,
          # the time of last modification of the file/dir
          time i64,
          # boolean to check if the pathname is a regular file
          is_regular bool,
          # boolean to check if the pathname is a directory
          is_dir bool) is

# stat -- effect providing operations to retrieve file stats
#
private stat(
  ps Provided_Stat,
  redef r effectMode.val,
  _ unit
  ) : stats, effect r is

  # returns stats of the file/dir passed in the pathname
  # in success it will return a meta_data outcome storing stats regarding the file/dir
  # in case of failure an error will be returned
  # this feature resolves symbolic links
  #
  stats(
        # the (relative or absolute) file name, using platform specific path separators
        path String) outcome meta_data is
    data := array 4 i->(i64 0) # data will contain: [size, time of last modification in seconds, regular file? 1 : 0, dir? 1 : 0]
    p := path.utf8.as_array
    if (ps.stats p.internalArray.data p.length data.internalArray.data)
      replace
      meta_data data[0] data[1] (data[2] ≟ i64 1) (data[3] ≟ i64 1)
    else
      replace
      error "stat error {data[0]} for {path}"

  # returns stats of the file/dir passed in the pathname
  # in success it will return a meta_data outcome storing stats regarding the file/dir
  # in case of failure an error will be returned
  # this feature does not resolve symbolic links and returns stats of the link itself
  #
  lstats(
         # the (relative or absolute) file name, using platform specific path separators
         path String) outcome meta_data is # NYI : not sure whether to use meta_data or introduce a new feature for lstats metadata
    data := array 4 i->(i64 0) # data will contain: [size, time of last modification in seconds, regular file? 1 : 0, dir? 1 : 0]
    p := path.utf8.as_array
    if (ps.stats p.internalArray.data p.length data.internalArray.data)
      replace
      meta_data data[0] data[1] (data[2] ≟ i64 1) (data[3] ≟ i64 1)
    else
      replace
      error "lstat error {data[0]} for {path}"

# short-hand for installing the default stat effect to the provided code
#
stat(f () -> unit) => stat_custom default_provided_stat f

# short-hand for creating and installing a customized stat effect
#
stat_custom(ps Provided_Stat, f () -> unit) =>
  s := stat ps effectMode.new unit
  s.use0 f
  unit

# short-hand for accessing the stat effect in current environment
#
stat => 
  stats.installDefault
  stat.env

# short-hand for accessing and using stats/lstats provided by the stat effect in current environment
# in success it will return a meta_data outcome storing stats regarding the file/dir
# in case of failure an error will be returned
# resolve flag is used to indicate whether to resolve sym links or not
# NYI: lstats behaves the same as stats in the interpreter
#
stat(
     # the (relative or absolute) file name, using platform specific path separators
     path String,
     # a boolean resolve flag to resolve symbolic links or not
     resolve bool) => 
  stats.installDefault
  if resolve
    stat.env.stats path
  else
    stat.env.lstats path

# reference to the stats that could be provided
#
Provided_Stat ref is
  stats(path Any, length i32, meta_data_arr Any) bool is abstract
  lstats(path Any, length i32, meta_data_arr Any) bool is abstract

# the default file stat provided
#
default_provided_stat : Provided_Stat is
  stats(path Any, length i32, meta_data_arr Any) =>
    fuzion.sys.fileio.stats path length meta_data_arr

  lstats(path Any, length i32, meta_data_arr Any) =>
    fuzion.sys.fileio.lstats path length meta_data_arr

# unit type feature defining features related to stat effect but not requiring an
# instance.
#
stats is
  # install default effect io.file.stat
  installDefault unit is 
    if !(effects.exists io.file.stat)
      _ := stat default_provided_stat effectMode.default unit
