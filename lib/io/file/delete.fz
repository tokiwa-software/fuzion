# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature delete
#
#  Author: Wael Youssfi (wael.youssfi@tokiwa.software)
#
# -----------------------------------------------------------------------

# delete -- effect wrapping the file delete operation
#
public delete(dop Delete_Handler, _ unit) : simple_effect is

  # deletes the file/dir found in the path
  # returns unit as outcome in case of successful deletion and error in case of failure
  # if the targeted dir has content, then the return value will be error and the deletion will not take place
  #
  delete(
         # the (relative or absolute) dir name, using platform specific path separators
         path String) =>
    tmp := dop.delete path
    replace
    tmp


  # the default file/dir delete operation via fuzion.sys.fileio.delete
  #
  type.default_delete_handler : io.file.Delete_Handler is
    delete(path String) =>
      fuzion.sys.fileio.delete path


  # install default effect io.file.delete
  #
  type.install_default =>
    (io.file.delete default_delete_handler unit).default

# short-hand for accessing delete effect in current environment and performing the default delete operation using io.file.delete.delete path
# deletes the file/dir found in the path
# returns unit as outcome in case of successful deletion and error in case of failure
# if the targeted dir has content, then the return value will be error and the deletion will not take place
#
public delete(path String) =>
  delete.type.install_default
  delete.env.delete path

# reference to the delete operations that could take place
#
private:public Delete_Handler ref is
    delete(path String) outcome unit is abstract
