# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature effect
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# effect -- abstract parent feature for effects
#
# effect provides a means to perform effectful operations.  Instances
# of effect are installed in the current environment while their code is
# executed.  The code may access the effect via <type>.env.
#
public effect is


  # --------------------  effect intrinsics  --------------------


  # set default effect in the current context to this if none is
  # installed
  #
  type.default0(e effect.this) unit => intrinsic


  # execute code provided in f.call while this effect is installed
  # in the current environment. Return immediately in case abort is
  # called.

  # NYI: uses type parameter T only to simplify backends
  #
  type.instate0(T type : Function unit, e effect.this, f T) unit => intrinsic


  # replace existing effect of type `E` in the new effect value `e`
  #
  type.replace0(e effect.this) unit => intrinsic


  # Intrinsic version of abort.
  #
  type.abort0(e effect.this) void => intrinsic


  # has an effect of this type been instated?
  #
  type.is_instated0 bool => intrinsic


  # --------------------  default effects  --------------------


  # set default instance for effect type `effect.this` to `e`
  #
  # NYI: UNDER DEVELOPMENT: This is a manual work-around to automatically install
  # default effects. It should be replaced by a effect configuration file that
  # is defined locally to a fuzion project or globally to the fuzion installation
  # the defines the default effects to be used. The DFA should then automatically
  # determine the required effects and create code to  instate them at the beginning
  # of an application.
  #
  public type.default(e effect.this) => default0 e


  # convenience version of `type.default` for effect values whose type is
  # exactly the effect type (i.e., the value type does not inherit
  # from the effect type).
  #
  # set default instance for effect type `effect.this` to value `effect.this`.
  #
  # NYI: UNDER DEVELOPMENT: See type.default
  #
  public default unit
  =>
    effect.this.type.default effect.this


  # --------------------  effect instation  --------------------


  # execute 'code' in a context where the effect instance `e` has been
  # installed for effect type `effect.this`.
  #
  # In case `f` returns normally, this will return `f`'s result.
  #
  # In case `f` aborts this effect, return `def()`.
  #
  public type.instate(# result type
                      R type,

                      # the effect value to instate
                      e effect.this,

                      # the code to execute with `e` instated.
                      code () -> R,

                      # the lazy default result to use if effect aborts
                      def Lazy R
                      ) R
  =>
    cf := e.Effect_Call code
    instate0 e cf
    match cf.res
      nil => def()
      x R => x


  # execute 'code' in a context where the effect instance `e` has been
  # installed for effect type `effect.this`.
  #
  # In case `f` returns normally, this will return `f`'s result.
  #
  # In case `f` aborts this effect, this will panic.
  #
  public type.instate(# result type
                      R type,

                      # the effect value to instate
                      e effect.this,

                      # the code to execute with `e` instated.
                      code () -> R
                      ) R
  =>
    instate R e code (panic "unexpected abort in {effect.this.type}")


  # convenience version of `instate` for effect values whose type is
  # exactly the effect type (i.e., the value type does not inherit
  # from the effect type).
  #
  # Execute 'code' in a context where this effect instance has been
  # installed for effect type `effect.this`.
  #
  # In case `f` returns normally, this will return `f`'s result.
  #
  # In case `f` aborts this effect, this will panic.
  #
  public instate_self(# result type
                      R type,

                      # the code to execute with `e` instated.
                      code () -> R
                      ) R
  =>
    effect.this.instate R effect.this code


  # has an effect of this type been instated?
  #
  public type.is_instated bool => is_instated0


  # has an effect of the given type been installed?
  public type.get_if_installed option effect.this
  =>
    if effect.this.is_instated
      unsafe_get
    else
      nil


  # internal helper to perform `E.env` without producing an error
  # in case static analysis fails to verify that `effect.this` is
  # actually installed.
  #
  type.unsafe_get =>
    effect.this.env


  # helper instance for effect.instate to wrap call to f() into a ()->unit
  #
  # NOTE: Since all control flow to enter an environment goes through this it is
  # essential that static analysis works well.  `Effect_Call` must be an inner
  # feature of `effect` since otherwise instances will not be separated well and
  # values for `f` for different effects will be mixed up resulting in errors
  # during static analysis for effects.
  #
  # NYI: CLEANUP: #2728 Needed since abortable supports only unit result
  #
  Effect_Call(
    # result type of the call
    R type,

    # the function to be called
    f () -> R
    )
    ref : Function unit
  is
    res option R := nil
    redef call =>
      set res := f()


  # execute the code of 'f' in the context of this effect
  #
  # NYI: CLEANUP: REMOVE, use type.instate instead
  #
  public run(R type, f () -> R, def ()->R) R =>
    effect.this.instate R effect.this f def.call


  # --------------------  replacing effect instances  --------------------


  # replace existing effect for type `effect.this` by the new effect value `e`.
  #
  # For effects that model the outside world (e.g., i/o, time, sensors and actuators, etc.),
  # the effect might be a unit type, so the replace is effectively a no-operation.  However,
  # the call to `replace` is used ot model the change of the outside world and must be
  # included for analysis tools to appreciate this.
  #
  # replace may only be called during the execution of an operation of a currently installed
  # effect of the same effect type.
  #
  # NYI: BUG: It is currently not enforced that replace is only called during the execution
  # of an operation of a currenlty installed effect of the same effect type.
  #
  public type.replace(e effect.this)
  =>
    replace0 e


  # replace existing effect of type `effect.this` by the new effect value `effect.this`.
  #
  # This is a convenience feature for value type effects for which the type of
  # the effect instance equals the effect type.  `ref` type effects typically have
  # values that may be children of the effect type that are of a different type, so
  # `effect_type.replace new_value` must be used.
  #
  # replace may only be called during the execution of an operation of a currently installed
  # effect of the same effect type.
  #
  public replace
  =>
    effect.this.type.replace effect.this


  # --------------------  aborting code execution  --------------------


  # replace existing effect for type `effect.this` by the new effect value `e`
  # and abort code execution to return to the point where the effect was instated.
  #
  public type.abort(e effect.this) void
  pre
    safety: effect.this.is_instated
    safety: effect.this.env.abortable
  =>
    abort0 e


  # replace existing effect of type `effect.this` by the new effect value `effect.this`.
  # and abort code execution to return to the point where the effect was instated.
  #
  public abort void
  pre
    safety: effect.this.is_instated
    safety: abortable
  =>
    effect.this.abort0 effect.this


  # does this effect support abort?
  #
  # Redefining this to return `false` helps to detect unexptected calls to
  # `abort` at runtime and ensure that the static analysis finds that the
  # code executed with this effect will always return normally and produce
  # a result. This is used, e.g, in `mutate` to avoid static analysis
  # reporting `panic` as an effect of the use of a local mutate instance.
  #
  public abortable => true


  # abort the current execution and return from the surrounding call to
  # `instate`.
  #
  # NYI: CLEANUP: `return` is the same as `abort`. The term `return` seems
  # common for algebraic effects, but is confusing since it is different to
  # returning from a call. We need to decide to break with algebraic effect
  # jargon (and remove `return`) or to stick with it (and rename `abort` as
  # `return`).
  #
  public return void
  pre
    safety: abortable
  =>
    abort
