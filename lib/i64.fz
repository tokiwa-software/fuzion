# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature i64
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# i64 -- 64-bit signed integer values
#
i64(val i64) : wrappingInteger<i64>, hasInterval<i64>, i64s is

  redef thiz => i64.this.val
  redef orderedThis => i64.this.val

  # overflow checking

  # would negation -thiz cause an overflow?
  redef wrappedOnNeg => isMin

  # would addtion thiz + other cause an overflow or underflow?
  redef overflowOnAdd (other i64) => thiz > 0 && max -° thiz < other
  redef underflowOnAdd(other i64) => thiz < 0 && min -° thiz > other

  # would subtraction thiz - other cause an overflow or underflow?
  redef overflowOnSub (other i64) => thiz > 0 && thiz -° max > other
  redef underflowOnSub(other i64) => thiz < 0 && thiz -° min < other

  # would multiplication thiz * other cause an overflow or underflow?
  redef overflowOnMul (other i64) => if sign *° other.sign <= 0 false else (thiz *° other / other) != thiz
  redef underflowOnMul(other i64) => if sign *° other.sign >= 0 false else (thiz *° other / other) != thiz

  # neg, add, sub, mul with wrap-around semantics
  redef prefix -° i64 is intrinsic
  redef infix +° (other i64) i64 is intrinsic
  redef infix -° (other i64) i64 is intrinsic
  redef infix *° (other i64) i64 is intrinsic

  # division and remainder with check for div-by-zero
  redef infix / (other i64)
    pre
      safety: other != 0
   => div other
  redef infix % (other i64)
    pre
      safety: other != 0
   => mod other

  # private division and remainder with crash in case of div-by-zero
  private div (other i64) i64 is intrinsic
  private mod (other i64) i64 is intrinsic

  # bitwise and, or and xor operations
  redef infix &  (other i64) i64 is intrinsic
  redef infix |  (other i64) i64 is intrinsic
  redef infix ^  (other i64) i64 is intrinsic

  # shift operations (signed)
  redef infix >> (other i64) i64 is intrinsic
  redef infix << (other i64) i64 is intrinsic

  # comparison
  redef infix == (other i64) bool is intrinsic
  redef infix != (other i64) bool is intrinsic
  redef infix <  (other i64) bool is intrinsic
  redef infix <= (other i64) bool is intrinsic
  redef infix >  (other i64) bool is intrinsic
  redef infix >= (other i64) bool is intrinsic

  as_i8 i8
    pre
      thiz >= i8.min.as_i64,
      thiz <= i8.max.as_i64
    is
      low8bits.as_i8
  as_i16 i16
    pre
      thiz <= i16.max.as_i64,
      thiz <= i16.max.as_i64
    is
      low16bits.as_i16
  as_i32 i32
    pre
      thiz >= i32.min.as_i64,
      thiz <= i32.max.as_i64
    is
      low32bits.castTo_i32
  as_u8 u8
    pre
      thiz >= 0
#      thiz <= u8.max.as_i64
#    post
#      analysis: result.as_u64 == thiz
    is
      low8bits
  as_u16 u16
     pre
      thiz >= 0
#      thiz <= u16max.as_i64
#    post
#      analysis: result.as_u64 == thiz
    is
      low16bits
  as_u32 u32
    pre
      thiz >= 0
#      thiz <= u32.max.as_i64
#    post
#      analysis:  result.as_i64 == thiz
    is
      low32bits
  as_u64 u64
    pre
      thiz >= 0
#    post
#      analysis:  result.as_i64 == thiz
    is
      castTo_u64
  as_u128 u128
    pre
      thiz >= 0
    post
      analysis:  result.as_i64 == thiz
    is
      u128 0 castTo_u64

  # casting bit representation to unsigned
  low8bits   u8  is castTo_u64.low8bits
  low16bits  u16 is castTo_u64.low16bits
  low32bits  u32 is castTo_u64.low32bits
  castTo_u64 u64 is intrinsic

  # conversion to float
  as_f64 f64 is intrinsic
  as_f32 => as_f64.as_f32

  # NYI: max is redefined here only to solve repeated inheritance conflict. Since max inherited
  # from hasInterval is abstract, fz should not complain about this conflict.
  redef max => i64 0x_7fff_ffff_ffff_ffff


  # create hash code from this number
  hash u64 is
    castTo_u64.hash


  # find the highest 1 bit in this integer and return integer with
  # this single bit set or 0 if this is 0.
  #
  highestOneBit i64 is
    val.castTo_u64.highestOneBit.castTo_i64


  # count the number of trailing zeros in this integer.
  #
  trailingZeros i32 is
    val.castTo_u64.trailingZeros


  # count the number of 1 bits in the binary representation of this
  # integer.
  #
  onesCount i32 is
    val.castTo_u64.onesCount


# i64s -- unit type defining features related to i64 but not requiring an
# instance
#
i64s : wrappingIntegers<i64> is

  redef name => "i64"

  redef zero => i64 0
  redef one  => i64 1

  redef min => -0x_8000_0000_0000_0000
  redef max =>  0x_7fff_ffff_ffff_ffff


# i64 -- returns value of unit type i64s
#
# This is a convenience feature that allows using, e.g., 'i64.sum' to
# get the the monoid of (i64, infix +) instead of 'i64s.sum'.
#
# since this i64 with no arguments is a routine and not a constructor, it
# does not define a type (which would cause a name clash with i64 with one
# argument).
#
i64 => i64s
