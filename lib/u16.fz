# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature u16
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# u16 -- 16-bit unsigned integer values
#
u16(val u16) : wrappingInteger u16, hasInterval u16, u16s is

  redef thiz => u16.this.val
  redef orderedThis => u16.this.val

  # overflow checking

  # would negation -thiz cause an overflow?
  redef wrappedOnNeg => !isZero

  # would addition thiz + other cause an overflow or underflow?
  redef overflowOnAdd (other u16) => max -° thiz < other
  redef underflowOnAdd(other u16) => false

  # would subtraction thiz - other cause an overflow or underflow?
  redef overflowOnSub (other u16) => false
  redef underflowOnSub(other u16) => thiz < other

  # would multiplication thiz * other cause an overflow or underflow?
  redef overflowOnMul (other u16) => as_i32 *° other.as_i32 > max.as_i32
  redef underflowOnMul(other u16) => false

  # neg, add, sub, mul with wrap-around semantics
  redef prefix -° u16 is intrinsic
  redef infix +° (other u16) u16 is intrinsic
  redef infix -° (other u16) u16 is intrinsic
  redef infix *° (other u16) u16 is intrinsic

  # division and remainder with check for div-by-zero
  redef infix / (other u16)
    pre
      safety: other != zero
   => div(other)
  redef infix % (other u16)
    pre
      safety: other != zero
   => mod(other)

  # private division and remainder with crash in case of div-by-zero
  private div (other u16) u16 is intrinsic
  private mod (other u16) u16 is intrinsic

  # bitwise and, or and xor operations
  redef infix &  (other u16) u16 is intrinsic
  redef infix |  (other u16) u16 is intrinsic
  redef infix ^  (other u16) u16 is intrinsic

  # shift operations (unsigned)
  redef infix >> (other u16) u16 is intrinsic
  redef infix << (other u16) u16 is intrinsic

  # comparison
  redef infix == (other u16) bool is intrinsic
  redef infix != (other u16) bool is intrinsic
  redef infix <  (other u16) bool is intrinsic
  redef infix <= (other u16) bool is intrinsic
  redef infix >  (other u16) bool is intrinsic
  redef infix >= (other u16) bool is intrinsic

  u16.type.equality(a, b u16) bool is intrinsic

  as_i8 i8
    pre
      debug: thiz <= i8.max.as_u16
    is
      castTo_i16.as_i8
  as_i16 i16
    pre
      debug: thiz <= i16.max.as_u16
    is
      castTo_i16
  as_i32 i32 is intrinsic
  as_i64  => thiz.as_i32.as_i64
# as_i128 => thiz.as_i32.as_i128
  as_u8 u8
    pre
      thiz <= u8.max.as_u16
    is
      low8bits
  as_u32  => thiz.as_i32.as_u32
  as_u64  => thiz.as_i32.as_u64
  as_u128 => thiz.as_i32.as_u128
  as_int  => int as_i64

  low8bits u8 is intrinsic
  castTo_i16 i16 is intrinsic

  # NYI: max is redefined here only to solve repeated inheritance conflict. Since max inherited
  # from hasInterval is abstract, fz should not complain about this conflict.
  redef max => u16 0xffff


  # create hash code from this number
  hash u64 is
    as_u64.hash


  # find the highest 1 bit in this integer and return integer with
  # this single bit set or 0 if this is 0.
  #
  highestOneBit u16 is
    // NYI: should be possible to reuse v, s names
    (v0, s0) := (val, u16 0    )
    (v1, s1) := if (v0 < 0x100) (v0, s0) else (v0 >>  8, s0 +  8)
    (v2, s2) := if (v1 <  0x10) (v1, s1) else (v1 >>  4, s1 +  4)
    (v3, s3) := if (v2 <     4) (v2, s2) else (v2 >>  2, s2 +  2)
    (v4, s4) := if (v3 <     2) (v3, s3) else (v3 >>  1, s3 +  1)
    v4 << s4


  # count the number of trailing zeros in this integer.
  #
  trailingZeros i32 is
    // NYI: should be possible to reuse v, s names
    (v0, s0) := (val, 0)
    (v1, s1) := if (v0 & 0xff) /= 0 then (v0, s0) else (v0 >> 8, s0 + 8)
    (v2, s2) := if (v1 &  0xf) /= 0 then (v1, s1) else (v1 >> 4, s1 + 4)
    (v3, s3) := if (v2 &    3) /= 0 then (v2, s2) else (v2 >> 2, s2 + 2)
    (v4, s4) := if (v3 &    1) /= 0 then (v3, s3) else (v3 >> 1, s3 + 1)
    s5       := if (v4 &    1) /= 0 then      s4  else               16
    s5


  # count the number of 1 bits in the binary representation of this
  # integer.
  #
  onesCount i32 is
    v := val.as_i32
    m := v & 0xaaaa; v := v - m + (m >> 1)
    m := v & 0xcccc; v := v - m + (m >> 2)
    m := v & 0xf0f0; v := v - m + (m >> 4)
    (v + (v >> 8)) & 0x1f


# u16s -- unit type defining features related to u16 but not requiring an
# instance
#
u16s : wrappingIntegers u16 is

  redef name => "u16"

  redef zero => u16 0
  redef one  => u16 1

  redef min => u16 0
  redef max => u16 0xffff

  # returns the number in whose bit representation all bits are ones
  redef all_bits_set => u16 0xffff


# u16 -- returns value of unit type u16s
#
# This is a convenience feature that allows using, e.g., 'u16.sum' to
# get the the monoid of (u16, infix +) instead of 'u16s.sum'.
#
# since this u16 with no arguments is a routine and not a constructor, it
# does not define a type (which would cause a name clash with u16 with one
# argument).
#
u16 => u16s
