# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature list
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# list -- feature used to define lists
#
# list provides an abstract type for a sequence of elements of the same type.
#
# A list sequence may be empty and contain no element, or it may have a fixed
# or even an infinite number of elements.
#
# The core of the implementation of an actual list lies in the implementation
# of the actual Cons cell a non-empty list consists of.
#
# Lists can typically be traversed using only immutable data. This makes them
# more flexible than streams that require to store and update their state.
#
# A list is immutable, so it can be reused and shared between threads.
# Compared to a stream, a list may require more (heap) allocation.
#
#
#
list(A type) : choice nil (Cons A (list A)), Sequence A is
# NYI: #530 (review comment): The following should work but causes an error:
# list(A type) : nil | Cons A (list A), Sequence A is


  # Return this list as a list.
  #
  # This is a helper function that needs to be defined because list is an heir
  # of Sequence.
  #
  redef as_list => list.this


  # is this list empty?
  #
  redef is_empty => (list.this ? nil  => true
                               | Cons => false)


  # count the elements of this list
  #
  redef count => count 0


  # count the elements of this list starting at n.
  # carries n around to make this tail-recursive
  #
  private count (n i32) i32 is
    list.this ? nil    => n
              | c Cons => c.tail.count n+1


  # get the head of this list if it exists, nil if it does
  # not exist
  #
  head option A
  is
    list.this ? nil    => nil
              | c Cons => c.head


  # get the tail of this list if it exists, nil if it does
  # not exist or it is the empty list
  #
  tail list A
  is
    list.this ? nil    => nil
              | c Cons => c.tail


  # call f in order on all elements of this list
  #
  redef for_each (f A -> unit) unit is
    list.this ? nil    =>
              | c Cons => f c.head; c.tail.for_each f


  # get the tail of this list
  #
  # list must not be empty, causes precondition failure if debug is enabled.
  #
  force_tail
    pre
      debug: !is_empty
    => (list.this ? nil    => fuzion.std.panic "list.force_tail called on empty list"
                  | c Cons => c.tail)


  # get the head of this list
  #
  # list must not be empty, causes precondition failure if debug is enabled.
  #
  redef first
    pre
      debug: !is_empty
    => head.get


  # returns the list of all but the last element of this list
  #
  # list must not be empty, causes precondition failure if debug is enabled.
  #
  init list A
    pre
      debug: !is_empty
  is
    init nil


  # returns the list of all but the last element of this list
  #
  # list must not be empty, causes precondition failure if debug is enabled.
  #
  # helper feature for init to allow for tail recursion
  #
  private init(res list A) list A
    pre
      debug: !is_empty
  is
    list.this ? nil => fuzion.std.panic "list.init called on empty list"
              | c Cons =>
                c.tail ? nil => res
                       | _ Cons => c.tail.init (res ++ [c.head])


  # get the last element of this list
  #
  # list must not be empty, causes precondition failure if debug is enabled.
  #
  # This may take time in O(count), in particular, it may not terminate
  # for an infinite list.
  #
  redef last A
    pre
      debug: !is_empty
  is
    force_tail ? nil    => first
               | c Cons => force_tail.last


  # map the list to a new list applying function f to all elements
  #
  # This performs a lazy mapping, f is called only when the elements
  # are taken from the list.
  #
  map(B type, f A -> B) list B is
    match list.this
      _ nil  => nil
      c Cons =>
        ref : Cons B (list B)
        // Cons B (list B) with    # NYI: better syntax for anonymous feature
          head => f c.head
          tail => c.tail.map f


  # map the list to a new list applying function f to all elements
  # and flatten the result of f in the process
  #
  # This performs a lazy mapping, f is called only when the elements
  # are taken from the list.
  #
  flatMap(B type, f A -> Sequence B) list B is
    match list.this
      _ nil  => nil
      c Cons =>
        match (f c.head).as_list
          _ nil => c.tail.flatMap B f
          c2 Cons =>
            ref : Cons B (list B)
            // Cons B (list B) with    # NYI: better syntax for anonymous feature
              head => c2.head
              tail => c2.tail ++ c.tail.flatMap B f


  # fold the elements of this list using the given monoid.
  #
  # e.g., to sum the elements of a list of i32, use l.fold i32.sum
  #
  redef fold (m Monoid A) => fold m.e m


  # fold the elements of this list using the given monoid and initial value
  #
  # Used to fold a list tail-recursively
  #
  fold (s A, m Monoid A) A is (list.this ? nil    => s
                                         | c Cons => c.tail.fold (m.op s c.head) m)


  # Lazily take the first n elements of a list, alternatively the whole list if it
  # is shorter than n, or the empty list if n <= 0
  #
  redef take (n i32) list A
  is
    if n ≤ 0
      nil
    else
      match list.this
        _ nil  => nil
        c Cons =>
          ref : Cons A (list A)   # NYI: indentation syntax for anonymous not supported
            redef head => c.head
            redef tail => if n ≟ 1 then nil else c.tail.take n-1


  # reverse the order of the elements in this list
  #
  reverse list A is
    reverse nil


  # recursively reverse the order of the elements in this list
  # and append the already reversed reversedHead
  #
  reverse (reversed_head list A) list A is
    list.this ? nil    => reversed_head
              | c Cons => c.tail.reverse (cons c.head reversed_head)


  # create a string representation of this list including all the string
  # representations of its contents, separated by ',' and enclosed in '['
  # and ']'.
  #
  redef as_string =>
    "[{list.this.as_string ","}]"


  # create a string representation of this list including all the string
  # representations of its contents, separated by 'sep'.
  #
  redef as_string (sep String) =>
    "{(map String x->x.as_string).fold (String.type.concat sep)}"


  # add an element sep in front of every element of this list.
  #
  prepend_to_all(sep A) list A is
    prepend_to_all sep nil


  # add an element sep in front of every element of this list, helper to
  # allow tail recursion.
  #
  # if this list is the empty list, return the given result list res, recursively
  # call this feature on the tail of this list otherwise, feeding it with the
  # same separator sep but appending sep and the current element to res.
  #
  private prepend_to_all(sep A, res list A) list A is
    match head
      nil => res
      x A => tail.prepend_to_all sep (res ++ [sep, x])


  # add an element sep between every element of this list.
  #
  intersperse(sep A) list A is
    match head
      nil => nil
      x A => [x] ++ tail.prepend_to_all sep


  # List concatenation, O(count)
  #
  concat_eagerly (t list A) list A is
    list.this ? nil    => t
              | c Cons => cons A (list A) c.head (c.tail.concat t)


  # Lazy list concatenation, O(1)
  #
  concat (t list A) list A is
    match list.this
      _ nil => t
      c Cons =>
        match t
          nil => list.this
          c2 Cons =>
            ref : Cons A (list A)
              head => c.head
              tail => c.tail.concat t


  # Lazy list concatenation, O(1)
  # t is evaluated only when this list is exhausted
  # NYI: #1166 syntax sugar for lazy evaluation
  #
  # This is useful when doing buffered reading from an input
  # source and the next buffer chunk, the tail should only
  # be created when actually necessary.
  #
  concat_lazy (t () -> list A) list A is
    match list.this
      _ nil => t()
      c Cons =>
        ref : Cons A (list A)
          head => c.head
          tail => c.tail.concat_lazy t


  # infix operand synonym for concat
  #
  redef infix ++ (t Sequence A) => concat t.as_list


  # create a list from the tail of list.this dropping n elements (or fewer
  # if the list is shorter than n).
  #
  redef drop (n i32) list A is
    if n ≤ 0
      list.this
    else
      list.this ? nil    => nil
                | c Cons => c.tail.drop n-1


  # create a slice from this list that consists of the elements starting at index
  # 'from' (including) up to index 'to' (excluding).
  #
  redef slice(from, to i32) => (drop from).take to-from


  # Lazily take the first elements of a list for which predicate 'p' holds.
  #
  redef take_while (p A -> bool) list A
  is
    match list.this
      _ nil  => nil
      c Cons =>
        if p c.head
          ref : Cons A (list A)   # NYI: indentation syntax for anonymous not supported
            redef head => c.head
            redef tail => c.tail.take_while p
        else
          nil


  # Lazily drop the first elements of a list for which predicate 'p' holds.
  #
  redef drop_while (p A -> bool) list A
  is
    match list.this
      _ nil  => nil
      c Cons =>
        if p c.head
          c.tail.drop_while p
        else
          c


  # Lazily filter the elements of a list.
  #
  # The result contains exactly those elements for which p
  # is true.
  #
  redef filter (p A -> bool) Sequence A is
    filter0 p


  private filter0 (p A -> bool) list A is
    match drop_while (a -> !(p a))
      _ nil  => nil
      c Cons => ref : Cons A (list A)   # NYI: indentation syntax for anonymous not supported
                  redef head => c.head
                  redef tail => c.tail.filter0 p


  # create a list that repeats the current list indefinitely.  In case 'list.this'
  # is 'nil', returns 'nil'
  #
  redef cycle list A is
    match list.this
      nil    => nil
      c Cons =>
        cycleCons (h Cons A (list A)) : Cons A (list A) is
          head => h.head
          tail list A is
            cycleCons (h.tail ? nil    => c
                              | d Cons => d)
        cycleCons c


  # create a lazy list of all the tails of this list, including the complete list
  # 'list.this' and the empty list 'nil'.
  #
  redef tails list (list A) is
    ref : Cons (list A) (list (list A))
      head => list.this
      tail => (list.this ? nil    => nil
                         | c Cons => c.tail.tails)

  # create stream from this list
  #
  # In contrast to list's immutable Cons cells, a stream instance is mutable, i.e,
  # it cannot be shared with threads or used in pure functions
  #
  redef as_stream ref : stream A is
    cur := list.this
    redef has_next => (cur ? Cons => true
                           | nil  => false)
    redef next =>
      res := cur.head.get
      set cur := cur.force_tail
      res


  # create a new list from the result of applying 'f' to the
  # elements of this list and 'b' in order.
  #
  zip0(U, V type, b list U, f (A,U)->V) list V is
    list.this ? c1 Cons => (b ? c2 Cons =>
                                  zipCons : Cons V (list V) is
                                    head => f c1.head c2.head
                                    tail => c1.tail.zip0 U V c2.tail f
                                  zipCons
                              | nil    => nil)
              | nil    => nil


# lists -- unit type defining features related to list but not requiring an
# instance
#
#
lists is


  # create an empty list
  #
  empty(A type) list A is
    nil


  # fmap lifts a function from A to B to a function from list A to list B
  #
  fmap(A, B type, f A -> B) list A -> list B is
    l -> l.map B f


  # monoid of lists with infix concatentation operation.
  #
  concat_monoid(A type) : Monoid (list A) is

    # associative operation
    #
    infix ∙ (a, b list A) list A is a.concat b

    # equality
    #
    redef infix == (a, b list A) =>
      fuzion.std.panic "NYI: lists.concat_monoid.infix ==, requires A : has_equality"

    # identity element
    #
    e list A is
      nil


# convenience routine to create a list from head h and lazy tail t.
# NYI: #1166, syntax sugar for lazy evaluation
#
list(T type, h T, t () -> list T) list T is
  ref : Cons T (list T)
    head => h
    tail => t()


# convenience routine to create a list from head h and tail t.
# NYI: #1166, syntax sugar for lazy evaluation
#
list_of_non_lazy(T type, h T, t list T) list T is
  ref : Cons T (list T)
    head => h
    tail => t


# infix operator to create a list from head h and lazy tail t.
#
# This is convenient to append an element before a list as in
#
#   0 : ()->[1,2,3,4].as_list
#
# or to create lists by recursion, e.g., a an endless list containing
# integer 1 repeatedly is
#
#   ones => 1 : ()->ones
#
infix : (A type, h A, t ()->list A) => list h t
