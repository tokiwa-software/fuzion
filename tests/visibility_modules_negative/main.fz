# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test
#
# -----------------------------------------------------------------------

public m =>

  # checkLegalTypeVisibility

  private:module not_a_constructor  => false // should flag an error feature does not define type
  private:public not_a_constructor2 => false // should flag an error feature does not define type
  module:public  not_a_constructor3 => false // should flag an error feature does not define type


  # checkResultTypeVisibility

  private priv is
  module mod priv =>  // should flag an error result type visibility more restrictive than a
    priv
  module mod8 := priv_ce  // should flag an error priv_ce visibility more restrictive than mod8


  # checkArgTypesVisibility

  module mod2 (arg priv) is // should flag an error arg type visibility more restrictive than a


  # generic visibility more restrictive

  private priv_ce is
  module mod3 : choice priv_ce unit is // should flag an error priv_ce visibility more restrictive than mod3
  module mod4(T type : priv_ce) is // should flag an error priv_ce visibility more restrictive than mod4
  module mod5(arg array priv_ce) is // should flag an error priv_ce visibility more restrictive than mod5
  module mod9 := (list priv_ce).empty // should flag an error priv_ce visibility more restrictive than mod9

  priv3 : Sequence a.mod is // should flag an error a.mod is not visible in this file


  # checkPreconditionVisibility

  private my_false => false

  module feat3
  pre my_false  // should flag an error my_false visibility more restrictive than feat4
  is


  # features from different modules
  _ := b.mod_pub // should flag an error should not be callable
  feat1(arg1 b.mod_pub) is // even though type is usable
  b.get_mod_pub.child // and we can call feature on the type



  # Redefinition must not have more restrictive visibility.
  redef_test is
    public b unit =>
      unit
    public e unit => abstract

  redef_test_0 : redef_test is
    module redef b unit => // should flag an error Redefinition must not have more restrictive visibility.
      unit
    module redef e unit => // should flag an error Redefinition must not have more restrictive visibility.
      unit


  # checkAbstractVisibility

  public outer is
    inner_abstract i32 => abstract // should flag an error Abstract features visibility must not be more restrictive than outer features visibility.



  # checkLegalVisibility

  match (list i32).empty
    Cons =>
      module my_feat is // should flag an error visibility modifier used in inner block
    nil  =>
