public m =>

  # checkLegalTypeVisibility

  private:module not_a_constructor  => false // should flag an error feature does not define type
  private:public not_a_constructor2 => false // should flag an error feature does not define type
  module:public  not_a_constructor3 => false // should flag an error feature does not define type


  # checkResultTypeVisibility

  private priv is
  module mod priv is  // should flag an error result type visibility more restrictive than a
    priv
  module mod8 := priv_ce  // should flag an error priv_ce visibility more restrictive than mod8


  # checkArgTypesVisibility

  module mod2 (arg priv) is // should flag an error arg type visibility more restrictive than a


  # generic visibility more restrictive

  private priv_ce is
  module mod3 : choice priv_ce unit is // should flag an error priv_ce visibility more restrictive than mod3
  module mod4(T type : priv_ce) is // should flag an error priv_ce visibility more restrictive than mod4
  module mod5(arg array priv_ce) is // should flag an error priv_ce visibility more restrictive than mod5
  module mod9 := (list priv_ce).type.empty // should flag an error priv_ce visibility more restrictive than mod9

  priv3 : Sequence a.mod is // should flag an error a.mod is not visible in this file


  # checkPreconditionVisibility

  private my_false => false

  module feat3
  pre my_false  // should flag an error my_false visibility more restrictive than feat4
  is


  # features from different modules
  b.mod_pub // should flag an error should not be callable
  feat1(arg1 b.mod_pub) is // even though type is usable
  b.get_mod_pub.child // and we can call feature on the type

  unit
