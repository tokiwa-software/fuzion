# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test floating_point_numbers
#
#  Author: Michael Lill (michael.lill@tokiwa.software)
#
# -----------------------------------------------------------------------

# tests basic floating point operations for f32/f64
floating_point_numbers is

  exit_code := mut 0

  chck(b bool, msg String) =>
    s := if b
      "PASSED: "
    else
      exit_code <- 1
      "FAILED: "
    say (s + msg)


  # shared tests for f32/f64
  generic_tests(T type: float) is
    zero := T.zero
    one := T.one
    two := one + one
    three := one + one + one

    # serialize floating point numbers
    chck ("{T.quiet_NaN}" =  "NaN")                                        "{T.name}: quiet nan serializes correctly"
    chck ("{T.negative_infinity}"
      .replace("I", "i")
      .substring(0, 4) =  "-inf")                                          "{T.name}: neg inf serializes correctly"
    chck ("{T.positive_infinity}"
      .replace("I", "i")
      .substring(0, 3) =  "inf")                                           "{T.name}: pos inf serializes correctly"
    chck ("{zero}".starts_with "0")                                        "{T.name}: 0 serializes to string"
    chck ("{-zero}".starts_with "-0")                                      "{T.name}: -0 serializes to string"
    chck ("{one}".starts_with "1")                                         "{T.name}: 1 serializes to string"
    chck ("{one / two}" = "0.5")                                           "{T.name}: 0.5 serializes to string"
    chck ("{one / three}".starts_with "0.3333333")                         "{T.name}: 1/3 serializes to string"

    # comparision operators
    chck (
      (zero = zero) &&
      (zero != one) &&
      (one  ≥ zero) &&
      (zero ≤ one) &&
      (zero = zero) &&
      (one  >  zero) &&
      (zero <  one))                                                       "{T.name}: comparison operators work as expected"

    # negation operator
    chck ((-(-zero) = zero) &&
          (-(-one) = one) &&
          (-(-T.positive_infinity) = T.positive_infinity) &&
          (-(-T.negative_infinity) = T.negative_infinity))                 "{T.name}: double negation is same number"

    # operator +,-,*,/ test
    chck (zero + one = one)                                                "{T.name}: plus operator"
    chck (zero - one = -one)                                               "{T.name}: minus operator"
    chck (zero * one = zero)                                               "{T.name}: product operator"
    chck (zero / one = zero)                                               "{T.name}: division operator"

    # modulo
    chck (three % two = one)                                               "{T.name}: 3 modulo 2 equals 1"

    # power
    chck (two ** three = three + three + two)                              "{T.name}: 2 to the power 3 equals 8"
    chck (three ** two = three + three + three)                            "{T.name}: 3 to the power 2 equals 9"

    # is_NaN
    chck (T.is_NaN T.NaN)                                                  "{T.name}: is_NaN NaN"
    chck (!T.is_NaN zero  )                                                "{T.name}: is_NaN 0"
    chck (!T.is_NaN T.π)                                                   "{T.name}: is_NaN π"
    chck (!T.is_NaN T.infinity)                                            "{T.name}: is_NaN infinity"

    # sqrt
    chck (T.sqrt (two * two) = two)                                        "{T.name}: sqrt (2*2) = 2"

    # exponentation / logarithm
    chck (T.exp zero     = one  )                                          "{T.name}: exp 0 = 1"
    chck (T.exp one      = T.ℇ)                                            "{T.name}: exp 1 = ℇ"
    chck (T.log one      = zero  )                                         "{T.name}: log 1 = 0"

    # trigonometric
    chck (T.sin zero     = zero  )                                         "{T.name}: sin 0  = 0"
    chck (T.sin T.π      < T.epsilon)                                      "{T.name}: sin π  ~= 0"
    chck (T.cos zero     = one  )                                          "{T.name}: cos 0  = 1"
    chck (T.cos T.π      = -one  )                                         "{T.name}: cos π  = -1"
    chck (T.tan zero     = zero  )                                         "{T.name}: tan 0  = 0"
    chck (T.asin zero    = zero  )                                         "{T.name}: asin 0 = 0"
    chck (T.acos one     = zero  )                                         "{T.name}: acos 1 = 0"
    chck (T.atan zero    = zero  )                                         "{T.name}: atan 0 = 0"

    # atan2
    chck (T.is_NaN (T.atan2 T.NaN one  ))                                                      "{T.name}: atan2 NaN 1            = NaN        "
    chck (T.is_NaN (T.atan2 one   T.NaN))                                                      "{T.name}: atan2 1 NaN            = NaN        "
    chck (T.atan2 +zero   one               = +zero  )                                         "{T.name}: atan2 +0 1             = +0         "
    chck (T.atan2 -zero   one               = -zero  )                                         "{T.name}: atan2 -0 1             = -0         "
    chck (T.atan2 +zero   -one              = +T.π)                                            "{T.name}: atan2 +0 -1            = +π         "
    chck (T.atan2 -zero   -one              = -T.π)                                            "{T.name}: atan2 -0 -1            = -π         "
    chck (T.atan2 one   zero                = +T.π/two)                                        "{T.name}: atan2 1 0              = +π/two     "
    chck (T.atan2 -one   zero               = -T.π/two)                                        "{T.name}: atan2 -1 0             = -π/two     "
    chck (T.atan2 +T.infinity +T.infinity   = +T.π/T.from_u32(4))                              "{T.name}: atan2 +infinity +infinity   = +π/4  "
    chck (T.atan2 -T.infinity +T.infinity   = -T.π/T.from_u32(4))                              "{T.name}: atan2 -infinity +infinity   = -π/4  "
    chck (T.atan2 +T.infinity -T.infinity   = T.from_u32(3)*T.π/T.from_u32(4))                 "{T.name}: atan2 +infinity -infinity   = 3*π/4 "
    chck (T.atan2 -T.infinity -T.infinity   = -T.from_u32(3)*T.π/T.from_u32(4))                "{T.name}: atan2 -infinity -infinity   = -3*π/4"
    chck (T.atan2 one   +T.infinity         = zero  )                                          "{T.name}: atan2 1 +infinity         = 0       "
    chck (T.atan2 one   -T.infinity         = +T.π)                                            "{T.name}: atan2 1 -infinity         = +π      "
    chck (T.atan2 -one   -T.infinity        = -T.π)                                            "{T.name}: atan2 -1 -infinity        = -π      "
    chck (T.atan2 +T.infinity one           = +T.π/two)                                        "{T.name}: atan2 +infinity 1         = +π/two  "
    chck (T.atan2 -T.infinity one           = -T.π/two)                                        "{T.name}: atan2 -infinity 1         = -π/two  "

    # hyperbolicus
    chck (T.sinh zero       = zero)                                             "{T.name}: sinh  0 = 0"
    chck (T.cosh zero       = one )                                             "{T.name}: cosh  0 = 1"
    chck (T.tanh zero       = zero)                                             "{T.name}: tanh  0 = 0"
    chck (T.asinh zero      = zero)                                             "{T.name}: asinh 0 = 0"
    chck (T.acosh one       = zero)                                             "{T.name}: acosh 1 = 0"
    chck (T.atanh zero      = zero)                                             "{T.name}: atanh 0 = 0"

    # round
    a_half := one   / two
    chck (a_half.round             =  one  )                                      "{T.name}: round  1/2 =  1"
    chck (-a_half.round            = -one  )                                      "{T.name}: round -1/2 = -1"
    chck (-(one   + a_half).round  = -two)                                        "{T.name}: round -3/2 = -2"

    # floor
    chck (zero  .floor = zero  )                                               "{T.name}: floor 0 = 0"
    chck (one  .floor  = one  )                                                "{T.name}: floor 1 = 1"
    chck (T.ℇ.floor    = two)                                                  "{T.name}: floor ℇ = 2"

    # ceil
    chck (zero  .ceil = zero  )                                                "{T.name}: ceil 0 = 0"
    chck (one  .ceil  = one  )                                                 "{T.name}: ceil 1 = 1"
    chck (T.ℇ.ceil    = two + one  )                                           "{T.name}: ceil ℇ = 3"



  # run generic test for f32
  generic_tests f32


  # run generic test for f64
  generic_tests f64


  # cast_to_f32, 0, -∞, ∞
  chck ((u32 0x_8000_0000).cast_to_f32 = (-f32.type.zero))             "cast_to_f32 works, bit representation for 0 is correct"
  chck ((u32 0x_FF80_0000).cast_to_f32 = (f32.type.negative_infinity)) "cast_to_f32 works, bit representation for -∞ is correct"
  chck ((u32 0x_7F80_0000).cast_to_f32 = (f32.type.positive_infinity)) "cast_to_f32 works, bit representation for ∞ is correct"

  # cast_to_u32
  chck ((-f32.type.zero).cast_to_u32 = u32 0x_8000_0000)                       "cast_to_u32 works for -0"
  chck ((f32.type.negative_infinity).cast_to_u32 = u32 0x_FF80_0000)       "cast_to_u32 works for -∞"
  chck ((f32.type.positive_infinity).cast_to_u32 = u32 0x_7F80_0000)       "cast_to_u32 works for ∞"

  # cast_to_f64, 0, -∞, ∞
  chck ((u64 0x_8000_0000_0000_0000).cast_to_f64 = (-f64.type.zero))             "cast_to_f64 works, bit representation for 0 is correct"
  chck ((u64 0x_FFF0_0000_0000_0000).cast_to_f64 = (f64.type.negative_infinity)) "cast_to_f64 works, bit representation for -∞ is correct"
  chck ((u64 0x_7FF0_0000_0000_0000).cast_to_f64 = (f64.type.positive_infinity)) "cast_to_f64 works, bit representation for ∞ is correct"

  # cast_to_u64
  chck ((-f64.type.zero).cast_to_u64 = u64 0x_8000_0000_0000_0000)                   "cast_to_u64 works for -0"
  chck ((f64.type.negative_infinity).cast_to_u64 = u64 0x_FFF0_0000_0000_0000)       "cast_to_u64 works for -∞"
  chck ((f64.type.positive_infinity).cast_to_u64 = u64 0x_7FF0_0000_0000_0000)       "cast_to_u64 works for ∞"

  # min_exp, max_exp
  chck (f32.type.min_exp = -126)                                         "f32: min_exp is correct"
  chck (f32.type.max_exp = 127)                                          "f32: max_exp is correct"
  chck (f64.type.min_exp = -1022)                                        "f64: min_exp is correct"
  chck (f64.type.max_exp = 1023)                                         "f64: max_exp is correct"

  # min_positive, max
  chck (f32.type.min_positive = f32 0x1P-126)                                "f32: min_positive is correct"
  chck (f32.type.max = (f32 0x1P127 * (f32 2.0 - f32 0x1P-23)))              "f32: max is correct"
  chck (f64.type.min_positive = f64 0x1P-1022)                               "f64: min_positive is correct"
  chck (f64.type.max = (f64 0x1P1023 * (f64 2.0 - f64 0x1P-52)))             "f64: max is correct"


  # fits_in_i64
  chck !f64.type.positive_infinity.fits_in_i64                                 "f64: ∞    not representable by i64"
  chck !f64.type.negative_infinity.fits_in_i64                                 "f64: -∞   not representable by i64"
  chck !f64.type.NaN.fits_in_i64                                               "f64: NaN  not representable by i64"
  chck f64.type.zero.fits_in_i64                                               "f64: 0    is  representable by i64"

  # as_i64
  chck (f64.type.π.as_i64 = i64 3)                                            "f64:  π  as_i64        =  3"
  chck ((-f64.type.π).as_i64 = i64 -3)                                        "f64: -π  as_i64        = -3"
  chck (f64.type.positive_infinity.as_i64_lax = i64.type.max)                 "f64:  ∞  as_i64_lax    = i64.type.max"
  chck (f64.type.negative_infinity.as_i64_lax = i64.type.min)                 "f64: -∞  as_i64_lax    = i64.type.min"
  chck (f64.type.NaN.as_i64_lax = i64 0)                                      "f64: NaN as_i64_lax    = 0"

  # as_f64
  chck ((f32.type.π.as_f64.as_f32 = f32.type.π))                              "f32:  π  as_f64.as_f32 = f32.type.π"
  chck (f32.type.positive_infinity.as_f64 = f64.type.positive_infinity)       "f32:  ∞  as_f64        = f64s.∞ "
  chck (f64.type.is_NaN f32.type.NaN.as_f64)                                  "f32: NaN as_f64 is_NaN "

  # as_f32
  chck (f64.type.π.as_f32 = f32.type.π)                                       "f64:  π  as_f32        = f32.type.π "
  chck (f64.type.positive_infinity.as_f32 = f32.type.positive_infinity)       "f64:  ∞  as_f32        = f32s.∞ "
  chck (f32.type.is_NaN f64.type.NaN.as_f32)                                  "f64: NaN as_f32 is_NaN "


  # f32.fract
  chck ((f32 1.5)   .fract  =   0.5)                                          "f32.fraction of  1.5 equals expected"
  chck ((f32 -0.5)  .fract  =  -0.5)                                          "f32.fraction of -0.5 equals expected"
  chck ((f32 0.0)   .fract  =   0.0)                                          "f32.fraction of  0.0 equals expected"
  chck ((-(f32 0.0)).fract  =  -0.0)                                          "f32.fraction of -0.0 equals expected"
  chck ((f32 1.0)   .fract  =   0.0)                                          "f32.fraction of  1.0 equals expected"

  # f64.fract
  chck ((f64 1.5)   .fract  =   0.5)                                          "f64.fraction of  1.5 equals expected"
  chck ((f64 -0.5)  .fract  =  -0.5)                                          "f64.fraction of -0.5 equals expected"
  chck ((f64 0.0)   .fract  =   0.0)                                          "f64.fraction of  0.0 equals expected"
  chck ((-(f64 0.0)).fract  =  -0.0)                                          "f64.fraction of -0.0 equals expected"
  chck ((f64 1.0)   .fract  =   0.0)                                          "f64.fraction of  1.0 equals expected"


  exit exit_code.get
