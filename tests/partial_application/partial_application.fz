# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test partial_application
#
# -----------------------------------------------------------------------

# this test contains different cases of partial function application
#
partial_application is

  test(msg String, got Any, exp String) =>
    if $got = exp
      say "PASSED: $msg: got '$got'"
    else
      say "FAILED: $msg: got '$got' expected '$exp'"
      _ := set_exit_code 1

  test "map +(1+0)" $([1, 2, 3, 4].map +(1+0)) "[2, 3, 4, 5]"

  o := 1
  t := 2
  test "map +o" $([1, 2, 3, 4].map +o) "[2, 3, 4, 5]"
  test "map -o" $([1, 2, 3, 4].map -o) "[0, 1, 2, 3]"
  test "map o+" $([1, 2, 3, 4].map o+) "[2, 3, 4, 5]"
  test "map o-" $([1, 2, 3, 4].map o-) "[0, -1, -2, -3]"
  test "map *t" $([1, 2, 3, 4].map *t) "[2, 4, 6, 8]"
  test "map %t" $([1, 2, 3, 4].map %t) "[1, 0, 1, 0]"

  qqq(f,g i32->i32) => "{f 42} {g 42}"
  test "qqq lambdas " (qqq x->2*x x->3*x) "84 126"
  test "qqq partials" (qqq    2*     3*)  "84 126"

  data := 1..10
  # NYI:  m := data.map x->2*x; say m   # see #2251, semicolon does not work after lambda
  test "data.map x->2*x    " (data.map x->2*x       ) "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"
  test "data.map    2*     " (data.map    2*        ) "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"
  test "data.map    *2     " (data.map    *2        ) "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"
  test "data.map    2+     " (data.map    2+        ) "[3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
  test "data.map    +2     " (data.map    +2        ) "[3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
  test "data.map    2-     " (data.map    2-        ) "[1, 0, -1, -2, -3, -4, -5, -6, -7, -8]"
  test "data.map    -2     " (data.map    -2        ) "[-1, 0, 1, 2, 3, 4, 5, 6, 7, 8]"
  test "data.map 3.infix*  " (data.map    3.infix*  ) "[3, 6, 9, 12, 15, 18, 21, 24, 27, 30]"
  test "data.map 4.infix*  " (data.map    4.infix*  ) "[4, 8, 12, 16, 20, 24, 28, 32, 36, 40]"

  i32.prefix      !! => if val <= 1 then 1 else val * !!(val-1)
  integer.postfix !  => if integer.this <= integer.this.one then integer.this.one else integer.this * (integer.this-integer.this.one)!
  fixed redef i32.postfix !  => if val <= 1 then 1 else val * (val-1)!
  u64.postfix     !!  => if val <= u64 1 then u64 1 else val * (val-1)!!
  u64.prefix      !!  => if val <= u64 1 then u64 1 else val * !!(val-1)

  test "data.map (+)" (data.map (+)) "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
  test "data.map (-)" (data.map (-)) "[-1, -2, -3, -4, -5, -6, -7, -8, -9, -10]"
  test "data.map (!!)" (data.map (!!)) "[1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]"
  test "data.map (!)" (data.map (!)) "[1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]"
  test "data.map (!) " (data.map (!) ) "[1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]"
  test "((u64 11)..20).map (!)" (((u64 11)..20).map (!)) "[39916800, 479001600, 6227020800, 87178291200, 1307674368000, 20922789888000, 355687428096000, 6402373705728000, 121645100408832000, 2432902008176640000]"
  test "((u64 11)..15).map ( !)" (((u64 11)..15).map ( !)) "[39916800, 479001600, 6227020800, 87178291200, 1307674368000]"
  test "((u64 11)..15).map (! )" (((u64 11)..15).map (! )) "[39916800, 479001600, 6227020800, 87178291200, 1307674368000]"
  test "((u64 11)..15).map ( ! )" (((u64 11)..15).map ( ! )) "[39916800, 479001600, 6227020800, 87178291200, 1307674368000]"
#  say (((u64 11)..20).map (!!))    # should cause an error: ambiguous prefix and postfix !

  test "data.map (.as_string)  " (data.map (.as_string)) "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
  test "data.map (.as_string 2)" (data.map (.as_string 2)) "[1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010]"
  test "data.map (.as_string 3)" (data.map (.as_string 3)) "[1, 2, 10, 11, 12, 20, 21, 22, 100, 101]"

  as00 i32->String := (.as_string)
  as01 i32->String := (.as_string 2)
  as02 i32->String := (.as_string 3)
  as03 i32->String := .as_string
  as04 i32->String := .as_string 2
  as05 i32->String := .as_string 3
  test "data.map as00          " (data.map as00) "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
  test "data.map as01          " (data.map as01) "[1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010]"
  test "data.map as02          " (data.map as02) "[1, 2, 10, 11, 12, 20, 21, 22, 100, 101]"
  test "data.map as03          " (data.map as03) "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
  test "data.map as04          " (data.map as04) "[1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010]"
  test "data.map as05          " (data.map as05) "[1, 2, 10, 11, 12, 20, 21, 22, 100, 101]"

  test "data.zip data x,y->x*y" (data.zip data x,y->x*y) "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
  test "data.zip data (+)" (data.zip data (+)) "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"
  test "data.zip data (*)" (data.zip data (*)) "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
  z00 Binary i32 i32 i32 := +
  test "data.zip data +  " (data.zip data z00) "[2, 4, 6, 8, 10, 12, 14, 16, 18, 20]"
  z01 Binary i32 i32 i32 := -
  test "data.zip data -  " (data.zip data z01) "[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]"
  z02 Binary i32 i32 i32 => *
  test "data.zip data *  " (data.zip data z02) "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
  z03 Binary i32 i32 i32 => /
  test "data.zip data *  " (data.zip data z03) "[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]"

  easy(f i32->i32) =>
    f 42

  test "easy x->x*x   " (easy x->x*x)    "1764"
  test "easy 5.infix* " (easy 5.infix*)  "210"
  test "easy 7*       " (easy 7*)        "294"
  test "easy (7 *)    " (easy (7 *))     "294"
  test "easy 17-      " (easy 17-)       "-25"
  test "easy (17 -)   " (easy (17 -))    "-25"
  test "easy %17      " (easy %17)       "8"
  test "easy (% 17)   " (easy (% 17))    "8"
  test "easy (-(17+0))" (easy (-(17+0))) "25"
  test "easy -(17+0)  " (easy -(17+0)  ) "25"
  test "easy -(17)    " (easy -(17)    ) "25"
  test "easy (- 17)   " (easy (- 17)   ) "25"
  test "easy -17      " (easy -17      ) "25"
  test "easy (+(17+0))" (easy (+(17+0))) "59"
  test "easy +(17+0)  " (easy +(17+0)  ) "59"
  test "easy +(17)    " (easy +(17)    ) "59"
  test "easy (+ 17)   " (easy (+ 17)   ) "59"
  test "easy +17      " (easy +17      ) "59"
  test "easy +o" (easy +o) "43"
  test "easy -o" (easy -o) "41"
  test "easy o+" (easy o+) "43"
  test "easy o-" (easy o-) "-41"
  test "easy *t" (easy *t) "84"
  test "easy %t" (easy %t) "0"

  part_app_field =>
    r01 := easy x->x*x
    test "easy x->x*x   " r01 "1764"
    r02 := easy 5.infix*
    test "easy 5.infix* " r02 "210"
    r03 := easy 7*
    test "easy 7*       " r03 "294"
    r04 := easy (7 *)
    test "easy (7 *)    " r04 "294"
    r05 := easy 17-
    test "easy 17-      " r05 "-25"
    r06 := easy (17 -)
    test "easy (17 -)   " r06 "-25"
    r07 := easy %17
    test "easy %17      " r07 "8"
    r08 := easy (% 17)
    test "easy (% 17)   " r08 "8"
    r09 := easy (-(17+0))
    test "easy (-(17+0))" r09 "25"
    r10 := easy -(17+0)
    test "easy -(17+0)  " r10 "25"
    r11 := easy -(17)
    test "easy -(17)    " r11 "25"
    r12 := easy (- 17)
    test "easy (- 17)   " r12 "25"
    r13 := easy -17
    test "easy -17      " r13 "25"
    r14 := easy -17
    test "easy -17      " r14 "25"
    r15 := easy (+(17+0))
    test "easy (+(17+0))" r15 "59"
    r16 := easy +(17+0)
    test "easy +(17+0)  " r16 "59"
    r17 := easy +(17+0)
    test "easy +(17+0)  " r17 "59"
    r18 := easy +(17)
    test "easy +(17)    " r18 "59"
    r19 := easy (+ 17)
    test "easy (+ 17)   " r19 "59"
    r20 := easy +17
    test "easy +17      " r20 "59"
    r21 := easy +o
    test "easy +o" r21 "43"
    r22 := easy -o
    test "easy -o" r22 "41"
    r23 := easy o+
    test "easy o+" r23 "43"
    r24 := easy o-
    test "easy o-" r24 "-41"
    r25 := easy *t
    test "easy *t" r25 "84"
    r26 := easy %t
    test "easy %t" r26 "0"
  part_app_field

  part_app =>
    r01 i32->i32 := x->x*x
    test "easy x->x*x   " (easy r01) "1764"
    r02 i32->i32 := 5.infix*
    test "easy 5.infix* " (easy r02) "210"
    r03 i32->i32 := 7*
    test "easy 7*       " (easy r03) "294"
    r04 i32->i32 := (7 *)
    test "easy (7 *)    " (easy r04) "294"
    r05 i32->i32 := 17-
    test "easy 17-      " (easy r05) "-25"
    r06 i32->i32 := (17 -)
    test "easy (17 -)   " (easy r06) "-25"
    r07 i32->i32 := %17
    test "easy %17      " (easy r07) "8"
    r08 i32->i32 := (% 17)
    test "easy (% 17)   " (easy r08) "8"
    r09 i32->i32 := (-(17+0))
    test "easy (-(17+0))" (easy r09) "25"
    r10 i32->i32 := -(17+0)
    test "easy -(17+0)  " (easy r10) "25"
    r11 i32->i32 := -(17)
    test "easy -(17)    " (easy r11) "25"
    r12 i32->i32 := (- 17)
    test "easy (- 17)   " (easy r12) "25"
    r13 i32->i32 := -17
    test "easy -17      " (easy r13) "25"
    r14 i32->i32 := -17
    test "easy -17      " (easy r14) "25"
    r15 i32->i32 := (+(17+0))
    test "easy (+(17+0))" (easy r15) "59"
    r16 i32->i32 := +(17+0)
    test "easy +(17+0)  " (easy r16) "59"
    r17 i32->i32 := +(17+0)
    test "easy +(17+0)  " (easy r17) "59"
    r18 i32->i32 := +(17)
    test "easy +(17)    " (easy r18) "59"
    r19 i32->i32 := (+ 17)
    test "easy (+ 17)   " (easy r19) "59"
    r20 i32->i32 := +17
    test "easy +17      " (easy r20) "59"
    r21 i32->i32 := +o
    test "easy +o" (easy r21) "43"
    r22 i32->i32 := -o
    test "easy -o" (easy r22) "41"
    r23 i32->i32 := o+
    test "easy o+" (easy r23) "43"
    r24 i32->i32 := o-
    test "easy o-" (easy r24) "-41"
    r25 i32->i32 := *t
    test "easy *t" (easy r25) "84"
    r26 i32->i32 := %t
    test "easy %t" (easy r26) "0"

    r27 i32->i32 := +
    test "easy +        " (easy r27) "42"
    r28 i32->i32 := -
    test "easy -        " (easy r28) "-42"
    r29 i32->i32 := (+)
    test "easy (+)      " (easy r29) "42"
    r30 i32->i32 := (-)
    test "easy (-)      " (easy r30) "-42"
    r31 i32->i32 := ((+))
    test "easy ((+))    " (easy r31) "42"
    r32 i32->i32 := ((-))
    test "easy ((-))    " (easy r32) "-42"
  part_app

  x01 Unary i32 i32 := 5 *;   test "data.map x01" (data.map x01) "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]"
  x02 Unary i32 i32 := 5*;    test "data.map x02" (data.map x02) "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]"
  x03 Unary i32 i32 := *5;    test "data.map x03" (data.map x03) "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]"
  x04 Unary i32 i32 := * 5;   test "data.map x04" (data.map x04) "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]"
  x05 Unary i32 i32 := (*5);  test "data.map x05" (data.map x05) "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]"
  x06 Unary i32 i32 := 5 *  ; test "data.map x06" (data.map x06) "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]"
  x07 Unary i32 i32 := 5*   ; test "data.map x07" (data.map x07) "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]"
  x08 Unary i32 i32 := *5   ; test "data.map x08" (data.map x08) "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]"
  x09 Unary i32 i32 := * 5  ; test "data.map x09" (data.map x09) "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]"
  x10 Unary i32 i32 := (*5) ; test "data.map x10" (data.map x10) "[5, 10, 15, 20, 25, 30, 35, 40, 45, 50]"

  y01 Unary i32 i32 := 3 -;  test "data.map y01" (data.map y01) "[2, 1, 0, -1, -2, -3, -4, -5, -6, -7]"
  y02 Unary i32 i32 := 3-;   test "data.map y02" (data.map y02) "[2, 1, 0, -1, -2, -3, -4, -5, -6, -7]"
  y03 Unary i32 i32 := -3;   test "data.map y03" (data.map y03) "[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7]"
  y04 Unary i32 i32 := - 3;  test "data.map y04" (data.map y04) "[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7]"
  y05 Unary i32 i32 := (-3); test "data.map y05" (data.map y05) "[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7]"
  y06 Unary i32 i32 := 3 +;  test "data.map y06" (data.map y06) "[4, 5, 6, 7, 8, 9, 10, 11, 12, 13]"
  y07 Unary i32 i32 := 3+;   test "data.map y07" (data.map y07) "[4, 5, 6, 7, 8, 9, 10, 11, 12, 13]"
  y08 Unary i32 i32 := +3;   test "data.map y08" (data.map y08) "[4, 5, 6, 7, 8, 9, 10, 11, 12, 13]"
  y09 Unary i32 i32 := + 3;  test "data.map y09" (data.map y09) "[4, 5, 6, 7, 8, 9, 10, 11, 12, 13]"
  y10 Unary i32 i32 := (+3); test "data.map y10" (data.map y10) "[4, 5, 6, 7, 8, 9, 10, 11, 12, 13]"

  y2 Unary i32 i32 := -
  test "y2.call  42" (y2.call  42) "-42"
  test "y2.call -12" (y2.call -12)  "12"
  y3 Function i32 i32 i32 := -
  test "y3.call  333  111" (y3.call  333  111)  "222"
  test "y3.call -333 -111" (y3.call -333 -111) "-222"

  ambig Unary String i32 => x->"#$x#"
  ambig(x, y i32) String => "$x $y"

  test(f i32->String) => f 32168

  test "test     ambig        " (test     ambig        ) "#32168#"
  test "test x->(ambig 4711 x)" (test x->(ambig 4711 x)) "4711 32168"
  _ := test ambig
  _ := test x->(ambig 4711 x)
  am1 := test     ambig
  am2 := test x->(ambig 64 x)
  test "test am1              " am1                      "#32168#"
  test "test am2              " am2                      "64 32168"

  without_tp =>

    f_0_args                                 => "-"
    f_1_args(a1 i32                        ) => "$a1"
    f_2_args(a1 i32, a2 i32                ) => "$a1,$a2"
    f_3_args(a1 i32, a2 i32, a3 i32        ) => "$a1,$a2,$a3"
    f_4_args(a1 i32, a2 i32, a3 i32, a4 i32) => "$a1,$a2,$a3,$a4"

    fun_arg_with_0_args(f ()               ->String                                ) String => f()
    fun_arg_with_1_args(f  i32             ->String, a1 i32                        ) String => f a1
    fun_arg_with_2_args(f (i32,i32        )->String, a1 i32, a2 i32                ) String => f a1 a2
    fun_arg_with_3_args(f (i32,i32,i32    )->String, a1 i32, a2 i32, a3 i32        ) String => f a1 a2 a3
    fun_arg_with_4_args(f (i32,i32,i32,i32)->String, a1 i32, a2 i32, a3 i32, a4 i32) String => f a1 a2 a3 a4

    test "fun_arg 0 0" (fun_arg_with_0_args  f_0_args            ) "-"
    test "fun arg 0 1" (fun_arg_with_0_args (f_1_args 42        )) "42"
    test "fun arg 0 2" (fun_arg_with_0_args (f_2_args 47 11     )) "47,11"
    test "fun arg 0 3" (fun_arg_with_0_args (f_3_args 32 16 8   )) "32,16,8"
    test "fun arg 0 4" (fun_arg_with_0_args (f_4_args  4  2 0 69)) "4,2,0,69"

    test "fun arg 1 1" (fun_arg_with_1_args  f_1_args 42     )     "42"
    test "fun arg 1 2" (fun_arg_with_1_args (f_2_args 47     ) 11) "47,11"
    test "fun arg 1 3" (fun_arg_with_1_args (f_3_args 32 16  )  8) "32,16,8"
    test "fun arg 1 4" (fun_arg_with_1_args (f_4_args  4  2 0) 69) "4,2,0,69"

    test "fun arg 2 2" (fun_arg_with_2_args (f_2_args     ) 47 11) "47,11"
    test "fun arg 2 3" (fun_arg_with_2_args (f_3_args 32  ) 16  8) "32,16,8"
    test "fun arg 2 4" (fun_arg_with_2_args (f_4_args  4 2)  0 69) "4,2,0,69"

    test "fun arg 3 3" (fun_arg_with_3_args  f_3_args    32 16  8) "32,16,8"
    test "fun arg 3 4" (fun_arg_with_3_args (f_4_args 4)  2  0 69) "4,2,0,69"

    test "fun arg 4 4" (fun_arg_with_4_args f_4_args 4 2 0 69) "4,2,0,69"

  without_tp

  with_tp =>

    f_0_args                             => "-"
    f_1_args(a1 T1                     ) => "$a1"
    f_2_args(a1 T1, a2 T2              ) => "$a1,$a2"
    f_3_args(a1 T1, a2 T2, a3 T3       ) => "$a1,$a2,$a3"
    f_4_args(a1 T1, a2 T2, a3 T3, a4 T4) => "$a1,$a2,$a3,$a4"

    fun_arg_with_0_args(f ()           ->R                            ) R => f()
    fun_arg_with_1_args(f  A1          ->R, a1 A1                     ) R => f a1
    fun_arg_with_2_args(f (A1,A2      )->R, a1 A1, a2 A2              ) R => f a1 a2
    fun_arg_with_3_args(f (A1,A2,A3   )->R, a1 A1, a2 A2, a3 A3       ) R => f a1 a2 a3
    fun_arg_with_4_args(f (A1,A2,A3,A4)->R, a1 A1, a2 A2, a3 A3, a4 A4) R => f a1 a2 a3 a4

    test "fun_arg 0 0" (fun_arg_with_0_args  f_0_args            ) "-"
    test "fun arg 0 1" (fun_arg_with_0_args (f_1_args 42        )) "42"
    test "fun arg 0 2" (fun_arg_with_0_args (f_2_args 47 11     )) "47,11"
    test "fun arg 0 3" (fun_arg_with_0_args (f_3_args 32 16 8   )) "32,16,8"
    test "fun arg 0 4" (fun_arg_with_0_args (f_4_args  4  2 0 69)) "4,2,0,69"

    test "fun arg 1 1" (fun_arg_with_1_args  f_1_args 42     )     "42"
    test "fun arg 1 2" (fun_arg_with_1_args (f_2_args 47     ) 11) "47,11"
    test "fun arg 1 3" (fun_arg_with_1_args (f_3_args 32 16  )  8) "32,16,8"
    test "fun arg 1 4" (fun_arg_with_1_args (f_4_args  4  2 0) 69) "4,2,0,69"

    test "fun arg 2 2" (fun_arg_with_2_args (f_2_args     ) 47 11) "47,11"
    test "fun arg 2 3" (fun_arg_with_2_args (f_3_args 32  ) 16  8) "32,16,8"
    test "fun arg 2 4" (fun_arg_with_2_args (f_4_args  4 2)  0 69) "4,2,0,69"

    test "fun arg 3 3" (fun_arg_with_3_args  f_3_args    32 16  8) "32,16,8"
    test "fun arg 3 4" (fun_arg_with_3_args (f_4_args 4)  2  0 69) "4,2,0,69"

    test "fun arg 4 4" (fun_arg_with_4_args f_4_args 4 2 0 69) "4,2,0,69"

  with_tp

  # example code from #4687, partial application of infix operator
  #
  test_4687 =>

    [(u8 0, u8 1)].map (||> x,y->unit) |> x -> test "#4687:" x "[unit]"

  test_4687

  # example code from #5259, partial application on numeric literals
  #
  test_5259 =>

    # numeric literal passed as unary partial function as argument
    a(f i32->i32, exp String) => test "#5259: f 7" (f 7) exp
    a -1 "6"
    a *2 "14"

    # numeric literal passed as unary partial function as field or function result
    g i32->i32 := -1
    h i32->i32 => -1
    i i32->i32 := *2
    j i32->i32 => *2

    7 |> g |> x -> test "#5259: 7 |> g" x "6"
    7 |> h |> x -> test "#5259: 7 |> h" x "6"
    7 |> i |> x -> test "#5259: 7 |> i" x "14"
    7 |> j |> x -> test "#5259: 7 |> j" x "14"

    # numeric literal passed as nullary partial function
    k ()->i32 := -123
    l ()->i32 => -456
    m ()->i32 := +123
    n ()->i32 => +456

    k() |> x -> test "#5259: k()" x "-123"
    l() |> x -> test "#5259: l()" x "-456"
    m() |> x -> test "#5259: m()" x "123"
    n() |> x -> test "#5259: n()" x "456"

  test_5259
