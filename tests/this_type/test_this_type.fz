# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test test_this_type
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# a simple test using type inference for 'q.this' to declare fields for an outer
# ref type 'q'
#
simple_test_for_this_type_ref =>

  # a simple test for 'this.type'
  #
  q ref is
    x is
      print
      b1 := q.this
      b2 := b1
      b3 q := q.this
      b4 q := b1
      b5 q := b2

    print => yak "q"

  r : q is
    redef print => yak "r"

# say ""; yak "q.x.b1.print: (expecting qq) "; q.x.b1.print   -- not allowed, result type q.this.type of b1 is ambiguous
# say ""; yak "q.x.b2.print: (expecting qq) "; q.x.b2.print   -- not allowed, result type q.this.type of b1 is ambiguous
  say ""; yak "q.x.b3.print: (expecting qq) "; q.x.b3.print
  say ""; yak "q.x.b4.print: (expecting qq) "; q.x.b4.print
  say ""; yak "q.x.b5.print: (expecting qq) "; q.x.b5.print

  say ""; yak "r.x.b1.print: (expecting rr) "; r.x.b1.print
  say ""; yak "r.x.b2.print: (expecting rr) "; r.x.b2.print
  say ""; yak "r.x.b3.print: (expecting rr) "; r.x.b3.print
  say ""; yak "r.x.b4.print: (expecting rr) "; r.x.b4.print
  say ""; yak "r.x.b5.print: (expecting rr) "; r.x.b5.print
  say ""

simple_test_for_this_type_ref

# a simple test using type inference for 'q.this' to declare fields for an outer
# value type 'q'
#
simple_test_for_this_type_value =>

  # a simple test for 'this.type'
  #
  rq ref is
    print unit => abstract
  q : rq is
    x is
      print
      b1 := q.this
      b2 := b1
      b3 rq := q.this
      b4 rq := b1
      b5 rq := b2

    redef print => yak "q"

  r : q is
    redef print => yak "r"

  say ""; yak "q.x.b1.print: (expecting qq) "; q.x.b1.print
  say ""; yak "q.x.b2.print: (expecting qq) "; q.x.b2.print
  say ""; yak "q.x.b3.print: (expecting qq) "; q.x.b3.print
  say ""; yak "q.x.b4.print: (expecting qq) "; q.x.b4.print
  say ""; yak "q.x.b5.print: (expecting qq) "; q.x.b5.print

  # say ""; yak "r.x.b1.print: (expecting rr) "; r.x.b1.print   // NYI: test fails
  # say ""; yak "r.x.b2.print: (expecting rr) "; r.x.b2.print   // NYI: test fails
  say ""; yak "r.x.b3.print: (expecting rr) "; r.x.b3.print
  # say ""; yak "r.x.b4.print: (expecting rr) "; r.x.b4.print   // NYI: test fails
  # say ""; yak "r.x.b5.print: (expecting rr) "; r.x.b5.print   // NYI: test fails
  say ""

simple_test_for_this_type_value

# test redefinition of a feature using 'fixed' keyword, i.e.., provide an
# implementation that will not be inherited to heirs.
#
test_redef_using_fixed =>

  # the parent defining op_abstract (which heirs will redefine as abstract) and op
  # (which heirs will redefine using 'fixed'):
  #
  a is

    public redef as_string String => "instance of 'a'"

    # abstract feature that will be redefined as abstract
    #
    op_abstract(v a.this) a.this => abstract

    # abstract that will be implemented with fixed features
    #
    op(v a.this) a.this => abstract

    # An implemented feature that will be redefined only by b, not by c
    #
    op_implemented String => "a.op_implemented"

    me1 a.this => a.this
    me2 a.this => a.this


  b(val String) : a is

    public redef as_string String => "instance of {b.type.as_string} with $val"

    redef me2 b.this => b.this

    # redefine abstract feature with co-variant argument and result
    #
    redef op_abstract(v b.this) b.this => abstract

    # redefine abstract with concrete type, must be fixed since this is
    # not a legal redefinition in a sub-type
    #
    fixed redef op(v b) b => if debug then b "debug" /* b.this */ else b "non-debug"

    # An implemented feature that will be redefined only by b, not by c
    #
    fixed redef op_implemented String => "b.op_implemented"


  c : b "from c" is

    public redef as_string String => "instance of {c.type.as_string}"

    # redefine abstract feature with co-variant argument and result
    #
    redef op_abstract(v c.this) c.this => abstract

    # redefine abstract that was implemented as fixed by parent b:
    #
    fixed redef op(v c) c => if debug then c.this else c

  b1 := b "1"
  b2 := b "2"
  say (b1.op b2)

  say "expecting 'a': {a.me1}"
  say "expecting 'a': {a.me2}"
  say "expecting 'b with 1': {b1.me1}"
  say "expecting 'b with 2': {b2.me2}"

  c1 := c
  c2 := c
  say (c1.op c2)

  say "expecting 'a.op_implemented: {a.op_implemented}"
  say "expecting 'b.op_implemented: {b1.op_implemented}"
  say "expecting 'a.op_implemented: {c1.op_implemented}"

test_redef_using_fixed
