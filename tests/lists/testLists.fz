# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test testLists
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

testLists is
  List(T type) is
    xb is say "B.xb"
    Node (
      el T,
      n, p OptNode) ref : Any is

    Nil is
    OptNode : choice Node Nil is

    h OptNode := Nil
    add(e T) is
      set h := Node e h Nil

    print is
      // for   -- NYI: must update i in the loop prolog
      i := h;
      while (i ? Node => { true } | Nil => false)   // NYI: This screams for recursion
        match i
          n Node =>
              say "print el in loop: {n.el}"
              set i := n.n
          Nil =>

    size i32 is
      set result := 0;
      // for   -- NYI: must update i in the loop prolog
      i := h;
      while (i ? Node => { true } | Nil => false)    // NYI: This screams for recursion
        match i
          n Node =>
              set result := result + 1
              set i := n.n
          Nil =>

  li List i32 := List i32
  li.add 3
  li.add 4
  li.add 5
  li.add 6
  li.add 7
  li.add 8
  li.add 9
  li.print
  say "size: {li.size}"

  Complex(real, imag i32) is

  lc List Complex := List Complex
  lc.add (Complex 3 4)
  lc.add (Complex 4 5)
  lc.add (Complex 5 6)
  lc.add (Complex 7 8)
  lc.print
  say "size: {lc.size}"
