# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test assignments
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# This tests declares a value type feature with three fields of a mutable type
# and uses different assignments to pass these values around and modify them.
#
# The same tests are then performed for a reference type that is otherwise equal
# to the value type.
#
value_assignments =>

  v is
    x := mut 42
    y := mut 3.14
    z := mut "hi!"

    public redef as_string => "value: $x $y $z"

    set_x(x0) => x <- x0
    set_y(y0) => y <- y0
    set_z(z0) => z <- z0

    # show v.this, call f that may have the side-effect of modifying v, and show v.this again.
    show_mod_show(f ()->unit) =>
      say v.this
      f.call
      say v.this

  # test plain assignments and modifications of the assigned values:

  a := v
  b := a
  c := b

  say a
  say b
  say c
  a.x <- 4711
  b.y <- 2.71
  c.z <- "¡Hola!"
  say a
  say b
  say c

  # test assignments to function arguments

  q(d, e, f v, modify ()->unit) =>
    say a
    say d
    say e
    say f
    d.x <- 32168
    e.y <- 6.62607015E-34
    f.z <- "んちわ!"
    say a
    say d
    say e
    say f
    _ := modify
    say a
    say d
    say e
    say f

  q a a a ()->
    a.x <- 2 * a.x.get
    a.set_y (0.5 * a.y.get)
    a.z <- a.z.get + a.z.get
  say a

  # test plain assignments and modifications via an outer reference

  g := v
  h := g
  i := h
  g.set_x 911
  h.set_y 5.670374419E-8
  i.set_z "Salut!"
  say g
  say h
  say i

  # test argument passing and modifications via argument fields

  j(p v) => {p.x <- 0815; p}
  k(p v) => {p.y <- 7.2973525693E-3; p}
  l(p v) => {p.z <- "привіт"; p}
  vv := v
  say <| j vv
  say <| k vv
  say <| l vv
  say vv

  # test argument passing and modifications via argument fields and outer references

  m(p v) => {p.set_x 299792458; p}
  n(p v) => {p.set_y 5.29177210903E-11; p}
  o(p v) => {p.set_z "హలో"; p}
  say <| m vv
  say <| n vv
  say <| o vv
  say vv

  # test passing as outer reference and modification from outside via a function argument

  vv.show_mod_show ()->
    vv.x <- 2023
    vv.y <- 1E-18
    vv.z <- "สวัสดี"

  # test passing as outer reference and modification from outside via a function argument using outer references

  vv.show_mod_show ()->
    vv.set_x 1984
    vv.set_y 7.2973525693E-3
    vv.set_z "Kamusta"


ref_assignments =>

  v ref is
    x := mut 42
    y := mut 3.14
    z := mut "hi!"

    public redef as_string => "ref: $x $y $z"

    set_x(x0) => x <- x0
    set_y(y0) => y <- y0
    set_z(z0) => z <- z0

    # show v.this, call f that may have the side-effect of modifying v, and show v.this again.
    show_mod_show(f ()->unit) =>
      say v.this
      f.call
      say v.this

  # test plain assignments and modifications of the assigned values:

  a := v
  b := a
  c := b

  say a
  say b
  say c
  a.x <- 4711
  b.y <- 2.71
  c.z <- "¡Hola!"
  say a
  say b
  say c

  # test assignments to function arguments

  q(d, e, f v, modify ()->unit) =>
    say a
    say d
    say e
    say f
    d.x <- 32168
    e.y <- 6.62607015E-34
    f.z <- "んちわ!"
    say a
    say d
    say e
    say f
    _ := modify
    say a
    say d
    say e
    say f

  q a a a ()->
    a.x <- 2 * a.x.get
    a.set_y (0.5 * a.y.get)
    a.z <- a.z.get + a.z.get
  say a

  # test plain assignments and modifications via an outer reference

  g := v
  h := g
  i := h
  g.set_x 911
  h.set_y 5.670374419E-8
  i.set_z "Salut!"
  say g
  say h
  say i

  # test argument passing and modifications via argument fields

  j(p v) => {p.x <- 0815; p}
  k(p v) => {p.y <- 7.2973525693E-3; p}
  l(p v) => {p.z <- "привіт"; p}
  vv := v
  say <| j vv
  say <| k vv
  say <| l vv
  say vv

  # test argument passing and modifications via argument fields and outer references

  m(p v) => {p.set_x 299792458; p}
  n(p v) => {p.set_y 5.29177210903E-11; p}
  o(p v) => {p.set_z "హలో"; p}
  say <| m vv
  say <| n vv
  say <| o vv
  say vv

  # test passing as outer reference and modification from outside via a function argument

  vv.show_mod_show ()->
    vv.x <- 2023
    vv.y <- 1E-18
    vv.z <- "สวัสดี"

  # test passing as outer reference and modification from outside via a function argument using outer references

  vv.show_mod_show ()->
    vv.set_x 1984
    vv.set_y 7.2973525693E-3
    vv.set_z "Kamusta"


value_assignments
ref_assignments
