# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test floating_point_math
#
#  Author: Michael Lill (michael.lill@tokiwa.software)
#
# -----------------------------------------------------------------------

# tests basic floating point math for f32/f64
floating_point_math is

  exitCode := 0

  chck(b bool, msg string) =>
    s := if b
      "PASSED: "
    else
      set exitCode := 1
      "FAILED: "
    say (s + msg)

  generic_tests(T (float T).type, a T) is

    # isNaN
    chck (a.isNaN a.NaN)                                                   "{a.name}: isNaN NaN"
    chck (!a.isNaN a.zero)                                                 "{a.name}: isNaN 0"
    chck (!a.isNaN a.π)                                                    "{a.name}: isNaN π"
    chck (!a.isNaN a.infinity)                                             "{a.name}: isNaN infinity"

    # sqrt
    chck (a.sqrt (a.two * a.two) == a.two)                                 "{a.name}: sqrt (2*2) = 2"

    # exponentation / logarithm
    chck (a.exp a.zero   == a.one)                                         "{a.name}: exp 0 = 1"
    chck (a.exp a.one    == a.ℇ)                                           "{a.name}: exp 1 = ℇ"
    chck (a.log a.one    == a.zero)                                        "{a.name}: log 1 = 0"

    # trigonometric
    chck (a.sin a.zero   == a.zero)                                        "{a.name}: sin 0  = 0"
    chck (a.sin a.π    <  a.epsilon)                                       "{a.name}: sin π  ~= 0"
    chck (a.cos a.zero   == a.one)                                         "{a.name}: cos 0  = 1"
    chck (a.cos a.π      == -a.one)                                        "{a.name}: cos π  = -1"
    chck (a.tan a.zero   == a.zero)                                        "{a.name}: tan 0  = 0"
    chck (a.asin a.zero  == a.zero)                                        "{a.name}: asin 0 = 0"
    chck (a.acos a.one   == a.zero)                                        "{a.name}: acos 1 = 0"
    chck (a.atan a.zero  == a.zero)                                        "{a.name}: atan 0 = 0"

    # atan2
    chck (a.isNaN (a.atan2 a.NaN a.one))                                        "{a.name}: atan2 NaN 1            = NaN        "
    chck (a.isNaN (a.atan2 a.one a.NaN))                                        "{a.name}: atan2 1 NaN            = NaN        "
    chck (a.atan2 +a.zero a.one             == +a.zero)                         "{a.name}: atan2 +0 1             = +0         "
    chck (a.atan2 -a.zero a.one             == -a.zero)                         "{a.name}: atan2 -0 1             = -0         "
    chck (a.atan2 +a.zero -a.one            == +a.π)                            "{a.name}: atan2 +0 -1            = +π         "
    chck (a.atan2 -a.zero -a.one            == -a.π)                            "{a.name}: atan2 -0 -1            = -π         "
    chck (a.atan2 a.one a.zero              == +a.π/a.two)                      "{a.name}: atan2 1 0              = +π/two     "
    chck (a.atan2 -a.one a.zero             == -a.π/a.two)                      "{a.name}: atan2 -1 0             = -π/two     "
    chck (a.atan2 +a.infinity +a.infinity   == +a.π/a.from_u32(4))              "{a.name}: atan2 +infinity +infinity   = +π/4  "
    chck (a.atan2 -a.infinity +a.infinity   == -a.π/a.from_u32(4))              "{a.name}: atan2 -infinity +infinity   = -π/4  "
    chck (a.atan2 +a.infinity -a.infinity   == a.from_u32(3)*a.π/a.from_u32(4)) "{a.name}: atan2 +infinity -infinity   = 3*π/4 "
    chck (a.atan2 -a.infinity -a.infinity   == -a.from_u32(3)*a.π/a.from_u32(4))"{a.name}: atan2 -infinity -infinity   = -3*π/4"
    chck (a.atan2 a.one +a.infinity         == a.zero)                          "{a.name}: atan2 1 +infinity         = 0       "
    chck (a.atan2 a.one -a.infinity         == +a.π)                            "{a.name}: atan2 1 -infinity         = +π      "
    chck (a.atan2 -a.one -a.infinity        == -a.π)                            "{a.name}: atan2 -1 -infinity        = -π      "
    chck (a.atan2 +a.infinity a.one         == +a.π/a.two)                      "{a.name}: atan2 +infinity 1         = +π/two  "
    chck (a.atan2 -a.infinity a.one         == -a.π/a.two)                      "{a.name}: atan2 -infinity 1         = -π/two  "

    # hyperbolicus
    chck (a.sinh a.zero   == a.zero)                                           "{a.name}: sinh  0 = 0"
    chck (a.cosh a.zero   == a.one)                                            "{a.name}: cosh  0 = 1"
    chck (a.tanh a.zero   == a.zero)                                           "{a.name}: tanh  0 = 0"
    chck (a.asinh a.zero  == a.zero)                                           "{a.name}: asinh 0 = 0"
    chck (a.acosh a.one   == a.zero)                                           "{a.name}: acosh 1 = 0"
    chck (a.atanh a.zero  == a.zero)                                           "{a.name}: atanh 0 = 0"

    # round
    a_half := a.one / a.two
    chck (a_half.round             ==  a.one)                                      "{a.name}: round  1/2 =  1"
    chck (-a_half.round            == -a.one)                                      "{a.name}: round -1/2 = -1"
    chck (-(a.one + a_half).round  == -a.two)                                      "{a.name}: round -3/2 = -2"

    # floor
    chck (a.zero.floor == a.zero)                                               "{a.name}: floor 0 = 0"
    chck (a.one.floor  == a.one)                                                "{a.name}: floor 1 = 1"
    chck (a.ℇ.floor    == a.two)                                                "{a.name}: floor ℇ = 2"

    # ceil
    chck (a.zero.ceil == a.zero)                                                "{a.name}: ceil 0 = 0"
    chck (a.one.ceil  == a.one)                                                 "{a.name}: ceil 1 = 1"
    chck (a.ℇ.ceil    == a.two + a.one)                                         "{a.name}: ceil ℇ = 3"


  generic_tests f32s.zero
  generic_tests f64s.zero


  # fits_in_i64
  chck !f64s.positiveInfinity.fits_in_i64                                      "f64: ∞    not representable by i64"
  chck !f64s.negativeInfinity.fits_in_i64                                      "f64: -∞   not representable by i64"
  chck !f64s.NaN.fits_in_i64                                                   "f64: NaN  not representable by i64"
  chck f64s.zero.fits_in_i64                                                   "f64: 0    is  representable by i64"

  # as_i64
  chck (f64s.π.as_i64 == 3)                                                    "f64:  π  as_i64        =  3"
  chck ((-f64s.π).as_i64 == -3)                                                "f64: -π  as_i64        = -3"
  chck (f64s.positiveInfinity.as_i64_lax == i64.max)                           "f64:  ∞  as_i64_lax    = i64.max"
  chck (f64s.negativeInfinity.as_i64_lax == i64.min)                           "f64: -∞  as_i64_lax    = i64.min"
  chck (f64s.NaN.as_i64_lax == 0)                                              "f64: NaN as_i64_lax    = 0"

  # as_f64
  chck ((f32s.π.as_f64.as_f32 == f32s.π))                                      "f32:  π  as_f64.as_f32 = f32s.π"
  chck (f32s.positiveInfinity.as_f64 == f64s.positiveInfinity)                 "f32:  ∞  as_f64        = f64s.∞ "
  chck (f64s.isNaN f32s.NaN.as_f64)                                            "f32: NaN as_f64 isNaN "

  # as_f32
  chck (f64s.π.as_f32 == f32s.π)                                               "f64:  π  as_f32        = f32s.π "
  chck (f64s.positiveInfinity.as_f32 == f32s.positiveInfinity)                 "f64:  ∞  as_f32        = f32s.∞ "
  chck (f32s.isNaN f64s.NaN.as_f32)                                            "f64: NaN as_f32 isNaN "

  exit exitCode
