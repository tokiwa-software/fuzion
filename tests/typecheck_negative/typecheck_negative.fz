# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test typecheck_negative
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

typecheck_negative is

  assign is

    A(T type) is
      B(U type) is
        C(V type) is

    p := ((A i32).B u64).C bool
    q := ((A i64).B u64).C bool
    r := ((A i32).B bool).C bool
    s := ((A i32).B u64).C u32
    t := ((A i32).B u64).C u32
    set q := p // 1. should flag an error, illegal assignment
    set r := p // 2. should flag an error, illegal assignment
    set q := r // 3. should flag an error, illegal assignment
    set r := q // 4. should flag an error, illegal assignment
    set s := p // 5. should flag an error, illegal assignment
    set s := q // 6. should flag an error, illegal assignment
    set s := r // 7. should flag an error, illegal assignment
    set t := s

    D(T type) ref is
      E(U type) ref is
        F(V type) ref is

    u := ((D i32).E u64).F bool
    v := ((D i64).E u64).F bool
    w := ((D i32).E bool).F bool
    x := ((D i32).E u64).F u32
    y := ((D i32).E u64).F u32
    set v := u // 8. should flag an error, illegal assignment
    set w := u // 9. should flag an error, illegal assignment
    set v := w // 10. should flag an error, illegal assignment
    set w := v // 11. should flag an error, illegal assignment
    set x := u // 12. should flag an error, illegal assignment
    set x := v // 13. should flag an error, illegal assignment
    set x := w // 14. should flag an error, illegal assignment
    set y := x
  assign

  unit
