# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test typeinference
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

typeinference is


  chck(b bool, msg String) =>
    s := if b
           "PASSED: "
         else
           _ := set_exit_code 1
           "FAILED: "
    say (s + msg)

  typeInferencingFromIf1(b bool) is
    f choice i32 String bool :=
      if      ( b) 3
      else if (!b) false
      else         "String"

  chck (match (typeInferencingFromIf1 true ).f { i1 i32  => { i1 = 3       }; String, bool => false }) "typeinference from if 1"
  chck (match (typeInferencingFromIf1 false).f { b1 bool => { b1 <=> false }; i32, String  => false }) "typeinference from if 1"

  typeInferencingFromIf2(b bool) =>
    f(x choice i32 String bool) => x;
    f (if      ( b) 3
       else if (!b) false
       else         "String"
      )

  chck (match (typeInferencingFromIf2 true ) { i2 i32  => { i2 = 3       }; String, bool => false }) "typeinference from if 2"
  chck (match (typeInferencingFromIf2 false) { b2 bool => { b2 <=> false }; i32, String  => false }) "typeinference from if 2"
  // chck (typeInferencingFromIf2(true ) == 3    ) "typeinference from if 2" // NYI: should cause a compile-time error
  // chck (typeInferencingFromIf2(false) == false) "typeinference from if 2" // NYI: should cause a compile-time error

  typeInferencingFromMatch1 is
    A is
    B is
    C is
    D is
    E is
    abcde : choice A B C D E is

    f(x abcde) choice i32 String bool E =>
      match x
        a A => 3
        B,C => "String"
        d D => false
        e E => e

  r := typeInferencingFromMatch1.f typeInferencingFromMatch1.A
//  r2 := r ? i i32 => i==3 * => false  // NYI: does not work yet
  r2 := match r { i i32 => { i = 3 }; String,bool,typeInferencingFromMatch1.E => false }
  chck r2 "typeInferencingFromMatch1 A"
//  chck ((typeInferencingFromMatch1.f(typeInferencingFromMatch1.A) ? i i32 => i==3, * => false),"typeInferencingFromMatch1 A")  // NYI: does not work yet
  set r := typeInferencingFromMatch1.f typeInferencingFromMatch1.D
  set r2 := match r { b bool => { b <=> false }; i32, String,typeInferencingFromMatch1.E => false }
  chck r2 "typeInferencingFromMatch1 D"
  //  chck((typeInferencingFromMatch1.f(typeInferencingFromMatch1.D) ? b bool => b==false, * => false),"typeInferencingFromMatch1 D");  // NYI: does not work yet

  typeInferencingFromMatch2 is
    A is
    B is
    C is
    D is
    E is
    abcde : choice A B C D E is

    test(x abcde) is
      f(a choice i32 String bool E) unit =>
      f (match x
            a A => 3
            B,C => "String"
            d D => false
            e E => e
        )

  exit
