# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test inherticance_for_value_types
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# This test defines a feature a with an inner feature a.x that is redefined by
# two heir features b and c.  x is then called via other inner features in a: y
# (which calls x directly), z (which uses type inference for x's result), and
# q.xx, which calls z from an inner feature.
#
# These inner features are then applied to value instances of a, b, c and to ref
# instances of a, b, and c. It is checked that the correct redefined version of
# x is called in each case.
#
inheritance_for_value_types is

  exitCode := 0

  chck (msg string, b bool) unit is
    if b
      say "PASSED: $msg"
    else
      say "FAILED: $msg"
      set exitCode := 1

  a is
    x (msg string, expected i32) unit is chck msg expected=1
    y (msg string, expected i32) unit is x msg expected
    z (msg string, expected i32) =>      x msg expected
    q (msg string, expected i32) is
      xx is z msg expected

  b : a is
    redef x (msg string, expected i32) unit is chck msg expected=2

  c : a is
    redef x (msg string, expected i32) unit is chck msg expected=3

  v (v a.q) is
    v.xx
    unit

  rx (rv ref a, msg string, expected i32) unit is
    rv.x msg expected

  ry (rv ref a, msg string, expected i32) unit is
    rv.y msg expected

  rz (rv ref a, msg string, expected i32) unit is
    rv.z msg expected

  a.y "a.y" 1
  b.y "b.y" 2
  c.y "c.y" 3
  a.z "a.z" 1
  b.z "b.z" 2
  c.z "c.z" 3
  rx a "rx a" 1
  rx b "rx b" 2
  rx c "rx c" 3
  ry a "ry a" 1
  ry b "ry b" 2
  ry c "ry c" 3
  rz a "rz a" 1
  rz b "rz b" 2
  rz c "rz c" 3
  v (a.q "v a.q" 1)
  // v (b.q "v b.q" 2)   # b.q not assignment compatible to a.q
  // v (c.q "v c.q" 3)   # c.q not assignment compatible to a.q

  exit exitCode
