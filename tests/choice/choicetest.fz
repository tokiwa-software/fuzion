# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test choicetest
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

choicetest is

  // object-oriented style using subclasses
  Light ref is
  Red    ref : Light is
  Yellow ref : Light is
  Green  ref : Light is

  l1 Light := Red
  l2 Light := Green

  say "l1 is Red, l2 is Green"

  // using choice-type
  Penny   is
  Nickel  is
  Dime    is
  Quarter is

  Coin : choice
     Penny
     Nickel
     Dime
     Quarter
  is
    value_in_cents() =>
      (Coin.this ? Penny   => 1
                 | Nickel  => 5
                 | Dime    => 10
                 | Quarter => 25)

  value_in_cents(c Coin) =>
    match c
      Penny   => 1
      Nickel  => 5
      Dime    => 10
      Quarter => 25

  say "creating array:"
  a := (marrays Coin).new 10 Penny
  a[0] := Penny
  a[1] := Penny
  a[2] := Penny
  a[3] := Penny
  a[4] := Nickel
  a[5] := Dime
  a[6] := Dime
  a[7] := Quarter
  a[8] := Quarter
  a[9] := Quarter

  yak "summing array using loop: "
  sum := { for i := -1, i+1
               s := 0, s + value_in_cents a[i]
           until i >= a.length-1
         }
  say sum

  yak "summing array using iterator: "
  sum := 0;
  a.forAll (c -> set sum := sum + value_in_cents c)
  say sum

  yak "summing array using iterator and inner feature: "
  sum := 0;
  a.forAll (c -> set sum := sum + c.value_in_cents)
  say sum

  say "summing array using monoid: {a.map  (c -> c.value_in_cents)
                                     .fold i32.sum
                                   }"
