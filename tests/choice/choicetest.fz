# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test choicetest
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

choicetest is

  // object-oriented style using subclasses
  Light ref is
  Red    ref : Light is
  Yellow ref : Light is
  Green  ref : Light is

  _ Light := Red
  _ Light := Green

  say "l1 is Red, l2 is Green"

  // using choice-type
  Penny   is
  Nickel  is
  Dime    is
  Quarter is

  Coin : choice
     Penny
     Nickel
     Dime
     Quarter
  is
    value_in_cents() =>
      (Coin.this ? Penny   => 1
                 | Nickel  => 5
                 | Dime    => 10
                 | Quarter => 25)

  value_in_cents(c Coin) =>
    match c
      Penny   => 1
      Nickel  => 5
      Dime    => 10
      Quarter => 25

  say "creating array:"
  mi : mutate is
  a := mi ! ()->
    ma := (mutate.array Coin).new mi 10 Penny
    ma[0] := Penny
    ma[1] := Penny
    ma[2] := Penny
    ma[3] := Penny
    ma[4] := Nickel
    ma[5] := Dime
    ma[6] := Dime
    ma[7] := Quarter
    ma[8] := Quarter
    ma[9] := Quarter
    ma.as_array


  sum_loop =>
    yak "summing array using loop: "
    sum := { for i := -1, i+1
                 s := 0, s + value_in_cents a[i]
             until i â‰¥ a.length-1
           }
    say sum

  sum_iter =>
    yak "summing array using iterator: "
    sum := mut 0;
    a.for_each (c -> sum <- (sum.get + value_in_cents c))
    say sum

  sum_iter_inner =>
    yak "summing array using iterator and inner feature: "
    sum := mut 0;
    a.for_each (c -> sum <- (sum.get + c.value_in_cents))
    say sum

  sum_monoid =>
    say "summing array using monoid: {a.map c->c.value_in_cents
                                      .fold i32.sum
                                    }"

  sum_loop
  sum_iter
  sum_iter_inner
  sum_monoid
