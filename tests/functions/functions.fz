# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test functions
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

functions is

    # this test uses Any.hash_code, which no longer exists. So we provide it here:
    Any.hash_code =>
      for
        r := 4711, r *° 257 +° c.as_i32
        c in Any.this.as_string.utf8
      else
        r

    y(f ()->i32){}
    x0(f0 Function i32 Any i32) is
      say "here 1x0---------------"
      r1 i32 := f0.call "hallo" 3
      say "here 2x0---------------"
      r2 i32 := 42
      //r2 := f0 "welt" 5
      say "here 3x0---------------"
      say "$r1  $r2"
      say "here 1x0 done---------------"

    x(f0 (Any, i32) -> i32) is
      say "here 1x---------------"
      r1 i32 := f0.call "hallo" 3
      g (Any, i32) -> i32 := f0;
      r2 i32 := g.call "welt"  4
      // i32 r3 := f0    ("hola",5);
      // i32 r4 := g     ("mundo",5);
      // r5 := f0("Konnichiwa sekai!",7);
      say "$r1  $r2"

    say "here 1a---------------"
    x ((o, i) ->
        say "in function 1: $o"
        i*i
      )

    say "here 1b---------------"
    // all of these are equivalent:
//    x ((o, i) -> o.hash_code + i)
//    x (fun (o, i) -> o.hash_code + i)
//    x (fun (o, i) { set result := o.hash_code + i})
    x ((o, i) -> { set result := o.hash_code + i })
    x ((o, i) -> { o.hash_code + i })  // implicit assignment to result from last expression

    say "here 1c---------------"
    x (ref : Function i32 Any i32 {
        redef call(o Any, i i32) i32 is
          say "in anonymous function: $o"
          o.hash_code + i
       })

    F ref : Function i32 Any i32 is
        redef call(o Any, i i32) i32 is
          say "here F.call---------------"
          set result := o.hash_code + i
          say "here F.call done---------------"

    say "here x0 F()---------------"
    x0 F()
    say "here x0 F---------------"
    x0 F
    say "here x0 (fun i32 (Any o, i32 i) \{ set result := o.hash_code + i })---------------"
    x0 ((o, i) -> { set result := o.hash_code + i })
    say "here x F()---------------"
    x F()
    say "here x(F)---------------"
    x F

    f1(o Any, i i32) i32 is
        say "here f1 o i !!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
        o.hash_code + i
    say "here x0 (fun f1)---------------"
    x0 ((o, i)->f1 o i)
    say "here x (fun f1)---------------"
    x ((o, i)->f1 o i)
    unit
