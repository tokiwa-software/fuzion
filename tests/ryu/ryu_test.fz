# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test
#
# -----------------------------------------------------------------------

ryu_test =>

  f64_test =>

    say "ryū test f64"

    min_subnormal := 4.9406564584124654E-324
    max_subnormal := 2.2250738585072009E-308
    min_positive  := 2.2250738585072014E-308
    max_positive  := 1.7976931348623157E308
    zero          := 0.0

    numbers := [ zero,
                -zero,
                f64.positive_infinity,
                f64.negative_infinity,
                f64.quiet_NaN,
                0.3,
                1.0,
                1.5,
                f64.π,
                min_subnormal,
                max_subnormal,
                min_positive,
                max_positive,

                # these numbers are taken from test cases in
                # https://github.com/ulfjack/ryu

                1.8531501765868567E21,
                -3.347727380279489E33,
                1.9430376160308388E16,
                -6.9741824662760956E19,
                4.3816050601147837E18,
                -2.1098088986959632E16,
                -2.109808898695963E16,
                4.940656E-318,
                1.18575755E-316,
                2.989102097996E-312,
                9.0608011534336E15,
                4.708356024711512E18,
                9.409340012568248E18,
                ]

    for num0 in numbers
    do
      r := num.ryū f64
      for is_scientific in [true, false] do
        for rounding_mode in [("conservative", r.rounding_conservative), ("even", r.rounding_even)] do
          rm_name, rm := rounding_mode
          say "{if is_scientific then "scientific" else "full"}, rounding mode $rm_name: {r.as_string num0 is_scientific rm}"
      say "--"


  f32_test =>

    say "ryū test f32"

    numbers array f32 := [ f32.zero,
                -f32.zero,
                f32.positive_infinity,
                f32.negative_infinity,
                f32.quiet_NaN,
                0.3,
                1.0,
                1.5,
                f32.π,

                # these numbers are taken from test cases in
                # https://github.com/ulfjack/ryu

                1.8531501765868567E21,
                -3.347727380279489E33,
                1.943037616030838E16,
                -6.9741824662760956E19,
                4.3816050601147837E18,
                -2.109808898695963E16,
                9.0608011534336E15,
                4.708356024711512E18,
                9.409340012568248E18,
                ]

    for num0 in numbers
    do
      r := num.ryū f32
      for is_scientific in [true, false] do
        for rounding_mode in [("conservative", r.rounding_conservative), ("even", r.rounding_even)] do
          rm_name, rm := rounding_mode
          say "{if is_scientific then "scientific" else "full"}, rounding mode $rm_name: {r.as_string num0 is_scientific rm}"
      say "--"


  f64_test
  f32_test
