# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test base64
#
# -----------------------------------------------------------------------

base64_test is

  my_c : choice String (array u8) is
  mk_choice(x my_c) => x

  # RFC 4618 test vectors
  base64_test_vectors array (tuple my_c String)  :=
    [(mk_choice $"",      ""),
     (mk_choice $"f",     "Zg=="),
     (mk_choice "fo",     "Zm8="),
     (mk_choice "foo",    "Zm9v"),
     (mk_choice "foob",   "Zm9vYg=="),
     (mk_choice "fooba",  "Zm9vYmE="),
     (mk_choice "foobar", "Zm9vYmFy")]

  # Additional test vectors
  own_test_vectors array (tuple my_c String) :=
    [(mk_choice [(u8 251), 224],      "++A="),
     (mk_choice [(u8 255), 240],      "//A="),
     (mk_choice [],                   ""    ),
     (mk_choice [(u8 251), 239, 190], "++++"),
     (mk_choice (array u8 3 _->255),  "////"),
     (mk_choice (array u8 3 _->0),    "AAAA"),
     (mk_choice "123890ABCXYZabcxyz_:;>~<%&\$§!", "MTIzODkwQUJDWFlaYWJjeHl6Xzo7Pn48JSYkwqch"),
     (mk_choice """
     Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidun\
     t ut labore et dolore magna aliquyam erat, sed dia voluptua. At vero eos et accusam et justo d\
     uo dolores et ea rebum.

     Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet.""",
     """
     TG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNldGV0dXIgc2FkaXBzY2luZyBlbGl0ciwgc2VkIGRpYW0gbm9udW1\
     5IGVpcm1vZCB0ZW1wb3IgaW52aWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdXlhbSBlcmF0LCBzZWQgZG\
     lhIHZvbHVwdHVhLiBBdCB2ZXJvIGVvcyBldCBhY2N1c2FtIGV0IGp1c3RvIGR1byBkb2xvcmVzIGV0IGVhIHJlYnVtLgoKU\
     3RldCBjbGl0YSBrYXNkIGd1YmVyZ3Jlbiwgbm8gc2VhIHRha2ltYXRhIHNhbmN0dXMgZXN0IExvcmVtIGlwc3VtIGRvbG9y\
     IHNpdCBhbWV0Lg==""")]



  # ENCODING

  say """
      Testing base64 encoding..."""


  enc_test(test_vectors array (tuple my_c String), name String) =>
    for results := (Sequence (outcome String)).empty, results.concat (out:nil)
        tup in test_vectors
    do
      (plain, code_expected) := tup
      code_actual := match plain
                        str String   => encodings.base64.encode_to_string str.utf8.as_array
                        arr array u8 => encodings.base64.encode_to_string arr
      out :=
        if code_actual = code_expected
          outcome "ok"
        else
          plain_str := match plain
                          str String   => str
                          arr array u8 => $arr
          error "encode '$plain_str' produced '$code_actual' but should have been '$code_expected'"
    else
      if results ∀ (.ok)
        say "$name test vectors are encoded correctly"
      else
        say "Failed encoding $name test vectors:"
        results.filter (.is_error)
              .map (.err.as_string)
              .map ("  "+)
              .for_each say
        say ""
  enc_test base64_test_vectors "RFC 4648"
  enc_test own_test_vectors "Additional"



  # DECODING

  say """
      \n
      Testing base64 decoding..."""
  dec_test(test_vectors array (tuple my_c String), name String) =>
    for results := (Sequence (outcome String)).empty, results.concat (out:nil)
        tup in test_vectors
    do
      (plain_exp, code) := tup
      out :=
        match encodings.base64.decode code.utf8.as_array
          actual array u8 =>
            match plain_exp
              str String   =>
                if str = String.from_bytes actual
                  outcome "ok"
                else
                  error "decoding $code produced '{String.from_bytes actual}' but should have been '$str'"
              arr array u8 =>
                if arr.length=actual.length && ((arr.zip actual a,b->a=b) ∀ id)
                  outcome "ok"
                else
                  error "decoding $code produced '$actual' but should have been '$arr'"
          e error => error "decoding failed when it should not have: {e.msg}"
    else
      if results ∀ (.ok)
        say "$name test vectors are decoded correctly"
      else
        say "Failed decoding $name test vectors:"
        results.filter (.is_error)
              .map (.err.as_string)
              .map ("  "+)
              .for_each say
        say ""
  dec_test base64_test_vectors "RFC 4648"
  dec_test own_test_vectors "Additional"


  # ERROR MESSAGES

  say """
      \n
      Test error messages when decoding broken base32...
      """

  broken_enc := ["""
                 Zm9v
                 Yg==""",      # line break
                 "Zm9vYg=",    # padding to short
                 "Zm9vY==",    # invalid encoding length, invalid length
                 "Zm9vY===",   # invalid padding length / encoding length with valid overall length
                 "Zm9=vYg==",  # pad char within encoding
                 "Zm9🌏️Yg==",  # non alphabet multi byte unicode character
                 "Zm9v Yg==",  # space
                 "Zm9v;Yg=="]  # non alphabet ascii character

  for t in broken_enc do
    yak "$t: "
    say (match encodings.base64.decode_str t
        arr array u8 => String.type.from_bytes arr
        e error => e.as_string)
  say ""
