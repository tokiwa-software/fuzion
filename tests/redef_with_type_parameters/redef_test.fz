# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test redef_test
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

redef_test unit =>

  # first case, plainly redefining feature x.q
  #
  case1 =>
    # example from #1387
    x is
      q(T type) => say "x: $T"

    y : x is
      redef q(T type) => say "y: $T"

    x.q i32
    x.q String
    y.q f64
    y.q (option bool)

  case1

  # second case, redefining feature x.q whose type parameter has a
  # constraint depending on outer feature's type parameter.
  #
  case2(C type, v C) =>
    x is
      q(U type: Sequence C) => say "x: $U $C"

    y : x is
      redef q(U type: Sequence C) => say "y: $U $C"

    x.q (array C)
    x.q (list C)
    y.q (list C)

  case2 String "str"
  case2 f32 3.14


  # third case, redefining feature x.q whose type parameter has a
  # constraint depending on the same feature's type parameter.
  #
  case3 =>
    x is
      q(T type, U type: Sequence T) => say "x: $T $U"

    y : x is
      redef q(T type, U type: Sequence T) => say "y: $T $U"

    x.q i32 (Sequence i32)
    y.q f64 (Sequence f64)

  case3


  # fourth case, redefining feature x.q whose type parameter is
  # used in the formal type of a value parameter
  #
  case4 =>
    x is
      q(T type, v option T) => say "x: $T $v"

    y : x is
      redef q(T type, v option T) => say "y: $T $v"

    x.q i32 (option 43)
    y.q f64 (option 3.14)

  case4


