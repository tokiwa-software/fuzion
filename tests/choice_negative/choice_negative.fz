# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test choice_negative
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

choice_negative is

  # any produces a 'void' value that is assignable to anything.
  any => panic "trying to create void"

  cyclic1 is
    A : choice A i32 String is       // 1. should flag an error: cyclic choice

  cyclic2 is
    A ref : choice A i32 String is  // 1a. should flag an error: choice feature must not be re

  cyclic3 is
    A : choice i32 A String is      // 2. should flag an error: cyclic choice

  cyclic4 is
    A ref : choice i32 A String is  // 2a. should flag an error: choice feature must not be re

  cyclic5 is
    A : choice i32 String A is      // 3. should flag an error: cyclic choice

  cyclic6 is
    A ref : choice i32 String A is  // 3a. should flag an error: choice feature must not be re

/* NYI: cycle7..cycle12 moved to choice_negative2 since these currently are
  detected during clazz creation only, which is not performed when earlier
  phases caused errors: */

  instantiate1 is
    _ := choice i32 String  // 7. should flag an error: cannot instantiate choice

  instantiate2 is
    MyChoice : choice String bool f64 is
    _ := MyChoice  // 8. should flag an error: cannot instantiate choice

  multi1 is
    A : choice i32 bool, choice String f64 is // 9. should flag an error: choice type must inherit exactly once from choice

  multi2 is
    A : choice i32 bool is
    B : choice String f64 is
    C : A, B is // 10. should flag an error: choice type must inherit exactly once from choice

  multi3 is
    A : choice i32 bool is
    B : A, choice String f64 is // 11. should flag an error: choice type must inherit exactly once from choice

  multi4 is
    A : choice i32 bool is
    B : choice String f64, A is // 12. should flag an error: choice type must inherit exactly once from choice

  nofields1 is
    A : choice i32 String bool is // 13. should flag an error: choice type must not have any fields
      public x i32 := any

  nofields2 is
    A (x i32) : choice i32 String bool is  // 14. should flag an error: choice type must not have any fields

  nofields3 is
    A is public x i32 := any
    B : A, choice i32 String bool is // 15. should flag an error: choice type must not have any fields

  nofields4 is
    A is public x i32 := any
    B : choice i32 String bool, A is // 16. should flag an error: choice type must not have any fields

  nofields5 is
    A (x i32) is
    B : A(3) is
    C : B, choice i32 String bool is // 17. should flag an error: choice type must not have any fields

  nofields6 is
    A (x i32) is
    B : A(3) is
    C : choice i32 String bool, B is // 18. should flag an error: choice type must not have any fields

  args1 is
    A : choice i32 i32 is // 19. should flag an error: generic args to choice must be different

  args2 is
    _ choice i32 i32 := any // 20. should flag an error: generic args to choice must be different

  args3 is
    _ i32 | i32 := any  // 21. should flag an error: generic args to choice must be different

  args4 is
    S ref is
    R ref : S is
    A : choice R S is // 22. should flag an error: generic args to choice must be different

  args5 is
    S ref is
    R ref : S is
    _ choice R S := any  // 23. should flag an error: generic args to choice must be different

  args6 is
    S ref is
    R ref : S is
    _ R | S := any  // 24. should flag an error: generic args to choice must be different

  outer1(x i32) is
    A : choice i64 f32 is
      f is
        _ := x // 25. should flag an error: access to closure not permitted in choice

  outer2(x i32) is
    A is
      f is
        _ := x // 26. should flag an error: access to closure not permitted in choice
    B : A, choice i64 f32 is

  impl1 is
    x bool : choice i64 bool := true  // 27. should flag an error, choice feature must not be field

  impl2 is
    x : choice i64 bool := true  // 28. should flag an error, choice feature must not be field
  impl3 is
    x bool : choice i64 bool := any  // 29. should flag an error, choice feature must not be field
  impl4 is
    x : choice i64 bool => 3  // 30. should flag an error, choice feature must not contain code
  impl5 is
    x : choice i64 bool is say "Hello" // 31. should flag an error, choice feature must not contain code
  impl6 is
    x unit : choice i64 bool => abstract  // 32. should flag an error, choice feature must not be abstract
  impl7 is
     x unit : choice i64 bool => intrinsic  // 33. should flag an error, choice feature must not be intrinsic
  impl8 is
    x : choice i64 bool is  // ok
  impl9 is
    _ choice i64 bool := false  // ok

  issue23 is

    match 42   // 34. should flag an error, match subject must be choice
      true_  => say "T"
      false_ => say "F"

    _ := (42 ? true_ => true   // 35. should flag an error, match subject must be choice
             | false_ => false) # NYI: parentheses are currently required for this to work, see #3776


  ambiguous_assignment_to_choice_via_subtype is
    A ref is
    B ref is
    C ref : B, A is
    _ choice A B := C  // 36. should flag an error, Ambiguous assignment to ...
    t choice A B => C  // 37. should flag an error, Ambiguous assignment to ...
