# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test_asParsedType
#
# -----------------------------------------------------------------------

# test_asParsedType contains examples of types that are given as actual arguments
# to calls such that the parser first parses these types a expressions and then
# converts them to a type using `Expr.asParsedType()`
#

# constructors for types `a`, `a.b` and `A` to be used in the test cases below.
#
a is
  b is
A ref is

# feature with argument being a type parameter only to test expr.asParsedType
#  when actual argument to `x` is first parsed as an expression.
#
x(T type) => say "GOT: x $T"

# feature with arguments being a type parameter and a value of that type to check type
# inference from an actual value
#
y(T type, v T) => say "GOT: y $T"


# ------  tests using actual type arguments  ------


say "EXP: x Type of 'i32'"
x i32
say ""

say "EXP: x Type of 'a'"
x a
say ""

say "EXP: x Type of 'a.b'"
x a.b
say ""

say "EXP: x Type of 'tuple a.b a i32'"
x (a.b, a, i32)
say ""

say "EXP: x Type of 'choice a.b a i32'"
x (a.b | a | i32)
say ""

say "EXP: x Type of 'Unary String i32'"
x i32->String
x (i32->String)
say ""

say "EXP: x Type of 'Unary String a'"
x a->String
x (a->String)
say ""

say "EXP: x Type of 'Unary a.b a'"
x a->a.b
x (a->a.b)
say ""

say "EXP: x Type of 'Unary a a.b'"
x a.b->a
x (a.b->a)
say ""

say "EXP: x Type of 'Function String i32 u64'"
x (i32,u64)->String
x (i32,u64)->
  String
say ""

say "EXP: x Type of 'Function String (Sequence u64) a.b'"
x ((Sequence u64, a.b) -> String)
x ((Sequence u64, a.b) ->
  String)
say ""

say "EXP: x Type of 'choice a.b i32 (Unary (choice i32 A) String)'"
x a.b|i32|String->i32|A
x a.b|i32|String->
  i32|A
x a.b|i32|(String->i32|A)
x a.b|i32|(String->
  i32|A)
say ""

say "EXP: x Type of 'Unary (choice i32 A) (choice a.b i32 String)'"
x (a.b|i32|String)->i32|A
x (a.b|i32|String)->
  i32|A
say ""

say "EXP: x Type of 'choice (Unary i32 (choice a.b i32 String)) A'"
x ((a.b|i32|String)->i32)|A
x ((a.b|i32|String)->
        i32)|A
say ""

say "EXP: x Type of 'tuple'"
x ()
x (())
x ((()))
# x ( )   # NYI: currently does not work, no space allowed in empty tuple
x (( ))
x ((( )))
x ( ( ) )
x ( ( ( ) ) )
say ""


# ------  tests using actual value arguments and type inference  ------


f Function String (Sequence u64) a.b => (p,q)->"hi"

say "EXP: y Type of 'Function String (Sequence u64) a.b'"
y f
say ""

say "EXP: y Type of 'tuple (option unit) a.b'"
y (option unit, a.b)
say ""

say "EXP: y Type of 'f64'"
y 3.14
say ""

say "EXP: y Type of 'String'"
y "hello"
say ""

say "EXP: y Type of 'bool'"
y true
say ""

say "EXP: y Type of 'i32'"
y true?1:2
say ""

say "EXP: y Type of 'codepoint'"
y (3=4 ? true_  => "a"
       | false_ => "b")
say ""

say "EXP: y Type of 'codepoint'"
y (match 3=4
     true_  => "a"
     false_ => "b")
say ""

say "EXP: y Type of 'codepoint'"
y (if 3=4 then "a" else "b")
say ""

say "EXP: y Type of 'io.Out'"
y (io.Out.env)
say ""

say "EXP: y Type of 'Type'"
y (io.Out.type)
say ""

t := (u8 3, f32 4, i64 5)

say "EXP: y Type of 'u8'"
y t.values.0
say ""

say "EXP: y Type of 'i64'"
y t.values.2
say ""
