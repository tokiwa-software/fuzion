# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test primes
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

primes is

  primes(n i32) is // sieve using loops
    for
      a := (marrays bool).new n+1 false, a
      i := 2, i + 1
    while i <= n
      if !a[i]
        yak "$i "
        for
          j := i, j + i
        while j <= n
          a[j] := true
    unit # NYI: the loop returns the last value of index variable 'i'. Loops should not force such an automatic result upon us.
  say "Primes using loop:"; primes 1000; say

  primes2(n i32) is   // sieve using streams
    a := (marrays bool).new n+1 false
    (2..n).forAll (i ->
        if !a[i]
          yak "$i "
          (1..n).forWhile (j ->
              a[i*j] := true;
              (i*j+i) <= n
            )
      )
  say "Primes using streams:"; primes2 1000; say

  primes3(n i32) is   // sieve using streams and filters
    a := (marrays bool).new n+1 false
    (2..n)
      .filter (i -> !a[i])
      .forAll (i ->
          yak "$i "
          (1..n/i).forAll (j -> a[i*j] := true)
        )
  say "Primes using streams and filters:"; primes3 1000; say

  primes4(n i32) is  // sieve using pipes
    a := (marrays bool).new n+1 false

    (2..n) |& (i -> !a[i]) | i ->
      yak "$i "
      (1..n/i) | j -> a[i*j] := true

  say "Primes using pipes:"; primes4 1000; say
