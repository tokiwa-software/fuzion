# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test primes
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

primes is

  mi : mutate is
  mi ! ()->

    primes(n i64) => # sieve using loops
      _ :=
        for
          a := (mutate.array bool).new mi n+1 false, a
          i := i64 2, i + 1
        while i ≤ n
          if !a[i]
            yak "$i "
            _ :=
              for
                j := i, j + i
              while j ≤ n
                a[j] := true
    say "Primes using loop:"; primes 1000; say ""

    primes2(n i64) =>   # sieve using streams
      a := (mutate.array bool).new mi n+1 false
      ((i64 2)..n).for_each i->
          if !a[i]
            yak "$i "
            ((i64 1)..n).for_while j->
                a[i*j] := true;
                (i*j+i) ≤ n

    say "Primes using streams:"; primes2 1000; say ""

    primes3(n i64) =>   # sieve using streams and filters
      a := (mutate.array bool).new mi n+1 false
      ((i64 2)..n)
        .filter (i -> !a[i])
        .for_each i->
            yak "$i "
            ((i64 1)..n/i).for_each (j -> a[i*j] := true)

    say "Primes using streams and filters:"; primes3 1000; say ""

