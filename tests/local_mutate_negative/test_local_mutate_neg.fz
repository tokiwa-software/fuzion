# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test test_local_mutate_neg
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# a negative test re-using code from test_local_mutate but including a call to
# test_sum.count that is caught by static analysis
#
test_local_mutate_neg is

  # the first test uses a local variable to count the elements in a Sequence:
  #
  test_sum =>

    # our sequence to count:
    #
    l0 := [0,8,15,47,11]

    sum(l Sequence i32) =>

      # define a local type `m` to identify the mutate effect:
      #
      m : mutate is

      # count using a locally mutable variable:
      #
      count =>

        # create mutable variable s:
        s := m.env.new 0

        for e in l do

          # add e to s
          s.update a->a+e

        # unwrap the sum value in s and return it
        s.get

      # run code within an instance of m
      #
      m ! ()->
        s := m.env.new 0

        for e in l do
          s.update a->a+e

        say "inside m.go: s.get = {s.get}"
        say "inside m.go: count = {count}"

      say "using m.instate_self and count: {m ! ()->count}"

      count2 =>
        s := m.env.new 0
        for e in l do
          s.update a->a+e
        option s

      say count    # *** will cause compile-time an error, requires m to be installed

      neg_test3 =>
        s := m ! ()->count2
        say s             # *** will cause an error, requires m to be installed
        "** failed, did not panic **"

      caught_msg(msg) => "*** got '$msg' ***\nok"

      say (panic.try   neg_test3
                .catch caught_msg)

      say (panic.try   neg_test4
                .catch caught_msg)

      neg_test4 =>
        s := m ! ()->count2
        m ! ()->
          s.get <- -12    # *** will cause an error, m has changed!
          say s
        "** failed, did not panic **"

      say (panic.try   neg_test5
                .catch caught_msg)

      neg_test5 =>
        q =>
          s1 := m ! ()->count2
          m ! ()->
            s1.get <- -12    # *** will cause an error, m has changed!
            say s1
          "** failed, did not panic **"
        q

    sum l0

  test_sum
