# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test int/uint
#
#  Author: Michael Lill (michael.lill@tokiwa.software)
#
# -----------------------------------------------------------------------

int_test is

  exitCode := 0

  chck (b bool, msg string) unit is
    if b
      say "PASSED: $msg"
    else
      say "FAILED: $msg"
      set exitCode := 1


  # test basic int operations with small numbers
  for m in (i64 -5)..5 do
    for n in (i64 -5)..5 do

      chck (m=n  = (int m  = int n)) "int: m $m  = n $n"
      chck (m<=n = (int m <= int n)) "int: m $m <= n $n"
      chck (int m+n = (int m + int n)) "int: m $m + n $n"
      chck (int m-n = (int m - int n)) "int: m $m - n $n"
      chck (int m*n = (int m * int n)) "int: m $m * n $n"
      if n != 0
        chck (int m/n = (int m / int n)) "int: m $m / n $n"
        chck (int m%n = (int m % int n)) "int: m $m % n $n"
      if n >= 0
        chck (int m**n = (int m ** int n)) "int: m $m ** n $n"

    chck ("$m" = "{ints.from_i64 m}")  "int:  $m as string"

  # test basic uint operations with small numbers
  for m in (u64 0)..5 do
    for n in (u64 0)..5 do

      chck (uint m>>n  = (uint m  >> uint n)) "uint: $m  >> n $n"
      chck (uint m<<n  = (uint m  << uint n)) "uint: $m  << n $n"
      chck (m=n  = (uint m  = uint n)) "uint: $m  = n $n"
      chck (m<=n = (uint m <= uint n)) "uint: $m <= n $n"
      chck (uint m+n = (uint m + uint n)) "uint: $m + n $n"
      if m >= n
        chck (uint m-n = (uint m - uint n)) "uint: m $m - n $n"
      chck (uint m*n = (uint m * uint n)) "uint: m $m * n $n"
      if n != 0
        chck (uint m/n = (uint m / uint n)) "uint: m $m / n $n"
        chck (uint m%n = (uint m % uint n)) "uint: m $m % n $n"
      chck (uint m**n = (uint m ** uint n)) "uint: m $m ** n $n"

    chck ("$m" = "{uint m}") "uint: $m as string"


  u32_max := u32s.max.as_u64


  # test int/uint as_string around first overflow
  for m in (u32_max - 3)..(u32_max + 3) do
    chck ("$m" = "{ints.from_u64 m}")  "int:  $m as string"
    chck ("$m" = "{uint m}") "uint: $m as string"


  # test uint for numbers larger than u32.max
  for m in u32_max..(u32_max+5) do
    for n in u32_max..(u32_max+5) do

      chck (m=n  = (uint m  = uint n)) "uint: $m  = n $n"
      chck (m<=n = (uint m <= uint n)) "uint: $m <= n $n"
      chck (uint m+n = (uint m + uint n)) "uint: $m + n $n"
      if m >= n
        chck (uint m-n = (uint m - uint n)) "uint: m $m - n $n"
      if n != 0
        chck (uint m/n = (uint m / uint n)) "uint: m $m / n $n"
        chck (uint m%n = (uint m % uint n)) "uint: m $m % n $n"


  # test uint multiplication for numbers larger than u32.max
  for m in u32_max..(u32_max+5) do
    for n in (u64 0)..(u64 3) do

      chck (uint m*n = (uint m * uint n)) "uint: m $m * n $n"


  # test uint exponentation for numbers larger than u32.max
  for m in u32_max..(u32_max+5) do
    for n in (u64 0)..(u64 1) do

      chck (uint m**n = (uint m ** uint n)) "uint: m $m ** n $n"


  # test `as_int`
  chck ((i8 -3) .as_int = int -3) "i8.as_int"
  chck ((i16 -3).as_int = int -3) "i16.as_int"
  chck ((i32 -3).as_int = int -3) "i32.as_int"
  chck ((i64 -3).as_int = int -3) "i64.as_int"
  chck ((u8 3)  .as_int = int 3 ) "i8.as_int"
  chck ((u16 3) .as_int = int 3 ) "i16.as_int"
  chck ((u32 3) .as_int = int 3 ) "i32.as_int"
  chck ((u64 3) .as_int = int 3 ) "i64.as_int"


  exit exitCode
