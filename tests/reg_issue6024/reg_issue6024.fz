# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test reg_issue6024
#
# -----------------------------------------------------------------------

# test all sorts of illegal uses of `_` with actual arguments, with explicit
# empty arguments `()` or with a targert.
#
reg_issue6024 =>

  # from issue #6024:
  say <| id     _ 42                      # ok
  say <| id     (_ bla "bla" [bla]) 42    #  1. should flag an error, wrong number of args

  # more cases
  say <| id     (_)           42          # ok
  say <| id     ((((((_)))))) 42          # ok
  say <| id     unit._        42          #  2. should flag an error, type not found `_`
  say <| id     (unit._)      42          #  3. should flag an error, type not found `_`
  say <| id     _()           42          #  4. should flag an error, type not found `_`
  say <| id     (_())         42          #  5. should flag an error, type not found `_`
  say <| id     (_ a)         42          #  6. should flag an error, type not found `_`
  say <| id     (_ (a))       42          #  7. should flag an error, type not found `_`
  say <| option _ 42                      # ok
  say <| option (_ bla "bla" [bla]) 42    #  8. should flag an error, wrong number of args
  say <| option (_)           42          # ok
  say <| option ((((((_)))))) 42          # ok
  say <| option unit._        42          #  9. should flag an error, type not found `_`
  say <| option (unit._)      42          # 10. should flag an error, type not found `_`
  say <| option _()           42          # 11. should flag an error, type not found `_`
  say <| option (_())         42          # 12. should flag an error, type not found `_`
  say <| option (_ a)         42          # 13. should flag an error, type not found `_`
  say <| option (_ (a))       42          # 14. should flag an error, type not found `_`
