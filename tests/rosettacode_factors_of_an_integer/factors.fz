# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test factors
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

factors is

  print(x i32) =>
    yak " $x"

  n := 42

  yak "factors using a loop:"
  for
    x in 1..n
  do
    if n %% x
      print x
  say

  yak "factors iterating over an interval:"
  (1..n).forAll(fun (x i32) is if (n %% x) print x)
  say

  yak "factors consuming a Sequence:"
  (1..n).forAll(fun (x i32) is if (n %% x) print x)
  say

  yak "factors filtering and consuming a Sequence:"
  (1..n).filter(fun (x i32) => n %% x).forAll(fun print)
  say

  yak "factors filtering and printing a Sequence: "
  say (1..n).filter(fun (x i32) => n %% x)

  yak "factors using pipes to filter and print a Sequence: "
  (1..n) & (fun (x i32) => n %% x) | fun print
  say

  say "factors embedded in string: {(1..n) & (fun (x i32) => n %% x)}"

  (1..n) | fun (m i32) is
    say("factors of $m: " +
        ((1..m) & (fun (x i32) => m %% x)))

  // NYI: better syntax
  //
  // factors(n i32) => (1..n).filter((x) => x %% 0)
  // say factors(42)

  // NYI: also cool would be adding features to stdlib's i32
  //
  // i32 { factors => (1..outer).filter((x) => x %% 0) }
  // say 42.factors
