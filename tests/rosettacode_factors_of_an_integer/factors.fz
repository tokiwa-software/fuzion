# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test factors
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

factors is

  print(x i32) =>
    yak " $x"

  n := 42

  yak "factors using a loop:"
  for
    x in 1..n
  do
    if n %% x
      print x
  say ""

  yak "factors iterating over an interval:"
  (1..n).for_each (x -> if (n %% x) print x)
  say ""

  yak "factors consuming a Sequence:"
  (1..n).for_each (x -> if (n %% x) print x)
  say ""

  yak "factors filtering and consuming a Sequence:"
  (1..n).filter (x -> n %% x)
        .for_each (x -> print x)
  say ""

  yak "factors filtering and printing a Sequence: "
  say ((1..n).filter (x -> n %% x))

  yak "factors using filter and print a Sequence: "
  ((1..n).filter (x -> n %% x)).for_each print
  say ""

  say "factors embedded in String: {(1..n).filter (x -> n %% x)}"

  (1..n).for_each m->
    say("factors of $m: " +
        ((1..m).filter (x -> m %% x)))

  factors(n0 i32) => (1..n0).filter x->n0%%x
  say factors(42)

  # add factors to stdlib's i32
  i32.factors => (1..i32.this.val).filter x->i32.this.val%%x
  say 42.factors
