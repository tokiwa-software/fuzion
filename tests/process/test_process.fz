# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test test_process
#
# -----------------------------------------------------------------------

test_process =>


  lm : mutate is


  # create string of given byte size
  get_str(byte_size i32) =>
    ref : String is
      public redef utf8 Sequence u8 =>
        (1..byte_size)
          .map u8 (x -> codepoint.type.zero_char)


  test(str String, f () -> outcome unit) =>
    say "===  Test: $str  ==="
    match f()
      e error => say e
      * =>



  test "write to stdin of process" ()->
    (os.process.start "cat").bind p->
      _ := p.write_string "Hello from the other side."
      # closing input so cat knows we are done and must write to standard out
      say p.wait
      _ := lm ! ()->
        _ := p.with_out unit lm ()->
          say ((io.buffered lm).read_string 1E9).val



  test "read stdout of process" ()->
    (os.process.start "echo" ["eecchhoo"]).bind p->
      _ := lm ! ()->
        _ := p.with_out unit lm ()->
          say ((io.buffered lm).read_string 1E9).val



  test "pass environment variable" ()->
    (os.process.start "printenv" [] (container.map_of [("MYENVVAR", "content")])).bind p->
      _ := lm ! ()->
        _ := p.with_out unit lm ()->
          out := ((io.buffered lm).read_string 1E9)
            .val
            .split "\n"
            # for some reason on windows/msys these are included, even though we want empty env...
            .filter (l -> !(l.starts_with "HOME=" || l.starts_with "TERM="))
          say (String.join out)



  test "feed output of process 1 to process 2" ()->
    (os.process.start "echo" ["'feed me to cat'"]).bind p->
      (p | ["cat"]).bind p2->
        _ := lm ! ()->
          _ := p2.with_out unit lm ()->
            say ((io.buffered lm).read_string 1E9).val



  test "1kb argument, piped to another process" ()->
    (os.process.start "echo" ["-n", (get_str 1E3)]).bind p->
      (p | ["cat"]).bind p2->
        _ := lm ! ()->
          _ := p2.with_out unit lm ()->
            say ((io.buffered lm).read_string 1E9).val.byte_length
          say p2.wait


/* NYI Too slow

  test "100kb argument, piped to another process" ()->
    (os.process.start "echo" ["-n", (get_str 1E5)]).bind p->
      (p | ["cat"]).bind p2->
        say p2.read_string.val.byte_length
        say "exit code: {p2.wait}"
        # execute wait twice:
        say "exit code: {p2.wait}"




  test "10mb write to stdin, piped to another process"
  p := os.process.start ["cat"]
    p := spawned
    concur.threads.spawn ()->
      time.nano.sleep (time.duration.s 1)
      say "start reading"
      while
        match p.read_bytes 100
          Sequence => true
          * => false

    # NYI write should block here?
    say (p.write_bytes (get_str 1E7).utf8)
    say "exit code: {p.wait}"
  */


  test "start process that does not exist" ()->
    (os.process.start "ohQue1AheiPu4aaw").bind _->
