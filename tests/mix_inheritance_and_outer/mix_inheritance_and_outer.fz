# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test mix_inheritance_and_outer
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

mix_inheritance_and_outer is

  exitCode := 0

  chck (b bool, msg string) unit is
    if b
      say "PASSED: $msg"
    else
      say "FAILED: $msg"
      set exitCode := 1

  # x is a generic feature:
  x<A> (v A) ref is

    # y is a feature declared within x that also inherits from x
    #
    # Consequently, features of x such as v exist twice, the inherited
    # version and the outer version.
    #
    y : x<i32> 42 is

      # this should access the outer x's v field of type A
      getXThisV => x.this.v

      # this should access the inherited x.v field of type i32
      getInheritedV => v

      # NYI: if renaming is supported, we could change the inherited v's name and access
      # the outer v without qualification.

  say x<string>("Hello").v
  say x<string>("Hello").y.v
  say x<string>("Hello").y.getXThisV
  say x<string>("Hello").y.getInheritedV
  z := x<string>("Hello").y
  say z.v
  say z.getXThisV
  say z.getInheritedV

  chck (  x<string>("Hello").v               = "Hello") "x<string>.v"
  chck (  x<string>("Hello").y.v             = 42     ) "x<string>.y.v"
# chck (  x<string>("Hello").y.getXThisV     = "Hello") "x<string>.y.getXThisV"      # NYI: causes type error!
  chck ("{x<string>("Hello").y.getXThisV}"   = "Hello") "x<string>.y.getXThisV"
  chck (  x<string>("Hello").y.getInheritedV = 42     ) "x<string>.y.getInheritedV"

  fuzion.std.exit exitCode
