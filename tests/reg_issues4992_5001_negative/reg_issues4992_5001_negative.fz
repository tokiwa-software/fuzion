# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test reg_issue4992
#
# -----------------------------------------------------------------------

# Test that constraint on type parameter may contain `.this` type
#
reg_issues4992_5000 =>

  # original code from #4992 of failing case
  #
  case1 =>
    x is
      type.i(U type : tuple unit x.this) =>
        say "case1 $U"

    y(X type : x) =>
      X.i (tuple unit X)

    z : x is

    y x
    y z

  # original code from #4992 of (accidentally) successful case
  #
  case2 =>

    x is
      type.i(U type : tuple x.this) =>
        say "case2 $U"

    y(X type : x) =>
      X.i (tuple X)

    z : x is

    y x
    y z


  # negative test: using `x.this` directly as constraint is not allowed
  #
  case3 =>
    x is
      type.i(U type : x.this) =>  # 1. should flag an error: .this-type not allowed directly

    y(X type : x) =>
      X.i X

    z : x is

    y x
    y z


  # negative test: count of type parameters worng
  #
  case4 =>
    x is
      type.i(U type : tuple i32) =>

    y(X type : x) =>
      X.i (tuple i32 bool)  # 2. should flag an error: wrong number of type parameters

    z : x is

    y x
    y z


  # negative test: incompatible type parameter given for `x.this`
  #
  case5 =>
    x is
      type.i(U type : tuple unit x.this) =>

    y(X type : x) =>
      X.i (tuple unit true_) # 3. should flag an error: wrong type parameter `true_` instead of `X`

    z : x is

    y x
    y z


  # original code from #4992, but using normal instead of type feature
  #
  case1b =>
    x is
      i(U type : tuple unit x.this) =>
        say "case1b $U"

    y(X type : x, v X) =>
      v.i (tuple unit X)

    z : x is

    y x
    y z

  # original code from #4992 of (accidentally) successful case, but using normal instead of type feature
  #
  case2b =>

    x is
      i(U type : tuple x.this) =>
        say "case2b $U"

    y(X type : x, v X) =>
      v.i (tuple X)

    z : x is

    y x
    y z


  # original code from #5001
  #
  case6 =>
    x(A, B, C type) is
      type.i(U type : tuple A B C, v U) =>
        a A := v.values.0
        b B := v.values.1
        c C := v.values.2
        say a
        say b
        say c

    y(X type : x Any unit f32) =>
      X.i (tuple i32 i32 i32) (42,43,44)  # 4. should flag an error: wrong type parameter `tuple i32 i32 i32` instead of `tuple Any unit f32`

    z : x Any unit f32 is
    y z


  # minimalistic example for #5001
  #
  case7 =>
    box(B type) is
    x(A type) is
      type.i(U type : box A) =>
    (x f32).i (box i32)  # 5. should flag an error: wrong type parameter `box i32` instead of `box f32`


  # tests for #4992
  case1
  case2
  case3
  case4
  case5
  case1b
  case2b

  # tests for #5001
  case6
  case7
