# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test catch_postcondition
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

catch_postcondition is


  # test feature will cause postcondition failure if called with types
  # smaller than 64 bits:
  #
  test(T type : integer) =>

    # duplicate x
    #
    double(x T)
      post
        equals result-x x
    =>
      x +^ x

    yak "trying $T... "
    for v := T.one, double v
        i in 0..50
    else
      $v


  # -------------------------------

  /*

    Java code to explain what we are trying to do in Fuzion here:

        String res;
        try
          {
            res = test<i32>();
          }
        catch (PostConditionError e)
          {
            System.out.println("*** failed: "+e+" ***");
            res = test<u64>();
          }
        System.out.println(res);

    The following are several attempts to find a useful syntax for Fuzion

  */

  # -------------------------------

  # alias for brevity
  #
  rt := fuzion.runtime

  # -------------------------------

  say "install our own fault handler that prints message and tries again:"

  say (fuzion.runtime.post_fault.instate
        String
        (rt.post_fault msg->
          say "postcondition failed: $msg"
          fuzion.runtime.post_fault.abort)
        (test i32)
        (_ -> test u64))

  say ""

  # -------------------------------

  # convenience feature to install post_fault handler:
  #
  handle_post(T type) is

    # try and catch to be redefined by user
    #
    try               T => abstract
    catch(msg String) T => abstract

    # use local mutate to store msg passed to `cause`
    lm : mutate is

    res := lm ! ()->
        m := lm.env.new (option String nil)
        (fuzion.runtime.post_fault.instate
          T
          (rt.post_fault msg->
            m <- msg
            fuzion.runtime.post_fault.abort)
          try
          (_ -> catch m.get.get))


  # -------------------------------

  say "using convenience feature with `try` and `catch`"

  y : handle_post String is
    redef try             => test i32
    redef catch(s String) => {say "*** failed: $s ***"; test u64}

  say y.res

  say ""

  # -------------------------------

  say "using anonymous instance of convenience feature with `try` and `catch`"

  say (ref : handle_post String is
        redef try =>
          test i32
        redef catch(s String) =>
          say "*** failed: $s ***"
          test u64
      ).res

  say ""

  # -------------------------------

  say "using convenience feature for repeated `try` and `catch` using mutable var and recursion"

  tries array ()->String := [ (() -> test i32), (() -> test i16), (() -> test i64) ]

  c0 := mut 0

  z : handle_post (option String) is
    redef try option String  => tries[c0].call
    redef catch(s String) option String => {say "*** failed: $s ***"; c0 <- c0.get + 1; if c0.get < tries.count then z.res else nil}

  say z.res

  say ""

  # -------------------------------

  say "using convenience feature for repeated `try` and `catch` using loop"

  for c in tries.indices do
    h : handle_post (option String) is
      redef try option String  => tries[c].call
      redef catch(s String) option String => {say "*** failed: $s ***"; nil}
    r := h.res
  until r??
    say r
  else
    say "*** all failed ***"

  say ""

  # -------------------------------

  # helper feature that allows Java-like try-catch syntax for post conditions
  #
  #   res := try_post ()->
  #             code
  #          .catch s->
  #             handle post condition failure `s`
  #
  # or even
  #
  #   res := try_post code || (s->handle post condition failure `s`)
  #
  try_post(T type, code_try ()->T) is

    # define code to execute in case of fault and run code
    #
    catch(code_catch String->T) =>
      h : handle_post T is
        redef try             => code_try()
        redef catch(s String) => code_catch s
      h.res

    # alternative implementation of catch using anonymous feature
    #
    catch1(code_catch String->T) =>
      (ref : handle_post T is
        redef try             => code_try()
        redef catch(s String) => code_catch s).res

    # infix alias for catch
    #
    infix || (code_catch String->T) => catch code_catch

  # -------------------------------

  say "using try_post code .catch code"

  res => try_post ()->
           test i32
         .catch s->
           say "*** failed: $s ***"
           test u64
  say res

  say ""

  # -------------------------------

  say "using try_post code || code"

  res2 => try_post (test i32) || (s->say "*** failed: $s ***"; test u64)
  say res2

  say ""

  # -------------------------------

  say "using try_post for repeated `try` and `catch` using loop"

  for
    c in tries.indices
  do
    r := try_post ()->
           option tries[c].call
         .catch s->
           say "*** failed: $s ***"
           nil
  until r??
    say r
  else
    say "*** all failed ***"

  say ""

  # -------------------------------

  say "using fuzion API to catch post condition failure"

  for
    c in tries.indices
  do
    r := fuzion.runtime.post_fault.try ()->
           option tries[c].call
         .catch s->
           say "*** failed: $s ***"
           nil
  until r??
    say r
  else
    say "*** all failed ***"

  say ""

  # -------------------------------

  say "using fuzion API to catch fault"

  for
    c in tries.indices
  do
    r := fuzion.runtime.fault.try ()->
           option tries[c].call
         .catch s->
           say "*** failed: {s.0} {s.1} ***"
           nil
  until r??
    say r
  else
    say "*** all failed ***"

  say ""

  # -------------------------------

  say "using default post handler, will crash:"

  say (test i32)
  say (test u64)  # not reached!
