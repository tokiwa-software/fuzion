# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test test_local_mutate
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# a test for creating and installing a mutate effect and then using this to create
# some data that is then returned as an immutable object
#
test_local_mutate is

  # the first test uses a local variable to count the elements in a Sequence:
  #
  test_sum =>

    # our sequence to count:
    #
    l := [0,8,15,47,11]

    sum(l Sequence i32) =>

      # define a local type `m` to identify the mutate effect:
      #
      m : mutate is

      # count using a locally mutable variable:
      #
      count =>

        # create mutable variable s:
        s := m.env.new 0

        for e in l do

          # add e to s
          s.update a->a+e

        # unwrap the sum value in s and return it
        s.get

      # run code within an instance of m
      #
      m.go (()->
        s := m.env.new 0

        for e in l do
          s.update a->a+e

        say "inside m.go: s.get = {s.get}"
        say "inside m.go: count = {count}"
        )

      say "using m.go and count: {m.go ()->count}"

      count2 =>
        s := m.env.new 0
        for e in l do
          s.update a->a+e
        option s

      # NYI: move this into negative test
      if envir.args.count = 2
        say count    # *** will cause an error, requires m to be installed

      # NYI: move this into negative test
      if envir.args.count = 3
        s := m.go ()->count2
        say s        # *** will cause an error, requires m to be installed

      # handler for negative tests that cause panic:
      #
      my_panic : Panic_Handler is
        do_panic(msg String) =>
          say "*** got '$msg' ***"

      say (my_panic.use ()->neg_test4 ()->"ok")

      neg_test4 =>
        s := m.go ()->count2
        m.go ()->
          s.get <- -12    # *** will cause an error, m has changed!
          say s
        "** failed, did not panic **"

      say (my_panic.use ()->neg_test5 ()->"ok")

      neg_test5 =>
        q =>
          s1 := m.go ()->count2
          m.go ()->
            s1.get <- -12    # *** will cause an error, m has changed!
            say s1
          "** failed, did not panic **"
        q

    sum l

  test_sum


  # quicksort using array created via local mutate effect
  #
  test_quicksort =>

    quicksort(T type: property.orderable, data Sequence T) array T is
      c := data.count
      if c = 0
        []
      else
        m : mutate is

        # execute code with mutate effect `m`:
        m.go (()->
          swap(i,j i32) =>
            t := arr[i]
            arr[i] := arr[j]
            arr[j] := t

          partition(l, r, pivot i32) =>
            pv := arr[pivot]
            swap pivot r
            for
              a := l, a + (sw ? 0 : 1)
              b := r, b - (sw ? 1 : 0)
              sw := arr[a] > pv
            while a < b
              if sw
                swap a b-1
            else
              swap b r
              b

          qs(l, r i32) unit is # =>  does not work
            if l < r
              pi := partition l r (l + r)/2
              qs l pi-1
              qs pi+1 r

          arr := m.env.array T c data[0]
          for i in arr.indices do
            arr[i] := data[i]

          qs 0 c-1
          arr.as_array)


    say (quicksort [0, 8, 15, 47, 11])
    for i in -1..10 do
      say (quicksort i32 0..i)
      say (quicksort i32 (i..0 : -1))

  test_quicksort


  # first try to privde a doubly-linked ring
  #
  test_ring1 =>

    Cell(T type, LM type : mutate, data T) ref is
      n := LM.env.new (Cell T LM) Cell.this
      p := LM.env.new (Cell T LM) Cell.this
      link(ne, pr Cell T LM) is
        n <- ne
        p <- pr

      next => n.get
      prev => p.get

    ring(T type, from Sequence T)
    pre
      !from.is_empty
    =>
      m : mutate is

      ring2(from list T) Cell T m is   # NYI '=>' causes error cyclic type inference
        c := Cell T m from.head.get
        match from.tail
          nil    => c
          t Cons => f := ring2 t
                    l := f.p.get
                    c.link f l
                    f.link f.n.get c
                    l.link c l.p.get
        c

      ring3(from list T) Cell T m is
        r := ring2 from

        for
          i in 1..10
          e := r, e.n.get
        do
          say "$i: {e.data}"

        for cur := r, cur.next
        while cur.n.open do
          cur.n.close
          cur.p.close
        r

      r := m.go ()->(ring3 from.as_list)
      say "left mutate environment m"
      for
        i in 1..10
        e := r, e.next
      do
        say "$i: {e.data}"
      r

    r := ring [0,1,2,3]

  test_ring1


  # second try to privde a doubly-linked ring and to return it as a type
  # 'ring' that does not refer to any mutate effect:
  #
  test_ring2 =>

    # abstract type for 'ring'
    #
    Ring(T type) ref is
      next, prev Ring T is abstract
      data T is abstract

      redef as_string =>
        for
          s := "[ ", s + "{e.data} <-> "
          # e2 := r, e2.next    # NYI causes crash!
          e Ring T := Ring.this, e.next
          i in 0..3
        else
          s + " ... ]"

    # ring type for mutable rings
    #
    # on call to `Mut_Ring LM T data` creates a minimal ring consisting of only
    # one single cell.  To create larger rings, you can either call `insert` to
    # add single cells, or `merge` to merge two rings into one larger ring.
    #
    Mut_Ring(# mutate effect to be used to create mutable variables
             LM type : mutate,

             # type of data stored in ring cells
             redef T type,

             # the data stored in this cell.
             data T) ref : Ring T is


      # mutable references to next and previous. Initalizes to refer to
      # Mut_Ring.this to form a minimal ring
      #
      private n := LM.env.new (Mut_Ring LM T) Mut_Ring.this
      private p := LM.env.new (Mut_Ring LM T) Mut_Ring.this


      # short-hand features to get the mutable references from `n` and `p`
      #
      next => n.get
      prev => p.get


      # add a cell containing `data` to this ring.
      #
      # Mut_Ring.this is 'a':
      #
      #  +-> a <-> b <-> c ... m <-+
      #  |                         |
      #  +-------------------------+
      #
      # the resulting ring then will have a new cell `n` containing `data`
      # with this shape:
      #
      #  +-> a <-> b <-> c ... m <-> n <-+
      #  |                               |
      #  +-------------------------------+
      #
      insert(data T) =>
        r2 := Mut_Ring LM T data
        merge r2


      # merge two rings as follows:
      #
      # Mut_Ring.this is 'a':
      #
      #  +-> a <-> b <-> c ... m <-+
      #  |                         |
      #  +-------------------------+
      #
      # the second ring `n` is
      #
      #  +-> n <-> o <-> p ... z <-+
      #  |                         |
      #  +-------------------------+
      #
      # the resulting ring then will be:
      #
      #  +-> a <-> b <-> c ... m <-> n <-> o <-> p ... z <-+
      #  |                                                 |
      #  +-------------------------------------------------+
      #
      merge(n Mut_Ring LM T) =>
        a := Mut_Ring.this
        m := a.p.get
        z := n.n.get
        a.p <- z
        z.n <- a
        m.n <- n
        n.p <- m

      # freeze this ring, i.e., turn all references into immutable values
      #
      freeze =>
        if n.open
          n.close
          p.close
          next.freeze

    # create a ring from the elements of a sequence
    #
    create_ring(T type, from Sequence T)
    pre
      !from.is_empty
    =>
      # define mutate context to be used
      m : mutate is

      # create ring, called with the env set to an instance of `m`.
      #
      create_ring2(from list T) Ring T is
        c := Mut_Ring m T from.head.get
        from.as_list.tail.for_each (x->c.merge (Mut_Ring m T x))
        c.freeze
        c

      r := m.go ()->(create_ring2 from.as_list)
      say "left mutate environment m"
      say r
      for
        i in 1..10
        e := r, e.next
        b := r, b.prev
      do
        say "$i: {e.data} {b.data}"
      r

    r := create_ring [0,1,2,3]

  test_ring2
