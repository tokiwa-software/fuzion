# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test lib_time_date_time
#
# -----------------------------------------------------------------------

lib_time_date_time =>

  a := time.date_time 2024 1 30 10 30 12 1E8
  b := time.date_time 2024 1 30 10 30 12 1E7
  c := time.date_time 2023 1 30 10 30 12 1E8

  say "a = $a"
  say "b = $b"
  say "c = $c"

  say "a is_after a = {a > a}"
  say "a is_after b = {a > b}"
  say "a is_after c = {a > c}"
  say "b is_after a = {b > a}"
  say "b is_after b = {b > b}"
  say "b is_after c = {b > c}"
  say "c is_after a = {c > a}"
  say "c is_after b = {c > b}"
  say "c is_after c = {c > c}"

  say "a is_before a = {a < a}"
  say "a is_before b = {a < b}"
  say "a is_before c = {a < c}"
  say "b is_before a = {b < a}"
  say "b is_before b = {b < b}"
  say "b is_before c = {b < c}"
  say "c is_before a = {c < a}"
  say "c is_before b = {c < b}"
  say "c is_before c = {c < c}"

  say "time.date_time.from_seconds 1758620705 = time.date_time 2025 9 23 9 45 5 0 = {time.date_time.from_seconds 1758620705 = time.date_time 2025 9 23 9 45 5 0}"

  one_day_eleven_seconds := ((u64 60)*60*24)+11
  for i in (u64 0)..1E6 : one_day_eleven_seconds do
    say <| time
      .date_time
      .from_seconds i

  thirty_days_forty_seven_seconds := ((u64 60)*60*24*30)+47
  for i in (u64 0)..1E7 : thirty_days_forty_seven_seconds do
    say <| time
      .date_time
      .from_seconds i
