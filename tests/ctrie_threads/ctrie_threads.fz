# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test ctrie_threads
#
#  Author: Michael Lill (michael.lill@tokiwa.software)
#
# -----------------------------------------------------------------------

ctrie_threads is

  num_threads := 8
  keys := 1..999


  in_threads(code i32->unit) =>
    (array num_threads t->
      concur.thread.spawn ()->
        code t
      ).for_each t->t.join


  test1 =>
    say "test1: in {$num_threads} threads, adding 999 keys, removing every third key and taking a snapshot at key=500."

    ctrie := (lock_free.map i32 i32).empty

    empty := ctrie.snapshot true

    in_threads t->
      for k in keys
          snap := ctrie.snapshot true, if k=500 then ctrie.snapshot true else snap
          snap_size := snap.size, (if k!=500 && snap_size != snap.size then panic "snapshot changed, was $snap_size is {snap.size}" else snap.size)
      do
        ctrie.add k t
        if k % 3 = 0
          _ := ctrie.remove k

    say "empty snapshot size: {empty.size}" # should still be zero
    say "ctrie size: {ctrie.size}" # the number of the beast = 666

    # all keys which are multiples of 3 should have been removed
    say "all keys multiple of three removed: {(ctrie.items âˆ€ (x -> x.values.0 % 3 != 0))}"

    if ((envir.args.nth 1).or_else "")="-debug"
      say "==="
      say (ctrie.items.map x->"{x.values.0} was inserted by thread {x.values.1}")
      say "==="
      # NYI: BUG: #2967
      # say ((ctrie.items.map x->x.values.1).group_by id)


  test2(take_snapshots bool) =>
    say "test2: in {$num_threads} threads, {if take_snapshots then "adding keys while taking snapshots, removing keys while taking snapshots." else "add keys, remove keys."}"

    ctrie := (lock_free.map i32 i32).empty

    in_threads t->
      for k in keys do

        ctrie.add k t

        if take_snapshots && k%100 = 0
          snap := ctrie.snapshot true
          s1 := snap.size
          s2 := snap.size
          if s1 != s2
            panic "snap size changed: $s1 $s2"
          if !(k <= s1 <= 999)
            panic "illegal snap size: $k $s1"


    in_threads _->
      for k in keys.take 900 do

        _ := ctrie.remove k

        if take_snapshots && k%100 = 0
          snap := ctrie.snapshot true
          s1 := snap.size
          s2 := snap.size
          if s1 != s2
            panic "snap size changed: $s1 $s2"
          if !(0 <= s1 <= 999-k)
            panic "illegal snap size: $k $s1"

    say ctrie.size # 999-900 = 99
    say (ctrie.items.map x->x.0).sort.as_string_all


  test3 =>
    say "test3: in {$num_threads} threads, add non-overlapping keys, then remove key, test if added/removed."

    ctrie := (lock_free.map i32 i32).empty

    in_threads t->
      for k in keys do
        kt := (1000*t)+k

        ctrie.add kt kt
        if ctrie[kt].is_nil
          panic "added key $kt not present"

        if ctrie[kt].get != kt
          panic "added key/value does not match $kt != {ctrie[kt].get}"

        if k%100 = 0
          _ := ctrie.snapshot true

        _ := ctrie.remove kt
        if ctrie[kt].exists
          panic "removed key $kt still present"

        if k%100 = 0
          _ := ctrie.snapshot true

        ctrie.add kt kt


  test4 =>
    say "test4: in {$num_threads} threads, add non-overlapping keys, then remove key, test if added/removed."

    ctrie := (lock_free.map i32 i32).empty

    in_threads t->
      for k in keys do
        kt := (1000*t)+k

        s := if k%5=0 then ctrie.snapshot true else ctrie
        ctrie.add kt kt
        if ctrie[kt].is_nil
          panic "added key $kt not present"
        if k%5=0 && s[kt].exists
          panic "added key $kt to snapshot"

        s2 := if k%5=0 then ctrie.snapshot true else ctrie
        match ctrie.remove kt
          nil => panic "$kt not found"
          i32 =>
        if ctrie[kt].exists
          panic "removed key $kt still present"
        if k%5=0 && s2[kt].is_nil
          panic "removed key $kt from snapshot"


  test1
  test2 false
  # NYI: BUG: snapshot do not work yet
  # test2 true
  # NYI: BUG: snapshot do not work yet
  # test3
  # NYI: BUG: test4 # this tests fails almost reliably
