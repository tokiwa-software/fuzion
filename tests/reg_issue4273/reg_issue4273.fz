# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test reg_issue4247
#
# -----------------------------------------------------------------------


# first example from #4273
#
# using `e.this` as reult type
#
case1 =>
  e is
    me => e.this
    type.x(a e.this) => $a.me   # 1. should flag an error: `Call has an ambiguous result type...`

  p ref : e is

  f : p is

  r := p.type.x f
  say r


# modified first example from #4273
#
# using normal feature `x` instead of type feature
#
case2 =>
  e is
    me => e.this
    x(a e.this) => $a.me

  p ref : e is

  f : p is

  # _ := p.x f     # Flags an error during front end: `Call has an ambiguous argument type...`


# second example from #4273
#
# using `option e.this` as reult type
#
case3 =>
  e is
    me => option e.this
    type.x(a e.this) => $a.me   # 2. should flag an error: `Call has an ambiguous result type...`

  p ref : e is

  f : p is

  r := p.type.x f
  say r


# extra example used for debugging this issue
#
# using `option d.this` as reult type and abstract feature implementation.
#
case4 =>
  d ref is
    me option d.this => abstract
    s String => abstract
  e : d is
    redef me => option e.this   # 3. should flag an error: `Call has an ambiguous result type...`
    redef s => $me              # 4. should flag an error: `Call has an ambiguous result type...`

  p ref : e is

  f : p is

  r1 p := f
  say r1.s
  r2 p := p
  say r2.s
  r3 d := e
  say r3.s


case1
case2
case3
case4
