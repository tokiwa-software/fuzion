# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test inheritance
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

inheritance is


  curid := mut 0
  id i32 =>
    res := curid.get
    curid <- res + 1
    res

  A ref is
    ident i32 := id
    say "A's body$ident"
    x unit => abstract
  B ref : A is
    say "B's body$ident"
    redef x unit => say "B.x"
    xb unit => say "B.xb"
  C ref : A is
    redef x unit => say "C.x"
    xc unit => say "C.xc"
  D ref : B, C is
    redef x unit => say "D.x"
  E ref : D is
    redef x  unit => say "E.x"
    redef xb unit => say "E.xb"
    redef xc unit => say "E.xc"
  bi B := B
  ci C := C
  aa A := bi
  bi.x
  ci.x
  aa.x
  set aa := ci
  aa.x
  di D := D
  ei E := E
  say "Calling non-redefed multiple"
  di.x
  di.xb
  di.xc
  say "Calling redefed multiple"
  ei.x
  ei.xb
  ei.xc
  say "Calling redefed multiple from non-redefed static "
  set di := ei
  di.x
  di.xb
  di.xc
  set bi := di
  set ci := di
  bi.x
  bi.xb
  ci.x
  ci.xc
  set aa := ei
  aa.x


  // mixing value and ref types along the inheritance chain:
  mixValAndRef =>
    // simple test: value type inheriting form ref type:
    AA ref is
      x := 3
      p => print
      print =>
        say x
    BB : AA is
    b := BB
    b.p // all type info is static in this call

    c := 1000
    count => set c := c + 1; c # NYI: this should cause an ambiguous semicolon error. Does it do so?

    // nested features with a ref (P, Q, R, S) and a value (Pv, Qv, Rv, Sv)
    // variant and calls to features of the corresponding outer features.
    P ref is
      pid := count
      p => print
      print => say pid
      Q ref is
        q => {yak "q"; p}
        R ref is
          r => {yak "r"; p}
          S ref is
            s => {yak "s"; p}
          Sv : S is
        Rv : R is
      Qv : Q is
    Pv : P is

    say "only refs:"

    P.p
    P.Q.q
    P.Q.R.r
    P.Q.R.S.s // #1004

    say "only values:"

    Pv.p
    Pv.Qv.q
    Pv.Qv.Rv.r
    Pv.Qv.Rv.Sv.s // #1008

    say "mixed refs and values:"

    P.p
    P.Q.q
    P.Q.R.r
    P.Q.R.S.s
    P.Q.R.Sv.s
    P.Q.Rv.r
    P.Q.Rv.S.s
    P.Q.Rv.Sv.s  // #1016
    P.Qv.q
    P.Qv.R.r
    P.Qv.R.S.s
    P.Qv.R.Sv.s
    P.Qv.Rv.r
    P.Qv.Rv.S.s
    P.Qv.Rv.Sv.s
    Pv.p
    Pv.Q.q
    Pv.Q.R.r
    Pv.Q.R.S.s
    Pv.Q.R.Sv.s
    Pv.Q.Rv.r
    Pv.Q.Rv.S.s
    Pv.Q.Rv.Sv.s
    Pv.Qv.q
    Pv.Qv.R.r
    Pv.Qv.R.S.s
    Pv.Qv.R.Sv.s
    Pv.Qv.Rv.r
    Pv.Qv.Rv.S.s
    Pv.Qv.Rv.Sv.s // #1038
  mixValAndRef


  // Inheritance from outer: stream.before inherits from stream:
  (1..).before (x -> x > 100)
       .before (x -> x > 40)
       .before (x -> x > 20)
       .for_each (x -> say x)

  // test for recursive inheritance/outer relation with refs
  strm.u.print
  strm.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.print
  strm ref is
    u ref : strm is
    print =>
      say "strm.print"

  // This works even though strm1 is a value type, but the inner feature u that inherits from strm1 is a ref
  strm1.print
  strm1.u.print
  strm1.u.u.print
  strm1.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.print
  strm1 is
    u ref : strm1 is
    print =>
      say "strm1.print"

  // this should work since it uses ref types
  strm5.u.print
  strm5.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.print
  strm5 ref is
    u ref : strm5Z is
    print =>
      say "strm5.print"
  strm5X ref : strm5  is
  strm5Y ref : strm5X is
  strm5Z ref : strm5Y is

  /* simple inheritance of outer feature example: */
  simple_inheritance =>
    cnt := 0
    _ := Z
    Z ref is
      BB ref : Z is
      if cnt < 10
        set cnt := cnt + 1
        _ := BB
  simple_inheritance

  /* more complex inheritcane of outer feateature, with one more level of nesting: */
  tricky_Inheritance =>
    cnt := 0
    _ := ZZ
    ZZ ref is
        say "tricky_Inheritance.ZZ: $cnt"
        BB ref is
          q ref : ZZ is
            say "tricky_Inheritance.ZZ.B.q: $cnt"
        if cnt < 10
          set cnt := cnt + 1
          _ := BB.q
  tricky_Inheritance

  /* calling inherited feature y from arguments to parent class D(y), feature y is inherited from value feature A */
  call_inherited_from_parent_args =>
    chck (b bool, msg String) unit =>
      if b
        say "PASSED: $msg"
      else
        say "FAILED: $msg"
        _ := set_exit_code 1

    cnt_A_y := 0
    cnt_C_y := 0
    AA is
      x is _ := y
      y i32 =>
        set cnt_A_y := cnt_A_y + 1
        say "inherit.A.y"
        0

      CC ref : AA is
        redef y i32 =>
          set cnt_C_y := cnt_C_y + 1
          say "inherit.C.y"
          1
      DD(i i32) is
        say i
        chck i=1 "call to y in arguments must be performed on heir instance"

      BB ref : x, CC, DD BB.this.y is

    _ := AA.BB
    chck cnt_A_y=1 "inherits calls to x must be performed in outer feature A"
    chck cnt_C_y=1 "C.y must be called exactly once as argument to parent D(y)"
  call_inherited_from_parent_args

  /* calling inherited feature y from arguments to parent class D(y), feature y is inherited from ref feature A */
  call_inherited_from_parent_args2 =>
    chck (b bool, msg String) unit =>
      if b
        say "PASSED: $msg"
      else
        say "FAILED: $msg"
        _ := set_exit_code 1

    cnt_A_y := 0
    cnt_C_y := 0
    AA ref is
      x is _ := y
      y i32 =>
        set cnt_A_y := cnt_A_y + 1
        say "inherit.A.y"
        0

      CC ref : AA is
        redef y i32 =>
          set cnt_C_y := cnt_C_y + 1
          say "inherit.C.y"
          1
      DD(i i32) is
        say i
        chck i=1 "call to y in arguments must be performed on heir instance"

      BB ref : x, CC, DD BB.this.y is

    _ := AA.BB
    chck cnt_A_y=1 "inherits calls to x must be performed in outer feature A"
    chck cnt_C_y=1 "C.y must be called exactly once as argument to parent D(y)"
  call_inherited_from_parent_args2

  /* check dynamic binding on call to A.x if ref feature B inherits from value feature A */
  check_dyn_binding_when_inheriting_value =>
    AA is
      a => x
      x => {say "A.x: FAILED."; _ := set_exit_code 1}
    BB ref : AA is
      a
      redef x unit => say "B.x: PASSED."
    _ := BB
  check_dyn_binding_when_inheriting_value

  /* calling inherited feature x from arguments to parent class D(x), feature x is inherited from value feature A and calls A.y which is redefined in C */
  call_inherited_from_parent_args3 =>
    chck (b bool, msg String) unit =>
      if b
        say "PASSED: $msg"
      else
        say "FAILED: $msg"
        _ := set_exit_code 1

    cnt_A_y := 0
    cnt_C_y := 0
    AA is
      x is _ := y
      y i32 =>
        set cnt_A_y := cnt_A_y + 1
        say "inherit.A.y"
        0

      CC ref : AA is
        redef y i32 =>
          set cnt_C_y := cnt_C_y + 1
          say "inherit.C.y"
          1
      DD(i i32) is
        say i
        chck i=1 "call to y in arguments must be performed on heir instance"

      BB ref : x, CC, DD BB.this.y is

    _ := AA.BB
    chck cnt_A_y=1 "inherits calls to x must be performed in outer feature A"
    chck cnt_C_y=1 "C.y must be called exactly once via x as argument to parent D(x)"
  call_inherited_from_parent_args3

  inheritOuter =>
    Acnt := 0
    Bcnt := 0
    Ccnt := 0
    Dcnt := 0
    Ecnt := 0
    Fcnt := 0

    AA ref is
      set Acnt := Acnt + 1
      BB ref is
        set Bcnt := Bcnt + 1
        CC ref is
          set Ccnt := Ccnt + 1
          DD ref is
            set Dcnt := Dcnt + 1
            EE ref is
              set Ecnt := Ecnt + 1
              FF ref is
                set Fcnt := Fcnt + 1
                F3 ref : FF is
              E3 ref : EE is
            D3 ref : DD is
          C3 ref : CC is
        B3 ref : BB is
      A3 ref : AA is
    A1 ref : AA is
    B1 ref : A1.BB is
    C1 ref : B1.CC is
    D1 ref : C1.DD is
    E1 ref : D1.EE is
    F1 ref : E1.FF is
    A2 ref : AA.A3 is
    B2 ref : A2.BB.B3 is
    C2 ref : B2.CC.C3 is
    D2 ref : C2.DD.D3 is
    E2 ref : D2.EE.E3 is
    F2 ref : E2.FF.F3 is
    _ := A1
    _ := B1
    _ := C1
    _ := D1
    _ := E1
    _ := F1
    _ := A2
    _ := B2
    _ := C2
    _ := D2
    _ := E2
    _ := F2
    chck "test Acnt" Acnt 18
    chck "test Bcnt" Bcnt 15
    chck "test Ccnt" Ccnt 12
    chck "test Dcnt" Dcnt 9
    chck "test Ecnt" Ecnt 6
    chck "test Fcnt" Fcnt 3
    chck(msg String, v, expected i32) =>
      if v = expected
        say "$msg: PASSED."
      else
        say "$msg: $v != $expected *** FAILED."
        _ := set_exit_code 1
  inheritOuter

  # regression test from issue #2058 that failed for C and JVM backends
  reg_test_2058 =>

    chck "s.v.hi"   s.v.hi   "hi v 42"
    chck "s.v.v.hi" s.v.v.hi "hi v 42"
    s is
      z := 42
      hi => ""
      v ref : s is
        redef hi => "hi v {s.this.z}"

    chck(msg, v, expected String) =>
      if v = expected
        say "$msg: PASSED."
      else
        say "$msg: $v != $expected *** FAILED."
        _ := set_exit_code 1

  reg_test_2058

  # regression test from issue #2064 that failed for JVM backend
  reg_test_2064 =>

    # this version broke the JVM backend since a cast from interface A
    # to class A was missing when using the outer ref from B
    #
    v1 =>
      A(i i32) ref is
        B ref : A 66 is
          _ := A.this.i
      _ := (A 3).B
    v1

    # this version was fine for the JVM backend, the outer ref from B could have
    # two types (A and C1), so dynamic binding is used and the cast not needed:
    #
    v2 =>
      A(i i32) ref is
        B ref : A 66 is
          _ := A.this.i
      _ := (A 3).B
      C1 ref : A 4 is
      _ := C1.B
    v2

  reg_test_2064

  exit
