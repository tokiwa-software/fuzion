# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test inheritance
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

inheritance is

  exitCode := 0

  curid i32 := 0
  id i32 is
    set result := curid
    set curid := result + 1

  A ref is
    ident i32 := id
    say "A's body$ident"
    x unit is abstract
  B ref : A is
    say "B's body$ident"
    redefine x unit is say "B.x"
    xb unit is say "B.xb"
  C ref : A is
    redefine x unit is say "C.x"
    xc unit is say "C.xc"
  D ref : B, C is
    redefine x unit is say "D.x"
  E ref : D is
    redefine x  unit is say "E.x"
    redefine xb unit is say "E.xb"
    redefine xc unit is say "E.xc"
  bi B := B
  ci inheritance.C := C
  aa inheritance.A := bi
  bi.x
  ci.x
  aa.x
  set aa := ci
  aa.x
  di inheritance.D := D
  ei inheritance.E := E
  say "Calling non-redefed multiple"
  di.x
  di.xb
  di.xc
  say "Calling redefed multiple"
  ei.x
  ei.xb
  ei.xc
  say "Calling redefed multiple from non-redefed static "
  set di := ei
  di.x
  di.xb
  di.xc
  set bi := di
  set ci := di
  bi.x
  bi.xb
  ci.x
  ci.xc
  set aa := ei
  aa.x


  // mixing value and ref types along the inheritance chain:
  mixValAndRef is
    // simple test: value type inheriting form ref type:
    A ref is
      x := 3
      p => print
      print =>
        say x
    B : A is
    b := B
    b.p // all type info is static in this call

    c := 1000
    count => set c := c + 1; c

    // nested features with a ref (P, Q, R, S) and a value (Pv, Qv, Rv, Sv)
    // variant and calls to features of the corresponding outer features.
    P ref is
      id := count
      p => print
      print => say id
      Q ref is
        q => yak "q"; p
        R ref is
          r => yak "r"; p
          S ref is
            s => yak "s"; p
          Sv : S is
        Rv : R is
      Qv : Q is
    Pv : P is

    say "only refs:"

    P.p
    P.Q.q
    P.Q.R.r
    P.Q.R.S.s // #1004

    say "only values:"

    Pv.p
    Pv.Qv.q
    Pv.Qv.Rv.r
    Pv.Qv.Rv.Sv.s // #1008

    say "mixed refs and values:"

    P.p
    P.Q.q
    P.Q.R.r
    P.Q.R.S.s
    P.Q.R.Sv.s
    P.Q.Rv.r
    P.Q.Rv.S.s
    P.Q.Rv.Sv.s  // #1016
    P.Qv.q
    P.Qv.R.r
    P.Qv.R.S.s
    P.Qv.R.Sv.s
    P.Qv.Rv.r
    P.Qv.Rv.S.s
    P.Qv.Rv.Sv.s
    Pv.p
    Pv.Q.q
    Pv.Q.R.r
    Pv.Q.R.S.s
    Pv.Q.R.Sv.s
    Pv.Q.Rv.r
    Pv.Q.Rv.S.s
    Pv.Q.Rv.Sv.s
    Pv.Qv.q
    Pv.Qv.R.r
    Pv.Qv.R.S.s
    Pv.Qv.R.Sv.s
    Pv.Qv.Rv.r
    Pv.Qv.Rv.S.s
    Pv.Qv.Rv.Sv.s // #1038
  mixValAndRef


  // Inheritance from outer: stream.before inherits from stream:
  (1..).before(fun (x i32) => x > 100)
       .before(fun (x i32) => x > 40)
       .before(fun (x i32) => x > 20)
       .forAll(fun (x i32) is say x)

  // test for recursive inheritance/outer relation with refs
  strm.u.print
  strm.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.print
  strm ref is
    u ref : strm is
    print is
      say "strm.print"

  // This works even though strm1 is a value type, but the inner feature u that inherits from strm1 is a ref
  strm1.print
  strm1.u.print
  strm1.u.u.print
  strm1.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.print
  strm1 is
    u ref : strm1 is
    print is
      say "strm1.print"

  // this should work since it uses ref types
  strm5.u.print
  strm5.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.u.print
  strm5 ref is
    u ref : strm5Z is
    print is
      say "strm5.print"
  strm5X ref : strm5  is
  strm5Y ref : strm5X is
  strm5Z ref : strm5Y is

  /* simple inheritance of outer feature example: */
  cnt := 0
  Z
  Z ref is
    B ref : Z is
    if cnt < 10
      set cnt := cnt + 1
      B

  /* more complex inheritcane of outer feateature, with one more level of nesting: */
  tricky_Inheritance is
    cnt := 0
    Z
    Z ref is
        say "tricky_Inheritance.Z: $cnt"
        B ref is
          q ref : Z is
            say "tricky_Inheritance.Z.B.q: $cnt"
        if cnt < 10
          set cnt := cnt + 1
          B.q
    unit
  tricky_Inheritance

  /* calling inherited feature y from arguments to parent class D(y), feature y is inherited from value feature A */
  call_inherited_from_parent_args is
    chck (b bool, msg string) unit is
      if b
        say "PASSED: $msg"
      else
        say "FAILED: $msg"
        set exitCode := 1

    cnt_A_y := 0
    cnt_C_y := 0
    A is
      x is rx := y
      y i32 is
        set cnt_A_y := cnt_A_y + 1
        say "inherit.A.y"
        0

      C ref : A is
        redefine y i32 is
          set cnt_C_y := cnt_C_y + 1
          say "inherit.C.y"
          1
      D(i i32) is
        say i
        chck i=1 "call to y in arguments must be performed on heir instance"

      B ref : x, C, D y is

    A.B
    chck cnt_A_y=1 "inherits calls to x must be performed in outer feature A"
    chck cnt_C_y=1 "C.y must be called exactly once as argument to parent D(y)"
  call_inherited_from_parent_args

  /* calling inherited feature y from arguments to parent class D(y), feature y is inherited from ref feature A */
  call_inherited_from_parent_args2 is
    chck (b bool, msg string) unit is
      if b
        say "PASSED: $msg"
      else
        say "FAILED: $msg"
        set exitCode := 1

    cnt_A_y := 0
    cnt_C_y := 0
    A ref is
      x is rx := y
      y i32 is
        set cnt_A_y := cnt_A_y + 1
        say "inherit.A.y"
        0

      C ref : A is
        redefine y i32 is
          set cnt_C_y := cnt_C_y + 1
          say "inherit.C.y"
          1
      D(i i32) is
        say i
        chck i=1 "call to y in arguments must be performed on heir instance"

      B ref : x, C, D y is

    A.B
    chck cnt_A_y=1 "inherits calls to x must be performed in outer feature A"
    chck cnt_C_y=1 "C.y must be called exactly once as argument to parent D(y)"
  call_inherited_from_parent_args2

  /* check dynamic binding on call to A.x if ref feature B inherits from value feature A */
  check_dyn_binding_when_inheriting_value is
    A is
      a => x
      x => say "A.x: FAILED."; set exitCode := 1
    B ref : A is
      a
      redefine x unit is say "B.x: PASSED."
    B
    unit
  check_dyn_binding_when_inheriting_value

  /* calling inherited feature x from arguments to parent class D(x), feature x is inherited from value feature A and calls A.y which is redefined in C */
  call_inherited_from_parent_args3 is
    chck (b bool, msg string) unit is
      if b
        say "PASSED: $msg"
      else
        say "FAILED: $msg"
        set exitCode := 1

    cnt_A_y := 0
    cnt_C_y := 0
    A is
      x is rx := y
      y i32 is
        set cnt_A_y := cnt_A_y + 1
        say "inherit.A.y"
        0

      C ref : A is
        redefine y i32 is
          set cnt_C_y := cnt_C_y + 1
          say "inherit.C.y"
          1
      D(i i32) is
        say i
        chck i=1 "call to y in arguments must be performed on heir instance"

      B ref : x, C, D y is

    A.B
    chck cnt_A_y=1 "inherits calls to x must be performed in outer feature A"
    chck cnt_C_y=1 "C.y must be called exactly once via x as argument to parent D(x)"
  call_inherited_from_parent_args3

  inheritOuter is
    Acnt := 0
    Bcnt := 0
    Ccnt := 0
    Dcnt := 0
    Ecnt := 0
    Fcnt := 0

    A ref is
      set Acnt := Acnt + 1
      B ref is
        set Bcnt := Bcnt + 1
        C ref is
          set Ccnt := Ccnt + 1
          D ref is
            set Dcnt := Dcnt + 1
            E ref is
              set Ecnt := Ecnt + 1
              F ref is
                set Fcnt := Fcnt + 1
                F3 ref : F is
              E3 ref : E is
            D3 ref : D is
          C3 ref : C is
        B3 ref : B is
      A3 ref : A is
    A1 ref : A is
    B1 ref : A1.B is
    C1 ref : B1.C is
    D1 ref : C1.D is
    E1 ref : D1.E is
    F1 ref : E1.F is
    A2 ref : A.A3 is
    B2 ref : A2.B.B3 is
    C2 ref : B2.C.C3 is
    D2 ref : C2.D.D3 is
    E2 ref : D2.E.E3 is
    F2 ref : E2.F.F3 is
    A1
    B1
    C1
    D1
    E1
    F1
    A2
    B2
    C2
    D2
    E2
    F2
    chck "test Acnt" Acnt 18
    chck "test Bcnt" Bcnt 15
    chck "test Ccnt" Ccnt 12
    chck "test Dcnt" Dcnt 9
    chck "test Ecnt" Ecnt 6
    chck "test Fcnt" Fcnt 3
    chck(msg string, v, expected i32) =>
      if v == expected
        say "$msg: PASSED."
      else
        say "$msg: $v != $expected *** FAILED."
        set exitCode := 1
  inheritOuter

  fuzion.std.exit exitCode
