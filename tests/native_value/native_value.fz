# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test native_value
#
# -----------------------------------------------------------------------

CXCursor(kind i32 /*cursor_kind*/, xdata i32, data Native_Ref) is
CXString(data Native_Ref, private_flags u32) is
CXType(kind i32 /*type_kind*/, data Native_Ref) is

ex =>


  clang_createIndex(excludeDeclarationsFromPCH, displayDiagnostics i32) Native_Ref => native
  clang_disposeIndex(idx Native_Ref) unit => native
  clang_parseTranslationUnit(
    idx Native_Ref,
    source_filename array u8,
    command_line_args array Native_Ref,
    num_command_line_args i32,
    unsaved_files Native_Ref,
    num_unsaved_files u32,
    options u32
  ) Native_Ref => native
  clang_getTranslationUnitCursor(translation_unit Native_Ref) CXCursor => native
  clang_visitChildren(CX_CURSOR_VISITOR type : Function i32 CXCursor Native_Ref Native_Ref,
                      cursor CXCursor,
                      visitor CX_CURSOR_VISITOR,
                      client_data Native_Ref) u32 => native
  clang_getCursorKind(cursor CXCursor) i32 => native
  clang_getCursorSpelling(cursor CXCursor) CXString => native
  clang_getCursorResultType(cursor CXCursor) CXType => native
  clang_getTypeSpelling(t CXType) CXString => native
  clang_disposeString(str CXString) unit => native
  clang_Cursor_getNumArguments(cursor CXCursor) i32 => native
  clang_Cursor_getArgument(cursor CXCursor, idx i32) CXCursor => native
  clang_getCursorType(cursor CXCursor) CXType => native
  clang_disposeTranslationUnit(tu Native_Ref) unit => native

  CXChildVisit_Recurse i32 := 2
  CXCursor_FunctionDecl i32 := 8


  visitor : Function i32 CXCursor Native_Ref Native_Ref is
    public redef call(crsr CXCursor, parent Native_Ref, client_data Native_Ref) =>
      if clang_getCursorKind crsr = CXCursor_FunctionDecl
        func_name := clang_getCursorSpelling crsr
        return_type := clang_getCursorResultType crsr
        return_type_spelling := clang_getTypeSpelling return_type

        num_args := clang_Cursor_getNumArguments crsr
        for i in 1..num_args do
            arg := clang_Cursor_getArgument crsr i
            arg_name := clang_getCursorSpelling arg
            arg_type := clang_getCursorType arg
            arg_type_spelling := clang_getTypeSpelling arg_type

            clang_disposeString arg_name
            clang_disposeString arg_type_spelling

        clang_disposeString func_name
        clang_disposeString return_type_spelling


      CXChildVisit_Recurse

  idx := clang_createIndex 0 0

  check !(ffi.is_null idx)

  String.as_c_string =>
    (String.this + codepoint 0).utf8.as_array

  fzE_to_native(arr array u8) Native_Ref => native

  header_file := "./include/fz.h"

  # args := ["-I/usr/include"]
  #   .map (arg -> fzE_to_native arg.as_c_string)
  #   .as_array

  tu := clang_parseTranslationUnit idx header_file.as_c_string (array Native_Ref).empty 0 ffi.null 0 0

  check !(ffi.is_null tu)

  cursor := clang_getTranslationUnitCursor tu

  _ := clang_visitChildren cursor visitor ffi.null

  clang_disposeTranslationUnit tu
  clang_disposeIndex idx

ex
