# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test choice_mix
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

choice_mix is

  Nil is
  MyObj ref is
  MyRef(x,y,z i32) ref : MyObj is
    a i32 := x+x
    b i32 := y+y
    c i32 := z+z

  Mix : choice i32
               bool
               string
               Nil
               MyRef is

  a Mix := 3
  b Mix := true
  c Mix := "string"
  d Mix := Nil
  e Mix := MyRef 3 4 5

  show_a =>
    yak "show_a "
    match a
      i32    => say "i32:    "
      bool   => say "bool:   "
      string => say "string: "
      Nil    => say "Nil:    "
      MyRef  => say "MyRef:  "

  show_v =>
    yak "show_v "
    match a
      i i32    => say "i32:    $i"
      b bool   => say "bool:   $b"
      s string => say "string: $s"
      n Nil    => say "Nil:    $n"
      m MyRef  => say "MyRef:  $m"

  show_i =>
    yak "show_a "
    match a
      i32, string, Nil => say "has 'i'"
      bool, MyRef      => say "has no 'i'"

  show_b =>
    yak "show_b  "
    match b
      i32    => say "i32:    "
      bool   => say "bool:   "
      string => say "string: "
      Nil    => say "Nil:    "
      MyRef  => say "MyRef:  "

  show_c =>
    yak "show_c  "
    match c
      i32    => say "i32:    "
      bool   => say "bool:   "
      string => say "string: "
      Nil    => say "Nil:    "
      MyRef  => say "MyRef:  "

  show_d =>
    yak "show_d  "
    match d
      i32    => say "i32:    "
      bool   => say "bool:   "
      string => say "string: "
      Nil    => say "Nil:    "
      MyRef  => say "MyRef:  "

  show_e =>
    yak "show_e  "
    match e
      i32    => say "i32:    "
      bool   => say "bool:   "
      string => say "string: "
      Nil    => say "Nil:    "
      MyRef  => say "MyRef:  "

  v00 Mix := 42

  show00 =>
    yak "show00 "
    match v00
      i32    => say "i32:    "
      bool   => say "bool:   "
      string => say "string: "
      Nil    => say "Nil:    "
      MyRef  => say "MyRef:  "

  show0(v Mix) =>
    yak "show0  "
    match v
      i32    => say "i32:    "
      bool   => say "bool:   "
      string => say "string: "
      Nil    => say "Nil:    "
      MyRef  => say "MyRef:  "

  show(v Mix) =>
    yak "show   "
    match v
      i i32    => say "i32:    $i"
      b bool   => say "bool:   $b"
      s string => say "string: $s"
      n Nil    => say "Nil:    $n"
      m MyRef  => say "MyRef:  $m"

  yak "a: "; show_a
  yak "b: "; show_b
  yak "c: "; show_c
  yak "d: "; show_d
  yak "e: "; show_e

  yak "a: "; set v00 := a; show00
  yak "b: "; set v00 := b; show00
  yak "c: "; set v00 := c; show00
  yak "d: "; set v00 := d; show00
  yak "e: "; set v00 := e; show00

  yak "a: "; show0 a
  yak "b: "; show0 b
  yak "c: "; show0 c
  yak "d: "; show0 d
  yak "e: "; show0 e

  for
    i := 0, i + 1
  while i < 6
    if i > 0 say "-------------"
    yak "show_a : "; show_a
    yak "show_v : "; show_v
    yak "show_i : "; show_i
    yak "show a: "; show a
    yak "show b: "; show b
    yak "show c: "; show c
    yak "show d: "; show d
    x Mix := a
    set a := b
    set b := c
    set c := d
    set d := e
    set e := x

  colors1 unit is  // using choice over features inheriting from abstract feature
    color is rgb u32 is abstract
    red     : color is redefine rgb => u32 255 * 256 * 256
    green   : color is redefine rgb => u32 255 * 256
    blue    : color is redefine rgb => u32 255
    yellow  : color is redefine rgb => red.rgb + green.rgb
    magenta : color is redefine rgb => red.rgb + blue.rgb
    black   : color is redefine rgb => u32 0
    white   : color is redefine rgb => red.rgb + blue.rgb + green.rgb
    transparent (alpha u32) : color
      pre alpha >= 0, alpha <= 255
    is
      redefine rgb => alpha * 256*256*256

    p, q, r, s, t choice red
                         green
                         blue
                         yellow
                         magenta
                         black
                         white
                         transparent := red

    print(c choice red
                   green
                   blue
                   yellow
                   magenta
                   black
                   white
                   transparent) unit
    is
      match c
        r red         => say "red {r.rgb}"
        g green       => say "grn {g.rgb}"
        b blue        => say "blu {b.rgb}"
        y yellow      => say "yel {y.rgb}"
        m magenta     => say "mag {m.rgb}"
        k black       => say "blk {k.rgb}"
        w white       => say "wht {w.rgb}"
        t transparent => say "trp {t.rgb}"

    set p := red
    set q := green
    set r := black
    set s := transparent 200
    set t := transparent 100
    print p
    print q
    print r
    print s
    print t
  colors1

  colors2 unit is // same as colors1, using pipe notation
    color is rgb u32 is abstract
    red     : color is redefine rgb => u32 255 * 256 * 256
    green   : color is redefine rgb => u32 255 * 256
    blue    : color is redefine rgb => u32 255
    yellow  : color is redefine rgb => red.rgb + green.rgb
    magenta : color is redefine rgb => red.rgb + blue.rgb
    black   : color is redefine rgb => u32 0
    white   : color is redefine rgb => red.rgb + blue.rgb + green.rgb
    transparent (alpha u32) : color
      pre alpha >= 0, alpha <= 255
    is
      redefine rgb => alpha * 256*256*256

    p, q, r, s, t red
                | green
                | blue
                | yellow
                | magenta
                | black
                | white
                | transparent := red

    print(c red
          | green
          | blue
          | yellow
          | magenta
          | black
          | white
          | transparent) unit
    is
      match c
        r red         => say "red{r.rgb}"
        g green       => say "grn{g.rgb}"
        b blue        => say "blu{b.rgb}"
        y yellow      => say "yel{y.rgb}"
        m magenta     => say "mag{m.rgb}"
        k black       => say "blk{k.rgb}"
        w white       => say "wht{w.rgb}"
        t transparent => say "trp{t.rgb}"
    set p := red
    set q := green
    set r := black
    set s := transparent 200
    set t := transparent 100
    print p
    print q
    print r
    print s
    print t
  colors2

  alternatives1 unit is // use pipe for choice result type
    f(i i32) i32 | bool | string is
      if i < 10 { i }
      else if i < 20 { i > 15 }
      else { "Large" }
    for
      i := 0, i + 1
    while i<25
      yak "$i ==> "
      match f(i)
        x i32 => yak x
        b bool => { if b { yak  "true" } else { yak "false" } }
        s string => yak s
      say

    // check that pipe also works as operator:
    (1..10) | i -> yak i
    say
  alternatives1

  alternatives2 unit is // use pipe for choice argument type
    Nil is
    MyRef (a,b,c i32) ref is

    test(p i32 | bool | string | Nil | MyRef) unit is
      match p
        i i32    => say "i32:    $i"
        b bool   => say "bool:   $b"
        s string => say "string: $s"
        n Nil    => say "Nil:    $n"
        m MyRef  => say "MyRef:  $m"

    test 3
    test true
    test "string"
    test Nil
    test (MyRef 3 4 5)
  alternatives2
