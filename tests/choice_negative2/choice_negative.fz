# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test choice_negative
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

choice_negative is

  cyclic7 is
    A is
      x A | i32 | String := "Hello"  // 4. should flag an error: cyclic choice
      s is
        match x
          a A      => say "A.x is A"
          i i32    => say "A.x is i32"
          s String => say "A.x is String"

  cyclic7.A.s // NYI: would be nice if this was detected w/o a call to x

  cyclic8 is
    rA ref is
    A : rA is
      x rA | i32 | String := "Hello"
      s is
        match x
          a rA     => say "A.x is A"
          i i32    => say "A.x is i32"
          s String => say "A.x is String"

  cyclic8.A.s

  cyclic9 is
    A is
      x i32 | A | String := "Hello"  // 5. should flag an error: cyclic choice
      s is
        match x
          a A      => say "A.x is A"
          i i32    => say "A.x is i32"
          s String => say "A.x is String"

  cyclic9.A.s // NYI: would be nice if this was detected w/o a call to x

  cyclic10 is
    rA ref is
    A : rA is
      x i32 | rA | String := "Hello"
      s is
        match x
          a rA     => say "A.x is A"
          i i32    => say "A.x is i32"
          s String => say "A.x is String"

  cyclic10.A.s

  cyclic11 is
    A is
      x i32 | String | A := "Hello"  // 6. should flag an error: cyclic choice
      s is
        match x
          a A      => say "A.x is A"
          i i32    => say "A.x is i32"
          s String => say "A.x is String"

  cyclic11.A.s // NYI: would be nice if this was detected w/o a call to x

  cyclic12 is
    rA ref is
    A : rA is
      x i32 | String | rA := "Hello"
      s is
        match x
          a rA  => say "A.x is A"
          i i32    => say "A.x is i32"
          s String => say "A.x is String"

  cyclic12.A.s
  unit
