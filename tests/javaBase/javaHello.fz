# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion example javaHello
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# javaHello is a minimalistic example that shows how Java's
# java.lang.System.out.println can be called from Fuzion code.
#
# See Makefile for how to start fuzion to run this example.
#
javaHello : Java is

  # catch panics, printing its exceptions
  #
  catch_panics(fun ()->unit) =>
    panic.instate unit (panic (msg -> say msg; panic.abort) unit) fun _->unit


  fuzion.java.create_jvm0 ""

  # we can call code in Java package directly using fully
  # qualified class names
  #
  java.lang.System.out.println "Hello Java üåç!"

  # or we can create a local field as a shortcut
  #
  System := java.lang.System
  System.out.println "Hello Java üåç!"

  # we can use a different name as well
  #
  js := java.lang.System
  js.out.println "Hello Java üåç!"

  # we can also store a Java instance in a Fuzion field
  #
  o := java.lang.System.out
  o.println "Hello Java üåç!"

  # or wrap a Java call into a Fuzion feature
  #
  println (s String) => java.lang.System.out.println s
  println "Hello Java üåç!"

  # let's work a bit with Java:
  #
  javaString := java.lang.__jString.new "Hello Java üåç!"                          # create Java string, type Java.java.lang.String
  javaBytes  := javaString.getBytes "UTF8"                                     # get its UTF8 bytes, type is fuzion.java.Array<i8>
  match javaBytes
    err error => say "got an error: $err"
    bytes fuzion.java.Array =>
      say "string has {bytes.count} bytes: $bytes"
      javaString2 := java.lang.__jString.new bytes 6 bytes.count-6                # create Java string from bytes subset,
      say "Hello "+javaString2                                                 # append Java string to Fuzion string and print it

  # convert fuzion arrays to java arrays
  # array with primitives
  arr_bool := fuzion.java.array_to_java_object [false, true, false, true]
  arr_i8   := fuzion.java.array_to_java_object [i8.zero, i8.one, i8.min, i8.max]
  arr_i16  := fuzion.java.array_to_java_object [i16.zero, i16.one, i16.min, i16.max]
  arr_u16  := fuzion.java.array_to_java_object [u16.zero, u16.one, u16.min, u16.max]
  arr_i32  := fuzion.java.array_to_java_object [i32.zero, i32.one, i32.min, i32.max]
  arr_i64  := fuzion.java.array_to_java_object [i64.zero, i64.one, i64.min, i64.max]
  arr_f32  := fuzion.java.array_to_java_object [f32.zero, f32.one, f32.œÄ, f32.max]
  arr_f64  := fuzion.java.array_to_java_object [f64.zero, f64.one, f64.œÄ, f64.max]


  say arr_bool
  say arr_i8
  say arr_i16
  say arr_u16
  say arr_i32
  say arr_i64
  say arr_f32
  say arr_f64

  # array of none-primitives
  say (Java.as_java_object [java.lang.System.err])
  (Java.as_java_object [java.lang.System.err])[0].println "I was printed via java."


  # NYI: BUG: does not work yet in c-backend: mixture of say and java-println
  # gets output mixed up. We probably need to flush before executing this?
  (Java.as_java_object [java.lang.System.out])[0].println "I was printed via java."


  # checked exception: IOException
  match java.io.FileReader.new "not_a_valid_file"
    Java.java.io.FileReader => say "success opening file reader"
    error => say "error: not_a_valid_file (No such file or directory)"


  # get field (non-null)
  say (Java.java.io.StreamTokenizer.new Java.java.lang.System.__k__in).ttype
  say (Java.java.io.StreamTokenizer.new Java.java.lang.System.__k__in).nval
  # get field (null)
  say (Java.java.io.StreamTokenizer.new Java.java.lang.System.__k__in).sval


  # get static field (non-null)
  say Java.java.lang.Character_static.MAX__VALUE
  # get static field (null)
  say Java.java.lang.constant.ConstantDescs_static.CLASS__INIT__NAME


  # NYI: BUG java.lang.IllegalAccessException: class dev.flang.be.jvm.runtime.Runtime cannot access class com.sun.security.ntlm.NTLMException
  # say Java.com.sun.security.ntlm.NTLMException_static.AUTH__FAILED


  # "cast" TreeMap to Map and use it in a call to putAll
  #
  test_casting =>
    jstr => java.lang.__jString.new "my jstr"

    tm := Java.java.util.TreeMap.new
    _ := tm.put jstr jstr

    util_map := fuzion.java.cast Java.java.util.Map tm

    tm2 := Java.java.util.TreeMap.new
    _ := try (outcome Java.java.util.Map) unit ()->
      tm2.putAll util_map.get
      say tm2.toString

  test_casting


  # "cast" java String to Map and use it in a call to putAll
  #
  test_casting_fail =>
    jstr => java.lang.__jString.new "my jstr"

    util_map := fuzion.java.cast Java.java.util.Map jstr

    tm2 := Java.java.util.TreeMap.new
    _ := try (outcome Java.java.util.Map) unit ()->
      tm2.putAll util_map.get
      say tm2.toString

  catch_panics ()->
    test_casting_fail



  catch_panics ()->
    say (Java.java.util.ArrayList.new_I -7)


  say (fuzion.java.null (fuzion.java.Java_String))
