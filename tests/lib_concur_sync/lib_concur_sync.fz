# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test lib_concur_sync
#
# -----------------------------------------------------------------------

lib_concur_sync =>

  test_signal =>

    mtx_res := concur.sync.mutex.new.bind unit mtx->
      cnd_res := mtx.condition.bind unit cnd->

        a := concur.threads.spawn ()->
          cnd.synchronized ()->
            check cnd.wait
            say "Thread proceeding after signal"

        b := concur.threads.spawn ()->
          say "Thread sleeping"
          time.nano.sleep (time.duration.ms 100)
          cnd.synchronized ()->
            say "Thread sending signal"
            check cnd.signal

        a.join
        b.join

      check cnd_res.ok
      # NYI: BUG: without this, DFA reading uninitialized field
      unit
    check mtx_res.ok



  test_broadcast =>

    mtx_res := concur.sync.mutex.new.bind unit mtx->
      cnd_res := mtx.condition.bind unit cnd->

        a := concur.threads.spawn ()->
          cnd.synchronized ()->
            check cnd.wait
            say "Thread proceeding after broadcast"

        b := concur.threads.spawn ()->
          say "Thread sleeping"
          time.nano.sleep (time.duration.ms 100)
          cnd.synchronized ()->
            say "Thread sending broadcast"
            check cnd.broadcast

        a.join
        b.join

      check cnd_res.ok
      # NYI: BUG: without this, DFA reading uninitialized field
      unit
    check mtx_res.ok



  test_signal
  test_broadcast
