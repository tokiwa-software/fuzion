# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test
#
# -----------------------------------------------------------------------

basicIntegers_negative is

  assignConstants =>

    _ i8 := 0
    _ i8 := 127
    _ i8 := 128     // 1. should flag an error, constant out of range
    _ i8 := -1
    _ i8 := -127
    _ i8 := -128
    _ i8 := -129    // 2. should flag an error, constant out of range
    _ i8 := - -1   // 3. should flag an error, constant out of range
    _ i8 := - - 1  // 4. should flag an error, constant out of range

    _ u8 := 0
    _ u8 := 127
    _ u8 := 128
    _ u8 := 255
    _ u8 := 256     // 5. should flag an error, constant out of range
    _ u8 := -0
    _ u8 := -1      // 6. should flag an error, constant out of range
    _ u8 := - -1   // 7. should flag an error, constant out of range
    _ u8 := - - 1  // 8. should flag an error, constant out of range

    _ i16 := 0
    _ i16 := 127
    _ i16 := 128
    _ i16 := 0x7fff
    _ i16 := 0x8000               // 9. should flag an error, constant out of range
    _ i16 := 0b111111111111111
    _ i16 := 0b1111111111111111   // 10. should flag an error, constant out of range
    _ i16 := -0
    _ i16 := -32768
    _ i16 := -(32768)            // 11. should flag an error, constant out of range
    _ i16 := -(-32768)           // 12. should flag an error, constant out of range
    _ i16 := -(-(-32768))        // 13. should flag an error, constant out of range
    _ i16 := -32769              // 14. should flag an error, constant out of range
    _ i16 := -(-(-(32769)))     // 15. should flag an error, constant out of range
    _ i16 := +(-(+(32769)))     // 16. should flag an error, constant out of range

    _ u16 := 0
    _ u16 := 65535
    _ u16 := 65536                // 17. should flag an error, constant out of range
    _ u16 := 0xffff
    _ u16 := 0x10000              // 18. should flag an error, constant out of range
    _ u16 := 0b1111111111111111
    _ u16 := 0b10000000000000000  // 19. should flag an error, constant out of range
    _ u16 := -0
    _ u16 := -1                   // 20. should flag an error, constant out of range
    _ u16 := - - 1               // 21. should flag an error, constant out of range

    _ i64 := 9223372036854775807
    _ i64 := 9223372036854775808  // 22. should flag an error, constant out of range

    _ u64 := 9223372036854775807
    _ u64 := 9223372036854775808
    _ u64 := 18446744073709551615
    _ u64 := 18446744073709551616 // 23. should flag an error, constant out of range
    _ u64 := - 0                  // 24. should flag an error, constant out of range
    _ u64 := -1                   // 25. should flag an error, constant out of range
    _ u64 := - -1                 // 26. should flag an error, constant out of range

  assignToConstructur =>

    _ := i8 0
    _ := i8 127
    _ := i8 128       // 27. should flag an error, constant out of range
    _ := i8 -1
    _ := i8 -127
    _ := i8 -128
    _ := i8 -129      // 28. should flag an error, constant out of range
    _ := i8 (- -1)   // 29. should flag an error, constant out of range
    _ := i8 (- - 1)  // 30. should flag an error, constant out of range

    _ := u8 0
    _ := u8 127
    _ := u8 128
    _ := u8 255
    _ := u8 256       // 31. should flag an error, constant out of range
    _ := u8 -0
    _ := u8 -1        // 32. should flag an error, constant out of range
    _ := u8 (- -1)   // 33. should flag an error, constant out of range
    _ := u8 (- - 1)  // 34. should flag an error, constant out of range

    _ := i16 0
    _ := i16 127
    _ := i16 128
    _ := i16 0x7fff
    _ := i16 0x8000               // 35. should flag an error, constant out of range
    _ := i16 0b111111111111111
    _ := i16 0b1111111111111111   // 36. should flag an error, constant out of range
    _ := i16 -0
    _ := i16 -32768
    _ := i16 -(32768)            // 37. should flag an error, constant out of range
    _ := i16 -(-32768)           // 38. should flag an error, constant out of range
    _ := i16 -(-(-32768))        // 39. should flag an error, constant out of range
    _ := i16 -32769              // 40. should flag an error, constant out of range
    _ := i16 -(-(-(32769)))     // 41. should flag an error, constant out of range
    _ := i16 +(-(+(32769)))     // 42. should flag an error, constant out of range

    _ := u16 0
    _ := u16 65535
    _ := u16 65536                // 43. should flag an error, constant out of range
    _ := u16 0xffff
    _ := u16 0x10000              // 44. should flag an error, constant out of range
    _ := u16 0b1111111111111111
    _ := u16 0b10000000000000000  // 45. should flag an error, constant out of range
    _ := u16 -0
    _ := u16 -1                   // 46. should flag an error, constant out of range
    _ := u16 (- - 1)             // 47. should flag an error, constant out of range

    _ := i64 9223372036854775807
    _ := i64 9223372036854775808  // 48. should flag an error, constant out of range

    _ := u64 9223372036854775807
    _ := u64 9223372036854775808
    _ := u64 18446744073709551615
    _ := u64 18446744073709551616 // 49. should flag an error, constant out of range
    _ := u64 (- 0)                // 50. should flag an error, constant out of range
    _ := u64 -1                   // 51. should flag an error, constant out of range
    _ := u64 (- -1)               // 52. should flag an error, constant out of range

  sa (x i32) =>
    say x

  sa 123456        # ok
  sa 123.456       # 53. should flag an error, must be integer
  sa 123456.789    # 54. should flag an error, must be integer
  sa 123456.000    # ok
  sa 123456.789E2  # 55. should flag an error, must be integer
  sa 123456.789E3  # ok
  sa 123456.789E4  # ok
  sa 123456780E-1  # ok
  sa 123456780E-2  # 56. should flag an error, must be integer
  sa 123456780E-3  # 57. should flag an error, must be integer
