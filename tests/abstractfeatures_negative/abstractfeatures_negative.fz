# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test abstractfeatures_negative
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

abstractfeatures_negative is

  opengenerics12 is
    F(A type...) ref is
      f(a A) is abstract                         //  1. should flag an error: abstract feature not implemented
      g(a A) is abstract                         // ok, not called.

    G ref : F<i32,bool,i32> is

    x G := G                                     //  2. should flag an error: abstract feature f not implemented
    y F<i32,bool,i32> := x
    y.f 3 true 5

  opengenerics12

  opengenerics12a is
    F(A type...) ref is
      f1(a A) is abstract                          //  3. should flag an error: abstract feature not implemented
      f2(a A) is abstract                          //  4. should flag an error: abstract feature not implemented
      f3(a A) is abstract                          //  5. should flag an error: abstract feature not implemented
      f4(a A) is abstract                          // ok, not called.
      f5(a A) is abstract                          // ok, not called.

    G ref : F<i32,bool,i32> is

    x G := G                                       //  6. should flag an error: abstract features f1, f2, f3 not implemented
    y F<i32,bool,i32> := x
    y.f1 3 true 5
    y.f2 3 true 5
    y.f3 3 true 5

  opengenerics12a

  opengenerics12b is
    F(A type...) ref is
      f(a A) is abstract                           //  7. should flag an error: abstract feature not implemented
      g(a A) is abstract                           // ok, not called.

    G ref : F<i32,bool,i32> is

    x G := G                                       //  8. should flag an error: abstract feature f not implemented
    x.f 3 true 5

  opengenerics12b

  opengenerics12c is
    F(A type...) ref is
      f1(a A) is abstract                          //  9. should flag an error: abstract feature not implemented
      f2(a A) is abstract                          // 10. should flag an error: abstract feature not implemented
      f3(a A) is abstract                          // 11. should flag an error: abstract feature not implemented
      f4(a A) is abstract                          // ok, not called.
      f5(a A) is abstract                          // ok, not called.

    G ref : F<i32,bool,i32> is

    x G := G                                       // 12. should flag an error: abstract features f1, f2, f3 not implemented
    x.f1 3 true 5
    x.f2 3 true 5
    x.f3 3 true 5

  opengenerics12c
  unit
