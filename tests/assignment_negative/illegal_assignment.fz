# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test illegal_assignment
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

illegal_assignment is

  Q ref is
    A ref is { x is { say "*** should never be here ***" } }
    B ref is { x is { say "*** should never be here ***" } }
    C ref is { x is { say "*** should never be here ***" }; xc is {} }
    D ref is { x is { say "*** should never be here ***" }; xb is {}; xc is {} }
    E ref is { x is { say "*** should never be here ***" }; xb is {}; xc is {} }

  curid i32 := 0
  id i32 =>
    res := curid
    set curid := res + 1
    res

  A ref is
    ident := id
    say "A's body$ident"
    x unit => abstract

  B ref : A is
    say "B's body"
    redef x => say "B.x"
    xb => say "B.xb"

  C ref : A is
    redef x => say "C.x"
    xc => say "C.xc"

  D ref : B, C is
    redef x => say "D.x"

  E ref : D is
    redef x  => say "E.x"
    redef xb => say "E.xb"
    redef xc => say "E.xc"

  bi := B
  ci Q.C := C  # 1. should flag an error: illegal assignment
  aa Q.A := bi # 2. should flag an error: illegal assignment
  _ := bi.x
  _ := ci.x
  _ := aa.x
  set aa := ci # 3. should flag an error: illegal assignment
  _ := aa.x
  di Q.D := D # 4. should flag an error: illegal assignment
  ei Q.E := E # 5. should flag an error: illegal assignment
  say "Calling non-redefed multiple"
  _ := di.x
  _ := di.xb
  _ := di.xc
  say "Calling redefed multiple"
  _ := ei.x
  _ := ei.xb
  _ := ei.xc
  say "Calling redefed multiple from non-redefed static "
  set di := ei  # 6. should flag an error: illegal assignment
  _ := di.x
  _ := di.xb
  _ := di.xc
  set bi := di  # 7. should flag an error: illegal assignment
  set ci := di  # 8. should flag an error: illegal assignment
  _ := bi.x
  _ := bi.xb
  _ := ci.x
  _ := ci.xc
  set aa := ei  # 9. should flag an error: illegal assignment
  _ := aa.x
  unit
