# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test listFoldTest
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# A test for list.fold using different monoids and checking the results
#
listFoldTest is

  exitCode := 0

  chck (b bool, msg string) unit is
    if b
      say "PASSED: $msg"
    else
      say "FAILED: $msg"
      set exitCode := 1

  l1 list<i32> := nil
  l2 list<i32> := cons         9 l1
  l3 list<i32> := cons        80 l2
  l4 list<i32> := cons       700 l3
  l5 list<i32> := cons      6000 l4
  l6 list<i32> := cons     50000 l5
  l7 list<i32> := cons    400000 l6
  l8 list<i32> := cons   3000000 l7
  l9 list<i32> := cons  20000000 l8
  lA list<i32> := cons 100000000 l9

  sl1 list<string> := nil
  sl2 list<string> := cons "dog." sl1
  sl3 list<string> := cons "lazy " sl2
  sl4 list<string> := cons "the " sl3
  sl5 list<string> := cons "over " sl4
  sl6 list<string> := cons "jumps " sl5
  sl7 list<string> := cons "fox " sl6
  sl8 list<string> := cons "brown " sl7
  sl9 list<string> := cons "quick " sl8
  slA list<string> := cons "The " sl9

  sl := ["The ", "quick ", "brown ", "fox ", "jumps ", "over ", "the ", "lazy ", "dog."].asList;
  say "Fold string list: {sl.fold strings.concat}"

  chck ((sl.fold strings.concat) == "The quick brown fox jumps over the lazy dog.") "check string concat"

  say "sum 1 is {l1.fold i32.sum}"; chck ((l1.fold i32.sum) == 0) "sum l1"
  say "sum 2 is {l2.fold i32.sum}"; chck ((l2.fold i32.sum) == 9) "sum l2"
  say "sum 3 is {l3.fold i32.sum}"; chck ((l3.fold i32.sum) == 89) "sum l3"
  say "sum 4 is {l4.fold i32.sum}"; chck ((l4.fold i32.sum) == 789) "sum l4"
  say "sum 5 is {l5.fold i32.sum}"; chck ((l5.fold i32.sum) == 6789) "sum l5"
  say "sum 6 is {l6.fold i32.sum}"; chck ((l6.fold i32.sum) == 56789) "sum l6"
  say "sum 7 is {l7.fold i32.sum}"; chck ((l7.fold i32.sum) == 456789) "sum l7"
  say "sum 8 is {l8.fold i32.sum}"; chck ((l8.fold i32.sum) == 3456789) "sum l8"
  say "sum 9 is {l9.fold i32.sum}"; chck ((l9.fold i32.sum) == 23456789) "sum l9"
  say "sum 10 is {lA.fold i32.sum}"; chck ((lA.fold i32.sum) == 123456789) "sum lA"

  say "sum 1 is {l1.take(5).fold i32.sum}"; chck ((l1.take(5).fold i32.sum) == 0) "take(5).sum l1"
  say "sum 2 is {l2.take(5).fold i32.sum}"; chck ((l2.take(5).fold i32.sum) == 9) "take(5).sum l2"
  say "sum 3 is {l3.take(5).fold i32.sum}"; chck ((l3.take(5).fold i32.sum) == 89) "take(5).sum l3"
  say "sum 4 is {l4.take(5).fold i32.sum}"; chck ((l4.take(5).fold i32.sum) == 789) "take(5).sum l4"
  say "sum 5 is {l5.take(5).fold i32.sum}"; chck ((l5.take(5).fold i32.sum) == 6789) "take(5).sum l5"
  say "sum 6 is {l6.take(5).fold i32.sum}"; chck ((l6.take(5).fold i32.sum) == 56789) "take(5).sum l6"
  say "sum 7 is {l7.take(5).fold i32.sum}"; chck ((l7.take(5).fold i32.sum) == 456780) "take(5).sum l7"
  say "sum 8 is {l8.take(5).fold i32.sum}"; chck ((l8.take(5).fold i32.sum) == 3456700) "take(5).sum l8"
  say "sum 9 is {l9.take(5).fold i32.sum}"; chck ((l9.take(5).fold i32.sum) == 23456000) "take(5).sum l9"
  say "sum 10 is {lA.take(5).fold i32.sum}"; chck ((lA.take(5).fold i32.sum) == 123450000) "take(5).sum lA"

  say "string list 1 is {sl1.fold strings.concat}"; chck ((sl1.fold strings.concat) == "") "concat sl1"
  say "string list 2 is {sl2.fold strings.concat}"; chck ((sl2.fold strings.concat) == "dog.") "concat sl2"
  say "string list 3 is {sl3.fold strings.concat}"; chck ((sl3.fold strings.concat) == "lazy dog.") "concat sl3"
  say "string list 4 is {sl4.fold strings.concat}"; chck ((sl4.fold strings.concat) == "the lazy dog.") "concat sl4"
  say "string list 5 is {sl5.fold strings.concat}"; chck ((sl5.fold strings.concat) == "over the lazy dog.") "concat sl5"
  say "string list 6 is {sl6.fold strings.concat}"; chck ((sl6.fold strings.concat) == "jumps over the lazy dog.") "concat sl6"
  say "string list 7 is {sl7.fold strings.concat}"; chck ((sl7.fold strings.concat) == "fox jumps over the lazy dog.") "concat sl"
  say "string list 8 is {sl8.fold strings.concat}"; chck ((sl8.fold strings.concat) == "brown fox jumps over the lazy dog.") "concat sl"
  say "string list 9 is {sl9.fold strings.concat}"; chck ((sl9.fold strings.concat) == "quick brown fox jumps over the lazy dog.") "concat sl9"
  say "string list 10 is {slA.fold strings.concat}"; chck ((slA.fold strings.concat) == "The quick brown fox jumps over the lazy dog.") "concat slA"

  // product mod 11
  m : Monoid<i32> is
    infix âˆ™ (a, b i32) => a * b % 11
    e => 1

  say "product mod 11 is {l1.fold m}"; chck ((l1.fold m) == 1) "l1.fold produc mod 11"
  say "product mod 11 is {l2.fold m}"; chck ((l2.fold m) == 9) "l2.fold produc mod 11"
  say "product mod 11 is {l3.fold m}"; chck ((l3.fold m) == 5) "l3.fold produc mod 11"
  say "product mod 11 is {l4.fold m}"; chck ((l4.fold m) == 2) "l4.fold produc mod 11"
  say "product mod 11 is {l5.fold m}"; chck ((l5.fold m) == 10) "l5.fold produc mod 11"
  say "product mod 11 is {l6.fold m}"; chck ((l6.fold m) == 6) "l6.fold produc mod 11"
  say "product mod 11 is {l7.fold m}"; chck ((l7.fold m) == 9) "l7.fold produc mod 11"
  say "product mod 11 is {l8.fold m}"; chck ((l8.fold m) == 5) "l8.fold produc mod 11"
  say "product mod 11 is {l9.fold m}"; chck ((l9.fold m) == 1) "l9.fold produc mod 11"
  say "product mod 11 is {lA.fold m}"; chck ((lA.fold m) == 1) "lA.fold produc mod 11"

  say "productSaturating 1 is {l1.fold i32.productSaturating}"; chck ((l1.fold i32.productSaturating) == 1) "l1.fold i32.productSaturating"
  say "productSaturating 2 is {l2.fold i32.productSaturating}"; chck ((l2.fold i32.productSaturating) == 9) "l2.fold i32.productSaturating"
  say "productSaturating 3 is {l3.fold i32.productSaturating}"; chck ((l3.fold i32.productSaturating) == 720) "l3.fold i32.productSaturating"
  say "productSaturating 4 is {l4.fold i32.productSaturating}"; chck ((l4.fold i32.productSaturating) == 504000) "l4.fold i32.productSaturating"
  say "productSaturating 5 is {l5.fold i32.productSaturating}"; chck ((l5.fold i32.productSaturating) == 2147483647) "l5.fold i32.productSaturating"
  say "productSaturating 6 is {l6.fold i32.productSaturating}"; chck ((l6.fold i32.productSaturating) == 2147483647) "l6.fold i32.productSaturating"
  say "productSaturating 7 is {l7.fold i32.productSaturating}"; chck ((l7.fold i32.productSaturating) == 2147483647) "l7.fold i32.productSaturating"
  say "productSaturating 8 is {l8.fold i32.productSaturating}"; chck ((l8.fold i32.productSaturating) == 2147483647) "l8.fold i32.productSaturating"
  say "productSaturating 9 is {l9.fold i32.productSaturating}"; chck ((l9.fold i32.productSaturating) == 2147483647) "l9.fold i32.productSaturating"
  say "productSaturating 10 is {lA.fold i32.productSaturating}"; chck ((lA.fold i32.productSaturating) == 2147483647) "lA.fold i32.productSaturating"

  say "product 1 is {l1.fold i32.product}"; chck ((l1.fold i32.product) == 1) "l1.fold i32.product"
  say "product 2 is {l2.fold i32.product}"; chck ((l2.fold i32.product) == 9) "l2.fold i32.product"
  say "product 3 is {l3.fold i32.product}"; chck ((l3.fold i32.product) == 720) "l3.fold i32.product"
  say "product 4 is {l4.fold i32.product}"; chck ((l4.fold i32.product) == 504000) "l4.fold i32.product"
  // product 5 ff would overflow
  //  say "product 5 is {l5.fold i32.product}"

  fuzion.std.exit exitCode
