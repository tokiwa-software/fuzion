# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion test issue293
#
#  Author: Michael Lill (michael.lill@tokiwa.software)
#
# -----------------------------------------------------------------------

# Regression test for #293: https://github.com/tokiwa-software/fuzion/issues/293
#
issue293 is
  human(age i32) is
  ages := map (Sequence i32) human i32 (x -> x.age)
  say (into i32 human [human 4, human 12, human 30] ages)

  into(TACC, T type, seq Sequence T, xf (Transducer (Sequence TACC) TACC T)) Sequence TACC is
    rf := ref : reducing_fn((Sequence TACC),TACC)
      call(res Sequence TACC, val TACC) Sequence(TACC) is
        res ++ [val]
    red := xf.call rf
    for
      res Sequence TACC := (list TACC).type.empty, red.call res el
      el in seq do
    else
      res

  # a Transducer mappping values from T to U
  map(TACC, T, U type, mapper T -> U) Transducer TACC U T is
    ref : Transducer TACC U T
      call(red reducing_fn TACC U) =>
        ref : reducing_fn TACC T
          call(res TACC, val T) =>
            red.call res (mapper val)


  # a reducing function takes a previous result and a value and returns a new result
  reducing_fn(TACC, T type) ref : Function TACC TACC T is

  # TACC result     type
  # B    input      type
  # C    transduced type
  Transducer(TACC, B, C type) ref : Function(reducing_fn TACC C, reducing_fn TACC B) is

    # NYI redef call abstract is currently necessary because of bug in c backend
    call(rf reducing_fn TACC B) reducing_fn TACC C is abstract
