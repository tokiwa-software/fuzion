# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature mail
#
# -----------------------------------------------------------------------

public mail is


  # send a plain text mail via ipv4 on port 587
  #
  public send(host, username, password, from, to, subject, text String) outcome unit =>
    send net.family.ipv4 587 host username password from to subject text


  # NYI: UNDER DEVELOPMENT: this will just hang if any read_line_while condition never matches


  # send a plain text mail
  #
  public send(family net.family.val, port u16, host, username, password, from, to, subject, text String) outcome unit =>

    # to init the connection to the SMTP server
    #
    init => """
      EHLO $host
    """.replace "\n" "\r\n"

    # username in base64
    #
    username_b => """
      {encodings.base64.encode_to_string username.utf8.as_array}
    """.replace "\n" "\r\n"

    # password in base64
    #
    password_b => """
      {encodings.base64.encode_to_string password.utf8.as_array}
    """.replace "\n" "\r\n"

    # the actual mail
    #
    mail_data => """
      MAIL FROM:<$from>
      RCPT TO:<$to>
      DATA
      From: <$from>
      To: $to
      Subject: $subject

      $text
      .
      QUIT
    """.replace "\n" "\r\n"

    # this lm is used for the raw netwok connection
    #
    net_lm : mutate is

    # this lm is used for reader/writer of the ssl connection
    #
    ssl_lm : mutate is

    write_or_cause(LM type : mutate, s String) =>
      (io.buffered LM).writer.env
        .write s.utf8
        .error
        .or_cause unit (x -> error "while writing $s, got $x")
      (io.buffered LM).writer.env
        .flush
        .or_cause unit (x -> error "while flushing for $s, got $x")


    # do the get request
    #
    write_request ! ssl_lm =>
      write_or_cause ssl_lm init
      write_or_cause ssl_lm "AUTH LOGIN\r\n"
      _ := (io.buffered ssl_lm).read_line_while (s -> s != "334 VXNlcm5hbWU6") # Username: in base64
      write_or_cause ssl_lm username_b
      pw := (io.buffered ssl_lm).read_line
      if pw != "334 UGFzc3dvcmQ6" # Password: in base64
        (exception unit).env.cause (error "Expected to be requested for password, got {pw}")
      write_or_cause ssl_lm password_b
      auth_succeded := (io.buffered ssl_lm).read_line
      if auth_succeded != "235 Authentication succeeded"
        (exception unit).env.cause (error "Expected auth succeeded, got {auth_succeded}")
      write_or_cause ssl_lm mail_data


    # connect and setup ssl
    #
    net_lm ! ()->
      net
        .client family net.protocol.tcp host port
        .bind c->
          c.with _ net_lm ()->
            ssl_lm ! ()->
              exception unit _ ()->
                write_or_cause net_lm init
                _ := (io.buffered net_lm).read_line_while (s -> s != "250 STARTTLS")
                write_or_cause net_lm "STARTTLS\r\n"
                ok := (io.buffered net_lm).read_line
                if ok != "220 OK"
                  (exception unit).env.cause (error "Expected 220 OK, got {ok}")
                wolfssl _ net_lm ssl_lm write_request
