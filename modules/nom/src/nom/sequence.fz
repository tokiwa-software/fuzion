# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# nom.sequence -- parsers applied in sequence
#
module sequence is

  # apply p1 then p2 and return their results as a tuple.
  #
  public tuple2(I, O1, O2 type, p1 Parser I I O1, p2 Parser I I O2) =>
    parse(input I) parse_result I (tuple O1 O2) =>
      p1.call input .bind2 s1->
        p2.call s1.rest .bind2 s2->
          id (parse_result I (tuple O1 O2)) (success s2.rest (s1.out, s2.out))
    parser I _ _ (input -> parse input)


  # apply p1 then p2 then p3 and return their results as a tuple.
  #
  public tuple3(I, O1, O2, O3 type, p1 Parser I I O1, p2 Parser I I O2, p3 Parser I I O3) =>
    parse(input I) parse_result I (tuple O1 O2 O3) =>
      p1.call input .bind2 s1->
        p2.call s1.rest .bind2 s2->
          p3.call s2.rest .bind2 s3->
            id (parse_result I (tuple O1 O2 O3)) (success s3.rest (s1.out, s2.out, s3.out))

    parser I _ _ (input -> parse input)


  # apply p1 then p2 then p3, then p4 and return their results as a tuple.
  #
  public tuple4(I, O1, O2, O3, O4 type,
    p1 Parser I I O1,
    p2 Parser I I O2,
    p3 Parser I I O3,
    p4 Parser I I O4
    ) =>
    parse(input I) parse_result I (tuple O1 O2 O3 O4) =>
      p1.call input .bind2 s1->
        p2.call s1.rest .bind2 s2->
          p3.call s2.rest .bind2 s3->
            p4.call s3.rest .bind2 s4->
              id (parse_result I (tuple O1 O2 O3 O4)) (success s4.rest (s1.out, s2.out, s3.out, s4.out))
    parser I _ _ (input -> parse input)


  # discard the output of the first parser, return the result of the second parser
  #
  public preceded(I, O1, O2 type, p1 Parser I I O1, p2 Parser I I O2) =>
    parse(input I) parse_result I O2 =>
      p1.call input .bind2 s1->
        p2.call s1.rest
    parser I _ _ (input -> parse input)


  # discard p1 and p3, return result of p2
  #
  public delimited(I, O1, O2, O3 type, p1 Parser I I O1, p2 Parser I I O2, p3 Parser I I O3) =>
    parse(input I) parse_result I O2 =>
      p1.call input .bind2 s1->
        p2.call s1.rest .bind2 s2->
          p3.call s2.rest .bind2 s3->
            id (parse_result I O2) (success s3.rest s2.out)
    parser I _ _ (input -> parse input)


  # return result of p1 and p2 as tuple, drop result of p_sep
  #
  public separated_pair(I type, R1, R2, R3, O1, O2, O3 type, p1 Parser I R1 O1, p_sep Parser R1 R2 O2, p2 () -> (Parser R2 R3 O3)) =>
    parser I R3 (tuple O1 O3) input->
      p1.call input .bind2 s1->
         p_sep.call s1.rest .bind2 s2->
           p2().call s2.rest .bind2 s3->
             id (parse_result R3 (tuple O1 O3)) (success s3.rest (s1.out, s3.out))
