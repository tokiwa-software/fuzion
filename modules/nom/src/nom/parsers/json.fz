# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of simple (incomplete) json parser built with nom
#
#  Author: Michael Lill (michael.lill@tokiwa.software)
#
# -----------------------------------------------------------------------


# json supports the following types: strings, numbers, booleans, null, arrays and objects
#
public json_value : choice String f64 bool nil (Sequence json_value) (container.Map String json_value) is
  redef as_string =>
    match json_value.this
      s String => "\"$s\""
      f f64 => $f
      b bool => $b
      nil => "null"
      seq Sequence => $seq
      m container.Map => "\{$m}"


# a json parser
#
public json =>

  # parser for a json string
  parser_string =>

    # is this codepoint a valid hex digit: a-f or A-F
    is_hex_digit(c codepoint) =>
      codepoint.type.ascii_digit.contains c.val
        || (u32 0x41 .. 0x46).contains c.val

    parser_hex_unicode =>
      preceded (tag "\\") (take_while_m_n codepoint 4 4 (c -> is_hex_digit c))
        .map (Sequence codepoint) d->
          (c,_) := d.reduce (u32 0, u32 4) (r, c -> (_, exp) := r; (c.parse_u32_hex.val * 10**exp, exp-1))
          [(codepoint c)]

    parse_and_map(t, r String) =>
      (tag t).map (Sequence codepoint) _->r.as_codepoints

    parser_escapings :=
      alt [
        (parse_and_map "\\\"" "\""),
        (parse_and_map "\\\\" "\\"),
        (parse_and_map "\\/" "/"),
        (parse_and_map "\\b" "\b"),
        (parse_and_map "\\f" "\f"),
        (parse_and_map "\\n" "\n"),
        (parse_and_map "\\r" "\r"),
        (parse_and_map "\\t" "\t"),
        parser_hex_unicode
        ]

    parser_regular_codepoint :=
      (take_while1 codepoint (c-> (c != "\"") & (c != "\\")))


    p :=
      many0 (alt [parser_regular_codepoint, parser_escapings])

    delimited (tag "\"") p (tag "\"")
      .map String (x -> String.type.join (x.map String (y -> String.type.from_codepoints y)) "")


  # parser for a json number
  # examples:
  # - 10
  # - 10.0
  # - 1.0E+1
  # - 1e1
  parser_number =>

    parser_minus := many_m_n 0 1 (tag "-")
      .map f64 (x -> if x.count = 1 then -1.0 else 1.0)

    parser_digits := take_while1 codepoint (c -> codepoint.type.ascii_digit.contains c.val)

    parser_whole := alt [tag "0", parser_digits]
      .map f64 (x -> (String.type.from_codepoints x)
                        .parse_u64
                        .val 1
                        .as_f64)

    parser_fraction := many_m_n 0 1 (preceded (tag ".") parser_digits)
      .map f64 x->
        match x.first
          nil => 0.0
          v Sequence =>
            (String.type.from_codepoints v)
              .parse_u64
              .val 0
              .as_f64 / (10.0*x.count.as_f64)

    parser_sign := many_m_n 0 1 (alt [tag "+", tag "-"])
      .map f64 x->
        match x.first
          nil => 1.0
          v Sequence =>
            if (v.first "#") = "+" then 1.0 else -1.0

    parser_signed_digit := tuple2 parser_sign parser_whole

    parser_exponent :=  many_m_n 0 1 (preceded (alt [tag "e", tag "E"]) parser_signed_digit)
      .map f64 x->
        match x.first
          nil => 1.0
          v tuple => 10.0 ** (v.0*v.1)

    (tuple4 parser_minus parser_whole parser_fraction parser_exponent)
      .map json_value x->
        (sign, whole, fraction, exponent) := x
        sign*(whole+fraction)*exponent


  # parser for true
  parser_true :=
    (tag "true").map json_value (x -> true)


  # parser for false
  parser_false :=
    (tag "false").map json_value (x -> false)


  # parser for null
  parser_null :=
    (tag "null").map json_value (x -> nil)


  # parser for json array
  parser_array =>
    parser_no_values :=
      whitespace0.map (Sequence json_value) (x -> (list json_value).type.empty)

    parser_comma_sep_value :=
      separated_list1 (Sequence codepoint) json_value (Sequence codepoint) (tag ",") ()->parser_json_value_delimited

    tmp :=  delimited (tag "[") (alt [parser_comma_sep_value, parser_no_values]) (tag "]")
    tmp.map json_value id


  # parser for json object
  parser_object =>
    parser_key_value =>
      separated_pair (Sequence codepoint) (Sequence codepoint) (Sequence codepoint) (Sequence codepoint) String (Sequence codepoint) json_value (delimited whitespace0 parser_string whitespace0) (tag ":") ()->parser_json_value_delimited

    parser_no_key_values =>
      whitespace0.map (Sequence (tuple String json_value)) (x -> (list (tuple String json_value)).type.empty)

    parser_key_values =>
      separated_list1 (tag ",") ()->parser_key_value

    delimited (tag "\{") (alt [parser_key_values, parser_no_key_values]) (tag "}")
      .map json_value (x -> container.map_of x.as_array)


  # parser for a json_value: true, false, [], {}, numbers, strings etc.
  parser_json_value =>
    alt [
      parser_string.map json_value id,
      parser_number,
      parser_object,
      parser_array,
      parser_true,
      parser_false,
      parser_null]


  # parser for json_value which may be surrounded by whitespace
  parser_json_value_delimited =>
    delimited whitespace0 parser_json_value whitespace0


  # map parser to take string input instead of Sequence of codepoints
  to_string_input parser_json_value_delimited
