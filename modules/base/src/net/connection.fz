# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature connection
#
# -----------------------------------------------------------------------

module:public connection(desc i32) is

  # close connection manually.
  # note that connections are closed automatically
  # when effect is uninstalled, i.e. on abort or when thread is finished.
  #
  public close =>
    fuzion.sys.net.close desc


  # is the connection still active?
  #
  public is_active =>
    true # NYI


  # this installs reader, writer and channel for the given connection
  #
  public with(T type, LM type : mutate, fn ()->T)
  pre is_active
  =>
    with0 T LM fn


  # helper feature, without precondition `is_active`
  # to make this usable from any thread
  #
  with0(T type, LM type : mutate, fn ()->T)
  =>
    (io.buffered.reader LM (read_handler desc) 1024) ! ()->
      (io.buffered.writer (write_handler desc) 1024) ! ()->
        (net.channel desc) ! ()->
          fn.call


  # this installs reader, writer and channel for the given connection
  #
  # NYI: DOCUMENTATION: see tests/sockets_thread_pool for now
  #
  public in_thread_pool(T type, TP type : concur.thread_pool, LM type : mutate, lm LM, fn ()->T)
  pre is_active
  =>
    TP.env.submit (outcome T) ()->
      lm ! ()->
        with0 T LM fn
