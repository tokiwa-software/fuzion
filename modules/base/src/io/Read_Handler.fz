# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature Read_Handler
#
# -----------------------------------------------------------------------

public Read_Handler ref is

  # read up to count bytes
  #
  # returns either an array of the bytes read, end_of_file or an error
  #
  public read(count i32) choice (array u8) io.end_of_file error
    post debug: (result ? a array => a.count>0 && a.count<=count | * => true)
  => abstract


  # Read_Handler that only ever returns end_of_file
  #
  public type.empty io.Read_Handler =>
    ref : io.Read_Handler is
      public redef read(c i32) choice (array u8) io.end_of_file error => io.end_of_file


  # create a Read_Handler from an array of bytes
  #
  public type.from_array_u8(LM type : mutate, arr array u8) io.Read_Handler =>
    ref : io.Read_Handler is

      # the current position in the array
      #
      pos := LM.env.new 0

      public redef read(count i32) choice (array u8) io.end_of_file error =>
        p := pos.get
        if p >= arr.count
          io.end_of_file
        else
          pos <- p + count
          arr.drop p .take count .as_array
