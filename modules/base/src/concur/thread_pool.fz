# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature concur.thread_pool
#
# -----------------------------------------------------------------------


# NYI: replace by better queue implementation, e.g. https://arxiv.org/pdf/2305.07229
Blocking_Queue(T type, cnd concur.sync.condition) ref is

  # is closed for taking any new elements?
  #
  is_closed := concur.atomic false

  data := concur.atomic (array T) []


  # enqueue an element
  # if queue is already closed, returns false
  # otherwise enqueues the element and returns true
  #
  enqueue(el T) bool =>
    if is_closed.read
      false
    else
      for old := data.read
          new := old.put old.length el
      while !data.compare_and_set old new
      else
        cnd.synchronized ()->
          # signal a waiting thread to pick up the work
          check cnd.signal
        true


  # dequeue an element
  # returns nil, if queue is closed and empty
  # otherwise returns the dequeued element
  #
  dequeue option T =>
    o := data.read
    if o.is_empty
      if is_closed.read
        nil
      else
        cnd.synchronized ()->
          # check the two conditions again, otherwise we MUST NOT wait
          if !is_closed.read && data.read.is_empty
            # NYI: BUG: possible dead lock? what if we write to data in the meantime?
            # we should use TLA+ or similar to prove correctness
            # https://www.hillelwayne.com/post/list-of-tla-examples/
            check cnd.wait
        dequeue
    else
      res := o[0]
      n := array o.count-1 i->o[i+1]
      if data.compare_and_set o n
        res
      else
        dequeue


# simple, fixed size thread pool
#
# use `concur.thread_pool.env.submit` to
# submit a task to the thread_pool.
#
public thread_pool(R type, size i32, code ()->R) outcome R =>
  (concur.sync.condition.new.bind cnd->
    (thread_pool cnd size) ! ()->
      res := code.call
      thread_pool.env.await
      res)
    .bind id



# simple, fixed size thread pool
#
private:public thread_pool(cnd concur.sync.condition, size i32) : effect
pre debug: size > 0
is

  bq := Blocking_Queue ()->unit cnd

  thrds := (1..size)
    .map _->
      concur.threads.spawn ()->
        _ := for x := bq.dequeue
             while x.exists
               x.val.call
    .as_array


  # submit a task to the thread pool
  #
  # returns false if the pool is already shutting down
  #
  public submit(task ()->unit) bool =>
    bq.enqueue task


  # submit a task to the thread pool
  #
  # returns a future if successful or panics in case
  # the thread pool has already shut down.
  #
  public submit(T type, task ()->T) concur.Future T =>


    fut ref : concur.Future T is

      fut_cnd := concur.sync.condition.new.val # NYI: error handling

      compute_result := concur.atomic (option T) nil

      compute =>
        cr := task.call
        fut_cnd.synchronized ()->
          compute_result.write cr
          check fut_cnd.broadcast

      public redef is_done => compute_result.read.exists

      public redef get T =>
        if !is_done
          fut_cnd.synchronized ()->
            if !is_done
              check fut_cnd.wait

        compute_result.read.val

      public redef and_then(T2 type, new_task T->T2) =>
        submit T2 ()->(new_task get)

    res := fut

    if bq.enqueue ()->res.compute
      res
    else
      panic "Thread pool has already shut down."


  # initiate shutdown, then wait for all added tasks to complete
  #
  await =>

    # initiate shutdown of thread pool
    # i.e. stop accepting jobs
    #
    bq.is_closed.write true

    # wake up all threads
    cnd.synchronized unit ()->
      _ := cnd.broadcast

    # wait for all threads to finish
    thrds.for_each t->
      t.join
