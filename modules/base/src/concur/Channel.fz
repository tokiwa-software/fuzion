# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion concur.Channel
#
# -----------------------------------------------------------------------


# a Channel can be used to send values
# to another thread
#
# NYI: UNDER DEVELOPMENT: max buf size
public Channel(T type/*, buf_size i32*/) ref : Iterator T, Sending_Channel T, Receiving_Channel T is

  cnd := concur.sync.condition.new.val # NYI: error handling
  bq := Blocking_Queue T cnd


  # send a value to this Channel
  # returns true if sending was successful,
  # false if not
  #
  public redef infix <- (to T) bool
  =>
    bq.enqueue to


  # close the Channel
  #
  # infix <- will now always return false
  # has_next will return nil once Channel is empty
  #
  public redef close unit =>
    bq.close
    # NYI: BUG: free/dispose cnd


  # returns nil when Channel is closed and empty
  # otherwise returns the next received value
  #
  public redef has_next option T =>
    bq.dequeue

