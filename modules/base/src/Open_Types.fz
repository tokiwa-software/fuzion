# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature Values_Of_Open_Type
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# Open_Types -- parent feature of type used for open types
#
# This is the parent feature of the result type of open type parameters
# such as `choice..CHOICE_ELEMENT_TYPE`.
#
# The Open_Types value inherits from `Types` permitting access to
# the individual types.
#
module:public Open_Types ref : container.Types is


  # fold the actual fields created for a field whose type is an open type parameter
  # using the given `TypeApplicator` `a` and initial value `e`.
  #
  # In case the actual open type parameter list is empty, the result is `e`.
  #
  public redef type_foldf(E type,
                          A type : container.type_applicator E,
                          e E,
                          a A
                          ) E
  =>

    autogenerated_code_for_Open_Types_fold E A e a
  /* the auto-generated code for `choice String f64 bool` looks as follows:

    a.apply bool      (
      a.apply f64       (
        a.apply String    (e)
                        )
                      )

   */


# magic intrinsic used by middle end to create code for `type_foldf`, see above.
#
private autogenerated_code_for_Open_Types_fold(E type,
                                               A type : container.type_applicator E,
                                               e E,
                                               a A) E => intrinsic
