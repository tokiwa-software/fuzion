# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature oneway_monad
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# oneway_monad -- heir feature of all one-way monads.
#
# oneway_monad is the heir feature of all one-way monads. A one-way monad is
# a monadic feature that can be accessed as a effect through the environment
# and that will be replaced in the environment whenever a new instance is
# created.  Alternatively, this can be used as a monad that wraps around a
# function result type A.
#
public oneway_monad(

  # the type wrapped by this monad, `unit` in case this is used as an
  # effect.
  A type,

  # NYI: CLEANUP: replace by `oneway_monad.this`
  OMA type : oneway_monad A OMA,

  # `plain` monad or effect to be `inst`alled or `repl`aced by new value?
  #
  # if `repl`, `replace` will be called. If `inst`, this has to be
  # `instated` by the caller.  `plain` does not instate or replace this,
  # which is not needed if used as an explicit monad.
  #
  mode oneway_monad_mode.val
  ) : monad A OMA, effect
is

  match mode
    oneway_monad_mode.plain =>
    oneway_monad_mode.inst  => # instate will be done by caller
    oneway_monad_mode.repl  => replace


# enum of the mode argument.
#
public oneway_monad_mode is

  public plain is   # a plain oneway_monad, not instated
  public inst  is   # an effect that will be instated
  public repl  is   # an effect that will replace an instated one

  # enum type plain | inst | repl
  public fixed val : choice plain inst repl is

    # for a given mode, return the mode of a new instance of a oneway_monad.
    # This returns either `plain` for a plain monad, or `repl` for a an
    # instated effect.
    #
    public next val
    =>
      match val.this
        plain      => oneway_monad_mode.plain
        inst, repl => oneway_monad_mode.repl
