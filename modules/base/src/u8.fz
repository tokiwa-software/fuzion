# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion standard library feature u8
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# u8 -- 8-bit unsigned integer values
#
public u8(public val u8) : num.wrap_around, has_interval is

  # overflow checking

  # would negation cause an overflow?
  public redef wrapped_on_neg bool => !is_zero

  # would addition + other cause an overflow or underflow?
  public fixed redef overflow_on_add (other u8) bool => u8.max -° val < other
  public fixed redef underflow_on_add(other u8) bool => false

  # would subtraction - other cause an overflow or underflow?
  public fixed redef overflow_on_sub (other u8) bool => false
  public fixed redef underflow_on_sub(other u8) bool => val < other

  # would multiplication * other cause an overflow or underflow?
  public fixed redef overflow_on_mul (other u8) bool => as_i32 *° other.as_i32 > u8.max.as_i32
  public fixed redef underflow_on_mul(other u8) bool => false

  # neg, add, sub, mul with wrap-around semantics
  public fixed redef prefix -° u8 => intrinsic
  public fixed redef infix +° (other u8) u8 => intrinsic
  public fixed redef infix -° (other u8) u8 => intrinsic
  public fixed redef infix *° (other u8) u8 => intrinsic

  # division and remainder with check for div-by-zero
  public fixed redef infix / (other u8) u8 => div other
  public fixed redef infix % (other u8) u8 => mod other

  # division and remainder with crash in case of div-by-zero
  div (other u8) u8 => intrinsic
  mod (other u8) u8 => intrinsic

  # bitwise and, or and xor operations
  public fixed redef infix &  (other u8) u8 => intrinsic
  public fixed redef infix |  (other u8) u8 => intrinsic
  public fixed redef infix ^  (other u8) u8 => intrinsic

  # shift operations (unsigned)
  public fixed redef infix >> (other u8) u8 => intrinsic
  public fixed redef infix << (other u8) u8 => intrinsic

  # does this u8 fit into an u8?
  #
  public fixed redef fits_in_u8 bool => true

  public as_i8 i8
    pre
      debug: val ≤ i8.max.as_u8
    =>
      cast_to_i8
  public as_i16 i16   => as_i32.as_i16
  public as_i32 i32   => intrinsic
  public as_i64 i64   => as_i32.as_i64
  public as_i128 i128 => as_i32.as_i128
  public redef as_u8 u8 => val
  public as_u16 u16   => as_i32.as_u16
  public as_u32 u32   => as_i32.as_u32
  public as_u64 u64   => as_i32.as_u64
  public as_u128 u128 => as_i32.as_u128
  public as_int int   => int as_i64

  public cast_to_i8 i8 => intrinsic


  # create hash code from this number
  public redef type.hash_code(a u8.this) u64 =>
    hash a.as_u64


  # find the highest 1 bit in this integer and return integer with
  # this single bit set or 0 if this is 0.
  #
  public highest_one_bit u8 =>
    (v , s)  := (val, u8 0)
    (v1, s1) := if (v  < 0x10) (v , s ) else (v  >> 4, s  + 4)
    (v2, s2) := if (v1 < 4   ) (v1, s1) else (v1 >> 2, s1 + 2)
    (v3, s3) := if (v2 < 2   ) (v2, s2) else (v2 >> 1, s2 + 1)
    v3 << s3


  # count the number of trailing zeros in this integer.
  #
  public trailing_zeros i32 =>
    (v , s)  := (val, 0)
    (v1, s1) := if (v  & 0xf) != 0 then (v , s ) else (v  >> 4, s  + 4)
    (v2, s2) := if (v1 &   3) != 0 then (v1, s1) else (v1 >> 2, s1 + 2)
    (v3, s3) := if (v2 &   1) != 0 then (v2, s2) else (v2 >> 1, s2 + 1)
    if             (v3 &   1) != 0 then      s3  else           8


  # count the number of 1 bits in the binary representation of this
  # integer.
  #
  public redef ones_count i32 =>
    v := val.as_i32
    m  := v  & 0xaa; v1 := v  - m  + (m >> 1)
    m1 := v1 & 0xcc; v2 := v1 - m1 + (m1 >> 2)
    m2 := v2 & 0xf0; v3 := v2 - m2 + (m2 >> 4)
    v3


  # the least significant byte of this integer
  public redef low8bits u8 => val



  # is this u8 an ASCII white-space character?
  #
  public is_ascii_white_space bool =>
    (val = 9  ||  # HT
     val = 10 ||  # LF
     val = 11 ||  # VT
     val = 12 ||  # FF
     val = 13 ||  # CR
     val = 32     # SPACE
    )



  # -----------------------------------------------------------------------
  #
  # type features:


  # identity element for 'infix +'
  #
  public fixed redef type.zero u8  => 0


  # identity element for 'infix *'
  #
  public fixed redef type.one  u8  => 1


  # equality
  #
  public fixed redef type.equality(a, b u8) bool => intrinsic


  # total order
  #
  public fixed redef type.lteq(a, b u8) bool => intrinsic


  # returns the number in whose bit representation all bits are ones
  public fixed redef type.all_bits_set u8 => u8 0xff


  # minimum
  #
  public fixed redef type.min u8 => u8 0


  # maximum
  #
  public fixed redef type.max u8 => u8 0xff
