# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion module compiler
#
# -----------------------------------------------------------------------

public compile(code String) unit =>
  fuzion_home := envir.vars.get "FUZION_HOME" .or_panic
  cp := "$fuzion_home/classes"

  _ := fuzion.jvm.use _ ["--enable-preview", "--enable-native-access=ALL-UNNAMED", "-Djava.class.path=$cp"] ()->

    flang => Java.dev.flang
    fe => flang.fe
    tools => flang.tools

    options := fe.FrontEndOptions
      .new
        0 # verbose,
        (Java.java.nio.file.Path.of (Java.java.net.URI.new "file://$fuzion_home").or_panic) # fuzionHome,
        true # loadBaseMod,
        false # eraseInternalNamesInMod,
        (flang.util.List.new (Java.java.lang.__jString.new "base")) # modules,
        (flang.util.List.new) # moduleDirs,
        (fuzion.jvm.env.null Java.dev.flang.util.List).or_panic # dumpModules,
        0 # fuzionDebugLevel,
        false # fuzionSafety,
        true # enableUnsafeIntrinsics,
        (fuzion.jvm.env.null Java.dev.flang.util.List).or_panic # sourceDirs,
        false # readStdin,
        (code.utf8.map (.cast_to_i8)) # executeCode,
        nil # main,
        nil # moduleName,
        true # loadSources,
        false # needsEscapeAnalysis,
        false # serializeFuir,
        (fuzion.jvm.env.null Java.java.util.function.Consumer).or_panic # timer

    front_end := fe.FrontEnd.new options

    mir   := front_end.createMIR
    fuir  := flang.fuir.GeneratingFUIR.new front_end mir
    dfuir := flang.fuir.analysis.dfa.DFA
                .new options fuir
                .new__fuir
    ofuir := flang.opt.Optimizer
               .new options dfuir
               .fuir

    jvm_options := flang.be.jvm.JVMOptions.new options true false false Java.java.util.Optional.empty Java.java.util.Optional.empty
    jvm := flang.be.jvm.JVM.new jvm_options ofuir

    jvm.compile

