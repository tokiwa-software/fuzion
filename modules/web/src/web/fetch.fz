# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion feature fetch
#
# -----------------------------------------------------------------------

# eagerly fetch an url via https, return response as a String
#
# NYI: support http, custom port etc.
#
public fetch(url String) outcome String
  pre
    debug: url.starts_with "https://"
    debug: !url.contains_whitespace
=>

  # this lm is used for the raw netwok connection
  #
  net_lm : mutate is

  # this lm is used for reader/writer of the ssl connection
  #
  ssl_lm : mutate is

  host, target :=
    url
      .find "/" "https://".byte_length
      .bind (idx -> url.split_at_byte idx)
      .bind (tpl -> (tpl.0.substring "https://".byte_length, tpl.1))
      # NYI: error handling
      .get

  # NYI: reduce code nesting

  net_lm ! ()->

    match net.client net.family.ipv4 net.protocol.tcp host 443
      e error => e
      c net.connection =>
        c.with _ net_lm ()->
          ssl_lm ! ()->
            wolfssl _ net_lm ssl_lm ()->

              rm := http
                .request_message
                .new http.get target 1 1 [("Host", host)]

              (io.buffered ssl_lm).writer.env
                .write (rm.bytes 0)
                .error
                .bind _->
                  (io.buffered ssl_lm).writer.env.flush.bind _->
                    http
                      .read_response ssl_lm
                      .bind resp->
                        resp.body_as_string
