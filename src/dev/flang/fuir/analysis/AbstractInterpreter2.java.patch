23c23
<  * Source of class AbstractInterpreter
---
>  * Source of class AbstractInterpreter2
39c39,53
< import dev.flang.util.Pair;
---
> 
> 
> /*
>  * AbstractInterpreter2 is a variant of AbstractInterpreter that does not
>  * require code generation, i.e., the `RESULT` type parameter is `void`
>  * and `Pair<VALUE,RESULT>` are replaced by just `VALUE`.
>  *
>  * To modify this file, modify
>  *
>  *   build/generated/src/dev/flang/fuir/analysis/AbstractInterpreter2.java
>  *
>  + and then run
>  *
>  *   make -f $(FZ_SRC)/Makefile update-java-patches
>  */
43c57
<  * AbstractInterpreter provides a skeleton of an abstract interpreter
---
>  * AbstractInterpreter2 provides a skeleton of an abstract interpreter
47c61
<  * This class has two generic type parameters that specify the types of values
---
>  * This class has one generic type parameters that specify the type of values
51,54d64
<  *    for a compiler, this might be the code required to obtain that value.
<  *
<  *  - RESULT represents the result of the abstract interpretation. For a
<  *    compiler, this would, e.g, be the generated code.
58c68
< public class AbstractInterpreter<VALUE, RESULT> extends ANY
---
> public class AbstractInterpreter2<VALUE> extends ANY
69c79
<   public static abstract class ProcessExpression<VALUE, RESULT> extends ANY
---
>   public static abstract class ProcessExpression<VALUE> extends ANY
72,78d81
<     /**
<      * Join a List of RESULT from subsequent expressions into a compound
<      * expression.  For a code generator, this could, e.g., join expressions "a :=
<      * 3;" and "b(x);" into a block "{ a := 3; b(x); }".
<      */
<     public abstract RESULT sequence(List<RESULT> l);
< 
91c94
<     public abstract RESULT expressionHeader(int s);
---
>     public abstract void expressionHeader(int s);
96c99
<     public abstract RESULT comment(String s);
---
>     public abstract void comment(String s);
101c104
<     public abstract RESULT nop();
---
>     public abstract void nop();
115,116d117
<      *
<      * @return code to perform the side effects of v and ignoring the produced value.
118c119
<     public RESULT drop(VALUE v, int type)
---
>     public void drop(VALUE v, int type)
120c121
<       return nop(); // NYI, should be implemented by BEs.
---
>       nop(); // NYI, should be implemented by BEs.
133,134d133
<      *
<      * @return resulting code of this assignment.
136c135
<     public abstract RESULT assignStatic(int s, int f, VALUE tvalue, VALUE val);
---
>     public abstract void assignStatic(int s, int f, VALUE tvalue, VALUE val);
148c147
<     public abstract RESULT assign(int s, VALUE tvalue, VALUE avalue);
---
>     public abstract void assign(int s, VALUE tvalue, VALUE avalue);
164c163
<     public abstract Pair<VALUE, RESULT> call(int s, VALUE tvalue, List<VALUE> args);
---
>     public abstract VALUE call(int s, VALUE tvalue, List<VALUE> args);
175c174
<     public abstract Pair<VALUE, RESULT> box(int s, VALUE v, int vc, int rc);
---
>     public abstract VALUE box(int s, VALUE v, int vc, int rc);
182c181
<     public abstract Pair<VALUE, RESULT> current(int s);
---
>     public abstract VALUE current(int s);
189c188
<     public abstract Pair<VALUE, RESULT> outer(int s);
---
>     public abstract VALUE outer(int s);
209c208
<     public abstract Pair<VALUE, RESULT> constData(int s, int constCl, byte[] d);
---
>     public abstract VALUE constData(int s, int constCl, byte[] d);
220c219
<     public abstract RESULT match(int s, AbstractInterpreter<VALUE, RESULT> ai, VALUE subv);
---
>     public abstract VALUE match(int s, AbstractInterpreter2<VALUE> ai, VALUE subv);
234c233
<     public abstract Pair<VALUE, RESULT> tag(int s, VALUE value, int newcl, int tagNum);
---
>     public abstract VALUE tag(int s, VALUE value, int newcl, int tagNum);
241c240
<     public RESULT reportErrorInCode(String msg) { return comment(msg); }
---
>     public void reportErrorInCode(String msg) { comment(msg); }
300c299
<   public final ProcessExpression<VALUE, RESULT> _processor;
---
>   public final ProcessExpression<VALUE> _processor;
311c310
<   public AbstractInterpreter(FUIR fuir, ProcessExpression<VALUE, RESULT> processor)
---
>   public AbstractInterpreter2(FUIR fuir, ProcessExpression<VALUE> processor)
434,435d432
<    * @param l list that will receive the result
<    *
438c435
<   void assignOuterAndArgFields(List<RESULT> l, int s)
---
>   void assignOuterAndArgFields(int s)
448d444
<             l.add(cur.v1());
450,451c446
<             l.add(out.v1());
<             l.add(_processor.assignStatic(s, or, cur.v0(), out.v0()));
---
>             _processor.assignStatic(s, or, cur, out);
462d456
<             l.add(cur.v1());
465c459
<             l.add(_processor.assignStatic(s, af, cur.v0(), ai));
---
>             _processor.assignStatic(s, af, cur, ai);
480c474
<   public Pair<VALUE,RESULT> processClazz(int cl)
---
>   public VALUE processClazz(int cl)
482d475
<     var l = new List<RESULT>();
486c479
<         assignOuterAndArgFields(l, s);
---
>         assignOuterAndArgFields(s);
489,491c482,483
<     l.add(p.v1());
<     var res = p.v0();
<     return new Pair<>(res, _processor.sequence(l));
---
>     var res = p;
>     return res;
504c496
<   public Pair<VALUE,RESULT> processCode(int s0)
---
>   public VALUE processCode(int s0)
507d498
<     var l = new List<RESULT>();
511,512c502,503
<         l.add(_processor.expressionHeader(s));
<         l.add(process(s, stack));
---
>         _processor.expressionHeader(s);
>         process(s, stack);
521,522c512,513
<         l.add(_processor.reportErrorInCode("Severe compiler bug! This code should be unreachable:\n" +
<                                            _fuir.siteAsString(last_s)));
---
>         _processor.reportErrorInCode("Severe compiler bug! This code should be unreachable:\n" +
>                                      _fuir.siteAsString(last_s));
524a516
> 
529c521
<     return new Pair<>(v, _processor.sequence(l));
---
>     return v;
539,541d530
<    *
<    * @return the result of the abstract interpretation, e.g., the generated
<    * code.
543c532
<   public RESULT process(int s, Stack<VALUE> stack)
---
>   public void process(int s, Stack<VALUE> stack)
555d543
<     RESULT res;
568c556
<               res = _processor.assign(s, tvalue, avalue);
---
>               _processor.assign(s, tvalue, avalue);
572,573c560,561
<               res = _processor.sequence(new List<>(_processor.drop(tvalue, tc),
<                                                     _processor.drop(avalue, ft)));
---
>               _processor.drop(tvalue, tc);
>               _processor.drop(avalue, ft);
584c572
<               res = _processor.comment("Box is a NOP, clazz is already a ref");
---
>               _processor.comment("Box is a NOP, clazz is already a ref");
590,591c578
<               push(stack, rc, r.v0());
<               res = r.v1();
---
>               push(stack, rc, r);
602c589
<           if (r.v0() == null)  // this may happen even if rt is not void (e.g., in case of tail recursion or error)
---
>           if (r == null)  // this may happen even if rt is not void (e.g., in case of tail recursion or error)
609c596
<               push(stack, rt, r.v0());
---
>               push(stack, rt, r);
611d597
<           res = r.v1();
616c602
<           res = _processor.comment(_fuir.comment(s));
---
>           _processor.comment(_fuir.comment(s));
623,624c609
<           push(stack, cl, r.v0());
<           res = r.v1();
---
>           push(stack, cl, r);
633,638c618
<           if (CHECKS) check
<             // check that constant creation has no side effects.
<             (r.v1() == _processor.nop());
< 
<           push(stack, constCl, r.v0());
<           res = r.v1();
---
>           push(stack, constCl, r);
645,646c625,626
<           res = _processor.match(s, this, subv);
<           if (_fuir.alwaysResultsInVoid(s))
---
>           var r = _processor.match(s, this, subv);
>           if (r == null)
649a630,631
>           if (CHECKS) check
>             (r == null || r == _processor.unitValue());
661,662c643
<           push(stack, newcl, r.v0());
<           res = r.v1();
---
>           push(stack, newcl, r);
676c657
<           res = _processor.drop(v, rt);
---
>           _processor.drop(v, rt);
682d662
<           res = null;
691c671
<         say("process done: "+_fuir.siteAsString(s) + ":\t"+_fuir.codeAtAsString(s)+" stack is "+stack+" RES "+res);
---
>         say("process done: "+_fuir.siteAsString(s) + ":\t"+_fuir.codeAtAsString(s)+" stack is "+stack);
693d672
<     return res;
