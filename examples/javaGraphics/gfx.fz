# This file is part of the Fuzion language implementation.
#
# The Fuzion language implementation is free software: you can redistribute it
# and/or modify it under the terms of the GNU General Public License as published
# by the Free Software Foundation, version 3 of the License.
#
# The Fuzion language implementation is distributed in the hope that it will be
# useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
# License for more details.
#
# You should have received a copy of the GNU General Public License along with The
# Fuzion language implementation.  If not, see <https://www.gnu.org/licenses/>.


# -----------------------------------------------------------------------
#
#  Tokiwa Software GmbH, Germany
#
#  Source code of Fuzion example gfx
#
#  Author: Fridtjof Siebert (siebert@tokiwa.software)
#
# -----------------------------------------------------------------------

# gfx is a minimalistic example that shows how Java's
# java.awt graphics can be called from Fuzion code.
#
# See Makefile for how to start fuzion to run this example.
#
gfx : Java  # inheriting Java makes Java packages visible
is

  /* the following two values are geometry values that may be modified to alter
   * the appearance:
   */

  // Width of black lines as percentage of main radius
  BLACK_LINE_WIDTH := 1000 / 15              # NYI: floats: 1.0D/15

  // size of three small cicles relative to their surrounding circles
  SMALL_CIRCLE_PERCENTAGE := 250             # NYI: floats: 0.25D


  /* the following values are geometry values that are fixed and should not be
   * changed:
   */

  // total size
  SIZE := 512

  // main radius
  r := SIZE / 2

  // width of black lines
  b := r * BLACK_LINE_WIDTH / 1000           # NYI: floats: r * BLACK_LINE_WIDTH;

  // outer radius of three main wedges
  r1 := r - b

  // side length of triangle of the centers of the three main circles with radius r2:
  //
  //  l = 2*r2 + b;
  //
  // distance from center to center of three main circles
  //
  //  h = r - r2 - b               -- using radius r
  //
  //  h =  (2*r2+b)/ (2*(cos 30))  -- using trigonomy
  //
  // so we get for r2
  //
  //  r - r2 - b = (2*r2+b)/ (2*(cos 30))
  //
  //  r - (b * (1 + 1/(2*(cos 30)))) = r2 * (1 + 1 / (cos 30))
  //
  //  r2 = (r - (b * (1 + 1/(2*(cos 30))))) / (1 + 1 / (cos 30))
  //     = (r - (b * (1 + 1/(2*sqrt(3/4))))) / (1 + 1 / sqrt(3/4))
  //     = (r - (b * (1 + 1/sqrt(3)))) / (1 + 2 / sqrt(3))
  //
  // radius of three main circles:
  r2 := (r*1000 - b * 1577) / 2155           # NYI: floats (r - b * (1+Math.sqrt(1/3.0D)))/(1 + 2*Math.sqrt(1/3.0D))

  // radius of three small circles
  r3 := r2 * SMALL_CIRCLE_PERCENTAGE / 1000  # NYI: floats: r2 * SMALL_CIRCLE_PERCENTAGE


  // background and wedge colors:
  BACKGROUND := java.awt.Color.BLACK
  C1 := java.awt.Color.WHITE
  C2 := java.awt.Color.new_III 81 36 128     # NYI: Overloading of Java constructors
  C3 := java.awt.Color.new_III 130 106 175

  # NYI: floats and trigonometry missing
  cos120 := -500
  sin120 := 866
  cos240 := -500
  sin240 := -866


  G2D (g java.awt.Graphics, tx, ty, rot0 i32) ref is  # NYI: #167: 'ref' due to lack of 'like this'
    rot := if rot0 >= 0 rot0 % 360 else rot0 % 360 + 360

    rotate (d i32) => G2D g tx ty rot+d

    threeTimes(d (G2D, java.awt.Color) -> unit) unit is
      d  G2D.this              C1
      d (G2D.this.rotate -120) C2
      d (G2D.this.rotate -240) C3

    # Draw a filled arc of color c, center at (x,y), radius r, starting at angle
    # start and extending of len degrees.
    #
    arc(c java.awt.Color, x, y, r, start, len i32) unit is
      g.setColor c
      # NYI: rotation hard coded for 0°/120°/240°
      (rx, ry) := if      rot % 360 = 0   then (x, y)
                  else if rot % 360 = 120 then (x * cos120 / 1000 - y * sin120 / 1000,
                                                x * sin120 / 1000 + y * cos120 / 1000)
                  else if rot % 360 = 240 then (x * cos240 / 1000 - y * sin240 / 1000,
                                                x * sin240 / 1000 + y * cos240 / 1000)
                  else
                    say "rotation by {rot%360} not supported yet"
                    (x, y)
      g.fillArc tx+rx-r ty+ry-r 2*r 2*r (start-rot)%360 len


    # Draw a filled circle of color c, center at (x,y), radius r
    #
    cir(c java.awt.Color, x, y, r i32) unit is
      arc c x y r 0 360

    # Draw the Fuzion logo
    #
    drawLogo is
      // black background circle
      cir BACKGROUND 0 0 r

      // three arcs
      threeTimes (g, c -> g.arc c 0 0 r1 -30 120)

      // black circle in the center, radius to touch the sides of the inner triangle
      cir BACKGROUND 0 0 ((r - r2 - b) / 2)

      // black arcs around inner circles
      threeTimes (g, c -> g.arc BACKGROUND 0 -r+r2+b r2+b 90 210)

      // inner circles
      threeTimes (g, c -> g.cir c 0 -r+b+r2 r2)

      // small circles
      (rotate -120).threeTimes (g, c -> g.cir c 0 -r+b+r2 r3)


  gfx // : java.lang.Thread_static    # NYI: causes NullPointerException in fz
  is
    match java.awt.Frame.new
      e error => say "error: $e"
      f java.awt.Frame =>
        f.setSize 800 800
        f.setTitle "Fuzion's first window!"

        b := Java.java.lang.System.getenv "BUTTON"
        if !b.isNull && b = "TRUE"  # show a button
          match java.awt.Button.new "If you like Fuzion, click here!"
            e error => say "error: $e"
            b java.awt.Button =>
              b.setBounds 50 50 50 50
              f.add_Ljava_7_awt_7_Component_s_ b
              f.setVisible true
              g := f.getGraphics
              say "g is "+g.getClass.toString
              (G2D g 400 400 0).drawLogo
              f.setVisible true

        else  # draw logo
          f.setVisible true

          # NYI: cannot redefine Frame.paint, so instead we use a hack: wait for 200ms
          # for the Frame to perform its paint(), and then just draw over it:
          java.lang.Thread.sleep 200
          (G2D f.getGraphics 400 400 0).drawLogo

        java.lang.Thread.sleep 50000
        f.setVisible false

  gfx
  exit 0   # explicitly exit since JVM would otherwise keep us alive
